{"version":3,"sources":["realm/use_realm.tsx","realm/use_atlas.tsx","app/auth/login.tsx","app/auth/protected_route.tsx","app/headers/logo.tsx","app/headers/desktop.tsx","app/headers/mobile.tsx","pages/home/home.tsx","components/loading_spinner.tsx","components/plain_button.tsx","types/amsterdam.ts","types/player_match.ts","types/season.ts","pages/season/admin.tsx","pages/season/team/header.tsx","pages/season/player/team_results.tsx","pages/season/player/details.tsx","pages/season/player/matches.tsx","pages/season/player/splits.tsx","pages/season/player/dashboard.tsx","pages/season/team/match_view.tsx","pages/season/team/view.tsx","pages/season/team/dashboard.tsx","pages/season/dashboard.tsx","pages/season/router.tsx","pages/seasons/new_season.tsx","pages/seasons/dashboard.tsx","pages/seasons/router.tsx","app/app.tsx","reportWebVitals.ts","styles.ts","theme.ts","index.tsx"],"names":["RealmContext","createContext","RealmProvider","children","app","Realm","id","process","baseUrl","REACT_APP_REALM_BASE_URL","useState","currentUser","user","setUser","login","email","password","logIn","emailPassword","console","error","loginAnonymous","anonymous","logout","logOut","Provider","value","useRealm","realm","useContext","Error","AtlasContext","AtlasProvider","data","setData","useEffect","mongoClient","atlasData","useAtlas","atlas","players","db","collection","seasons","teams","teamMatches","playerMatches","StyledLogin","styled","div","LoginContainer","LoginAnonContainer","LoginPage","location","useLocation","username","setUsername","setPassword","from","state","pathname","to","replace","style","marginBottom","label","placeholder","onChange","e","target","type","marginTop","variant","onClick","ProtectedRoute","leafAnimation","keyframes","StyledLogo","MongoDBLogoMark","Logo","height","StyledHeader","NavLinks","ul","UserInfo","Header","navTo","useNavigate","margin","textDecoration","textAlign","cursor","providerType","profile","header","menuOpen","setMenuOpen","flex","align","justify","open","trigger","size","glyph","href","description","StyledMain","StyledOrderedList","ol","StyledUnorderedList","HomePage","rel","StyledLoading","Loading","_","color","StyledButton","Button","theme","colors","white","lg","blue","base","PlainButton","rest","dayOfWeek","v","charAt","toUpperCase","substring","monthNames","rankPlace","r","suffix","emptyPlayerHandicap","isSeasonTerm","NightContainer","NightControl","NightHeader","TeamInputs","SeasonAdmin","season","saveDivisions","saveTeams","Object","values","divisions","reduce","tot","divs","length","divisionsOpen","setDivisionsOpen","divisionsErrMsg","setDivisionsErrMsg","nights","acc","night","existingDivisions","setDivisions","teamsOepn","setTeamsOpen","teamsErrMsg","setTeamsErrMsg","teamsByDivision","setTeamsByDivision","entries","inner","division","existingTeams","filter","t","division_name","map","xref","name","title","isOpen","val","idx","i","primaryButton","text","errorMessage","divisionName","team","flatMap","divisionTeams","parseInt","ModalHeader","PageHeader","TeamHeader","modalView","teamRecord","tr","wins","losses","teamRecordDisplay","gridColumn","marginLeft","PlayerTeamResults","linkToPlayers","selfTeamXref","stats","useMemo","playerWeeks","totals","gamesWon","gamesLost","playerMatch","self","find","p","handicap","games_won","opp","week_num","doubles","gamePct","emptyStats","win","loss","n","sort","p1","p2","push","columns","pr","datum","toFixed","StyledPlayerDetails","PlayerDetails","handicaps","record","streakDisplay","streak","lastWeek","Math","abs","StyledRow","Row","shouldForwardProp","prop","noBorder","borderTop","gray","light1","backgroundColor","green","light2","red","PlayerDashboard","matches","styledMatches","setStyledMatches","weekSet","match","pm","date","getMonth","getDate","forfeit","match_id","StyledPlayerSplits","Controls","Control","Label","PlayerSplits","handicapSet","set","selectedHandicap","setSelectedHandicap","showExpandedView","setShowExpandedView","excludeForfeits","setExcludeForfeits","splits","setSplits","matchups","race","races","weeks","unshift","rounds","matchup","long","short","R1","R2","TB","split","m1","m2","detailedMatchupDisplay","key","w1","w2","up","even","down","basicMatchupDisplay","roundDisplay","width","htmlFor","checked","join","prefix","Dashboard","StyledCombobox","Combobox","playerMatchesByXref","playersByTeamXref","teamsByXref","selectedPlayer","setSelectedPlayer","setPlayerMatches","playerTeam","setPlayerTeam","playerRecord","setPlayerRecord","playerHandicaps","setPlayerHandicaps","reversed","getTime","seq","result","teamXref","player","displayName","MatchView","_id","Matches","TeamView","playerMatchesByTeamXref","teamMatchesById","teamRecordsByXref","playerMatchesById","setPlayerMatchesById","forEach","matchId","schedule","display","teamMatchup","selectedTeamXref","teamMatch","matches_won","newTeamMatchup","matchDescription","TeamDashboard","useParams","setTeam","setTeamRecord","Leagues","Divisions","Division","teamXrefsByDivision","setTeamXrefsByDivision","teamRecords","rank","pct","tr1","tr2","modalTeam","setModalTeam","isMobile","useMediaQuery","query","ts","setOpen","TeamRouter","loadPlayerMatches","loadTeams","loadTeamMatches","year","term","s","setTeams","setTeamsByXref","then","setTeamMatchesById","setTeamRecordsByXref","outer","gamesTotal","matchStats","teamStats","emptyMatchStats","setPlayerMatchesByXref","setPlayerMatchesByTeamXref","setPlayersByTeamXref","pm1","pm2","playersMap","path","element","NewSeason","saveSeason","yearInput","setYearInput","termInput","setTermInput","typeInput","setTypeInput","xrefInput","setXrefInput","setName","monday","setMonday","tuesday","setTuesday","wednesday","setWednesday","thursday","setThursday","friday","setFriday","saturday","setSaturday","sunday","setSunday","numWeeksInput","setNumWeeksInput","errMsg","setErrMsg","stopPropagation","numWeeks","num_weeks","StyledPage","CardList","CardTitle","SeasonsDashboard","modalOpen","setModalOpen","minWidth","SeasonsRouter","setSeasons","insertOne","insertedId","seasonXref","season_xref","updateOne","$set","modifiedCount","insertMany","App","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","fontsURL","docStyles","css","meyersWebReset","styles","black","offwhite","grays","reds","light3","blues","palette","typography","fonts","code","ReactDOM","createRoot","document","getElementById","render","StrictMode","basename"],"mappings":"gUAUMA,EAAeC,wBAAiC,MAMzCC,EAAgB,SAAC,GAAsC,IAApCC,EAAmC,EAAnCA,SAI9B,IAAMC,EAAM,IAAIC,IAAU,CACxBC,GAAIC,kBACJC,QAASD,sLAAYE,2BAGvB,EAAwBC,mBAA4BN,EAAIO,aAAxD,mBAAOC,EAAP,KAAaC,EAAb,KAEMC,EAAK,iDAAG,WAAOC,EAAeC,GAAtB,oGAEJZ,EAAIa,MAAMZ,IAAkBa,cAAcH,EAAOC,IAF7C,cAIVH,EAAQT,EAAIO,aAJF,kBAKHP,EAAIO,aALD,uCAOVQ,QAAQC,MAAM,kBAAd,MACAP,EAAQ,MARE,kBASH,MATG,yDAAH,wDAaLQ,EAAc,iDAAG,iHAEbjB,EAAIa,MAAMZ,IAAkBiB,aAFf,cAInBT,EAAQT,EAAIO,aAJO,kBAKZP,EAAIO,aALQ,uCAOnBQ,QAAQC,MAAM,kBAAd,MACAP,EAAQ,MARW,kBASZ,MATY,yDAAH,qDAadU,EAAM,iDAAG,qGAEPnB,EAAIO,YAFG,gCAGHP,EAAIO,YAAYa,SAHb,sDAMXL,QAAQC,MAAM,mBAAd,MANW,uBAQXP,EAAQ,MARG,0EAAH,qDAYZ,OAAO,cAACb,EAAayB,SAAd,CAAuBC,MAAO,CAAEZ,QAAOO,iBAAgBE,SAAQX,QAA/D,SAAwET,KAGpEwB,EAAW,WACtB,IAAMC,EAAQC,qBAAW7B,GACzB,GAAc,OAAV4B,EACF,MAAM,IAAIE,MAAM,gDAElB,OAAOF,GC/DHG,EAAe9B,wBAAiC,MAMzC+B,EAAgB,SAAC,GAAsC,IAApC7B,EAAmC,EAAnCA,SACtBS,EAASe,IAATf,KAER,EAAwBF,mBAAuD,MAA/E,mBAAOuB,EAAP,KAAaC,EAAb,KASA,OAPAC,qBAAU,WACK,OAATvB,GAGJsB,EAAQtB,EAAKwB,YAAY,WACxB,CAACxB,IAEG,cAACmB,EAAaN,SAAd,CAAuBC,MAAO,CAAEO,KAAMI,EAAUJ,IAAhD,SAA0D9B,KAGtDmC,EAAW,WACtB,IAAMC,EAAQV,qBAAWE,GACzB,GAAc,OAAVQ,EACF,MAAM,IAAIT,MAAM,gDAElB,OAAOS,GAGT,SAASF,EAAUJ,GACjB,OAAKA,EAGE,CACLO,QAAS,kBAAMP,EAAKQ,GAAG,aAAaC,WAAmB,YACvDC,QAAS,kBAAMV,EAAKQ,GAAG,aAAaC,WAAmB,YACvDE,MAAO,kBAAMX,EAAKQ,GAAG,aAAaC,WAAiB,UACnDG,YAAa,kBAAMZ,EAAKQ,GAAG,aAAaC,WAAsB,iBAC9DI,cAAe,kBAAMb,EAAKQ,GAAG,aAAaC,WAAwB,oBAP3D,KC/BX,IAAMK,EAAcC,IAAOC,IAAV,iGAMXC,EAAiBF,IAAOC,IAAV,yFAMdE,EAAqBH,IAAOC,IAAV,sGAqDTG,MA/Cf,WAAsB,IAAD,IACbC,EAAWC,cACjB,EAAgC5C,mBAAS,IAAzC,mBAAO6C,EAAP,KAAiBC,EAAjB,KACA,EAAgC9C,mBAAS,IAAzC,mBAAOM,EAAP,KAAiByC,EAAjB,KAEA,EAAwC9B,IAAhCb,EAAR,EAAQA,MAAOO,EAAf,EAAeA,eAAgBT,EAA/B,EAA+BA,KAE3B8C,GAAO,UAACL,EAAiBM,aAAlB,mBAAyBD,YAAzB,eAA+BE,WAAY,IAEtD,OAAIhD,EACK,cAAC,IAAD,CAAUiD,GAAIH,EAAMI,SAAO,IAIlC,eAACf,EAAD,WACE,eAACG,EAAD,WACE,cAAC,IAAD,CAAMa,MAAO,CAAEC,aAAc,QAA7B,kDACA,cAAC,IAAD,CACEC,MAAM,WACNC,YAAY,yBACZC,SAAU,SAAAC,GACRZ,EAAYY,EAAEC,OAAO3C,QAEvBA,MAAO6B,IAET,cAAC,IAAD,CACEU,MAAM,WACNK,KAAK,WACLH,SAAU,SAAAC,GACRX,EAAYW,EAAEC,OAAO3C,QAEvBA,MAAOV,IAET,cAAC,IAAD,CAAQ+C,MAAO,CAAEQ,UAAW,QAAUC,QAAQ,UAAUC,QAAS,kBAAM3D,EAAMyC,EAAUvC,IAAvF,sBAIF,eAACmC,EAAD,WACE,cAAC,IAAD,CAAMY,MAAO,CAAEC,aAAc,UAA7B,kCACA,cAAC,IAAD,CAAQQ,QAAQ,iBAAiBC,QAAS,kBAAMpD,KAAhD,sCC/COqD,I,IAAAA,EAXf,YAA8C,IAApBvE,EAAmB,EAAnBA,SAClBS,EAASe,IAATf,KACFyC,EAAWC,cAEf,OAAK1C,EAIET,EAHE,cAAC,IAAD,CAAU0D,GAAG,SAASF,MAAO,CAAED,KAAML,GAAYS,SAAO,K,SCT7Da,EAAgBC,oBAAH,qHASbC,EAAa7B,YAAO8B,IAAP9B,CAAH,kKAGD2B,GAQAI,I,MAAAA,EAJf,WACE,OAAO,cAACF,EAAD,CAAYd,MAAO,CAAEQ,UAAW,EAAGP,aAAc,GAAKgB,OAAQ,MCZjEC,EAAejC,IAAOC,IAAV,gKAQZiC,EAAWlC,IAAOmC,GAAV,0FAMRC,EAAWpC,IAAOC,IAAV,kGAiCCoC,I,EAAAA,EA3Bf,WACE,IAAMC,EAAQC,cACd,EAAyB5D,IAAjBJ,EAAR,EAAQA,OAAQX,EAAhB,EAAgBA,KAEhB,OACE,eAACqE,EAAD,WACE,cAACC,EAAD,UACE,cAAC,IAAD,CAAMnB,MAAO,CAAEyB,OAAQ,OAAQC,eAAgB,QAAU5B,GAAG,WAA5D,uBAIF,uBAAME,MAAO,CAAE2B,UAAW,SAAUC,OAAQ,WAAalB,QAAS,kBAAMa,EAAM,MAA9E,UACE,cAAC,IAAD,kCACA,cAAC,EAAD,OAED1E,GACC,eAACwE,EAAD,WACE,cAAC,IAAD,CAAQZ,QAAQ,iBAAiBC,QAASlD,EAA1C,oBAGA,cAAC,IAAD,UAA6B,cAAtBX,EAAKgF,aAA+B,QAAUhF,EAAKiF,QAAQ9E,OAASH,EAAKN,Y,yBCvCpF2E,GAAejC,IAAO8C,OAAV,8HA2CHT,I,SAAAA,GApCf,WACE,MAAgC3E,oBAAS,GAAzC,mBAAOqF,EAAP,KAAiBC,EAAjB,KACA,EAAyBrE,IAAjBJ,EAAR,EAAQA,OAAQX,EAAhB,EAAgBA,KAEhB,OACE,eAAC,GAAD,WACE,cAAC,EAAD,IACA,cAAC,IAAD,CAAImD,MAAO,CAAEkC,KAAM,GAAnB,iCACA,eAAC,KAAD,CACEC,MAAM,SACNC,QAAQ,MACRC,KAAML,EACNM,QACE,cAAC,IAAD,CAAYC,KAAK,SAAS,aAAW,YAAY7B,QAAS,kBAAMuB,GAAaD,IAA7E,SACE,cAAC,IAAD,CAAMQ,MAAM,eANlB,UAUE,cAAC,KAAD,CAAUC,KAAK,aAAf,uBACA,cAAC,KAAD,CAAUA,KAAK,kBAAf,0BACA,cAAC,KAAD,CAAUA,KAAK,qBAAf,gCACA,cAAC,KAAD,KACE5F,GAAQ,cAAC,KAAD,CAAU4F,KAAK,mBAAf,mBACT5F,GACC,cAAC,KAAD,CACE6D,QAASlD,EACTkF,YAAmC,cAAtB7F,EAAKgF,aAA+B,WAAahF,EAAKiF,QAAQ9E,OAASH,EAAKN,GAF3F,2B,SCpCJoG,GAAa1D,IAAOC,IAAV,6IAQV0D,GAAoB3D,IAAO4D,GAAV,mDAIjBC,GAAsB7D,IAAO4D,GAAV,yEAwEVE,I,GAAAA,GAnEf,WACE,OACE,eAACJ,GAAD,WACE,cAAC,IAAD,yDACA,eAAC,KAAD,WACE,cAAC,IAAD,CAAQF,KAAK,iCAAiCnC,OAAO,SAAS0C,IAAI,sBAAlE,wDAGA,cAAC,IAAD,CAAQP,KAAK,4CAAb,wCAEF,cAAC,IAAD,iEACA,eAACG,GAAD,WACE,6BACE,cAAC,IAAD,wFAEF,6BACE,cAAC,IAAD,gCAEF,6BACE,cAAC,IAAD,8CAEF,6BACE,cAAC,IAAD,4DAEF,6BACE,cAAC,IAAD,sCAEF,6BACE,cAAC,IAAD,oCAEF,6BACE,cAAC,IAAD,qCAEF,6BACE,cAAC,IAAD,8HAKF,+BACE,cAAC,IAAD,2CACA,eAACE,GAAD,WACE,6BACE,cAAC,IAAD,8CAEF,6BACE,cAAC,IAAD,uEAEF,6BACE,cAAC,IAAD,gFAEF,6BACE,cAAC,IAAD,wCAEF,6BACE,cAAC,IAAD,mEAKR,cAAC,IAAD,CAAQL,KAAK,0CAA0CnC,OAAO,SAAS0C,IAAI,sBAA3E,+B,yDC9EAC,GAAgBhE,IAAOC,IAAV,mMAyBJgE,I,GAAAA,GAXf,SAAiBC,GACf,OACE,eAACF,GAAD,WACE,cAAC,KAAD,CAAQxC,QAAQ,OAAOT,MAAO,CAAEyB,OAAQ,UAAxC,wDAGA,cAAC,KAAD,CAAS2B,MAAM,a,yBCrBfC,GAAepE,YAAOqE,IAAPrE,CAAH,qFAEI,qBAAGsE,MAAkBC,OAAOC,SACvC,qBAAGF,MAAkBC,OAAOE,GAAGC,KAAKC,QAYhCC,I,YAAAA,GAJf,YAAoD,IAA7BzH,EAA4B,EAA5BA,SAAa0H,EAAe,mBACjD,OAAO,cAACT,GAAD,6BAAkBS,GAAlB,aAAyB1H,M,kBCKrB2H,GAAY,SAACC,GACxB,OAAOA,EAAEC,OAAO,GAAGC,cAAgBF,EAAEG,UAAU,IAG3CC,GAAa,CACjB,UACA,WACA,QACA,QACA,MACA,OACA,OACA,SACA,YACA,UACA,WACA,YAKWC,GAAY,SAACC,GACxB,IAAIC,EAAS,KAQb,OAPU,IAAND,EACFC,EAAS,KACM,IAAND,EACTC,EAAS,KACM,IAAND,IACTC,EAAS,MAEJD,EAAIC,GCJAC,GAAsB,eAAC7G,EAAD,uDAAS,EAAT,MAAgC,CAAEA,UC3CxD8G,GAAe,SAACT,GAC3B,OAAQA,GACN,IAAK,SACL,IAAK,SACL,IAAK,SACL,IAAK,OACH,OAAO,EAEX,OAAO,GCDHU,GAAiBzF,IAAOC,IAAV,gGAMdyF,GAAe1F,IAAOC,IAAV,kIAQZ0F,GAAc3F,IAAOC,IAAV,2GAMX2F,GAAa5F,IAAOC,IAAV,gDAoOD4F,I,MAAAA,GAzNf,YAA0E,IAAnDC,EAAkD,EAAlDA,OAAQlG,EAA0C,EAA1CA,MAAOmG,EAAmC,EAAnCA,cAAeC,EAAoB,EAApBA,UAC7C1D,EAAQC,cAEd,EAA0C7E,oBACvCuI,OAAOC,OAAOJ,EAAOK,WAAWC,QAAO,SAACC,EAAKC,GAAN,OAAgBD,EAAOC,EAAKC,SAAS,IAD/E,mBAAOC,EAAP,KAAsBC,EAAtB,KAGA,EAA8C/I,mBAAS,IAAvD,mBAAOgJ,EAAP,KAAwBC,EAAxB,KACA,EAAkCjJ,mBAChCoI,EAAOc,OAAOR,QAAO,SAACS,EAAKC,GACzB,IAAMC,EAAoBjB,EAAOK,UAAUW,IAAU,GACrD,OAAO,6BACFD,GADL,mBAEGC,EAAQC,EAAkBR,OAAS,EAAIQ,EAAoB,CAAC,QAE9D,KAPL,mBAAOZ,EAAP,KAAkBa,EAAlB,KAUA,EAAkCtJ,qBAC9BuI,OAAOC,OAAOJ,EAAOK,WAAWC,QAAO,SAACC,EAAKC,GAAN,OAAgBD,EAAOC,EAAKC,SAAS,IADhF,mBAAOU,EAAP,KAAkBC,EAAlB,KAGA,EAAsCxJ,mBAAS,IAA/C,mBAAOyJ,EAAP,KAAoBC,EAApB,KACA,EAA8C1J,mBAE5C,IAFF,mBAAO2J,EAAP,KAAwBC,EAAxB,KAuBA,OApBAnI,qBAAU,WACRmI,EACErB,OAAOsB,QAAQpB,GAAWC,QACxB,SAACS,EAAD,0BAAOC,EAAP,KAAcX,EAAd,yBAAC,gBACIU,GADL,mBAEGC,EAAQX,EAAUC,QAAO,SAACoB,EAAOC,GAChC,IAAMC,EAAgB9H,EACnB+H,QAAO,SAAAC,GAAC,OAAIA,EAAEC,gBAAkBJ,KAChCK,KAAI,SAAAF,GAAC,MAAK,CAAEG,KAAMH,EAAEG,KAAO,GAAIC,KAAMJ,EAAEI,SAC1C,OAAO,6BACFR,GADL,mBAEGC,EAAWC,EAAcnB,OAAS,EAAImB,EAAgB,CAAC,CAAEK,KAAM,GAAIC,KAAM,SAE3E,QAEL,OAGH,CAAClC,EAAQlG,EAAOuG,IAGjB,qCACE,cAAC,IAAD,CAAQ3E,QAAQ,iBAAiBC,QAAS,kBAAMa,EAAM,OAAtD,+BAGA,eAAC,KAAD,CACE2F,MAAM,mBACNxE,YAAY,6CACZyE,OAAQ1B,EACR/E,QAAS,kBAAMgF,GAAkBD,IAJnC,UAME,cAACf,GAAD,UACGK,EAAOc,OAAOkB,KAAI,SAAAhB,GAAK,OACtB,eAACpB,GAAD,WACE,eAACC,GAAD,WACE,cAAC,IAAD,UAAWb,GAAUgC,KACrB,cAAC,IAAD,CACExD,KAAK,SACL7B,QAAS,kBAAMuF,EAAa,6BAAKb,GAAN,mBAAkBW,EAAlB,uBAA+BX,EAAUW,IAAU,IAAnD,CAAwD,SAFrF,mBAOAX,EAAUW,IAAU,IAAIgB,KAAI,SAACK,EAAKC,GAAN,OAC5B,cAAC,IAAD,CACErH,MAAO,CAAEC,aAAc,UAEvBC,MAAK,oBAAemH,GACpB1J,MAAOyJ,EACPhH,SAAU,SAAAC,GAAC,OACT4F,EAAa,6BACRb,GADO,mBAETW,GAASX,EAAUW,IAAU,IAAIgB,KAAI,SAAC/C,EAAGsD,GACxC,OAAIA,IAAMD,EACDhH,EAAEC,OAAO3C,MAEXqG,UAVRoD,EAAMC,QAbEtB,QAgCvB,cAAC,KAAD,CACEwB,cAAe,CACbC,KAAM,OACN9G,QAAQ,WAAD,sCAAE,WAAML,GAAN,iFACP,IACE2E,EAAcI,GACdM,GAAiB,GACjBS,GAAa,GACbP,EAAmB,IACnB,SAASvI,EAAS,EAATA,MACTuI,EAAmB,6BAAD,OAA8BvI,IAP3C,2CAAF,mDAAC,IAWVoK,aAAc9B,OAGlB,eAAC,KAAD,CACEuB,MAAM,eACNxE,YAAY,yCACZyE,OAAQjB,EACRxF,QAAS,kBAAMyF,GAAcD,IAJ/B,UAMGhB,OAAOsB,QAAQF,GAAiBS,KAAI,mCAAEhB,EAAF,KAASX,EAAT,YACnC,cAACV,GAAD,UACGQ,OAAOsB,QAAQpB,GAAW2B,KAAI,mCAAEW,EAAF,KAAgB7I,EAAhB,YAC7B,eAAC8F,GAAD,WACE,eAACC,GAAD,WACE,cAAC,IAAD,UAAW8C,IACX,cAAC,IAAD,CACEnF,KAAK,SACL7B,QAAS,kBACP6F,EAAmB,6BACdD,GADa,mBAEfP,EAFe,aAAC,gBAGXO,EAAgBP,IAAuB,IAH7B,mBAIb2B,EAJa,wBAKPpB,EAAgBP,IAAuB,IAAI2B,IAAiB,IALrD,CAMZ,CAAEV,KAAM,GAAIC,KAAM,YAT5B,kBAkBDpI,EAAMkI,KAAI,SAACY,EAAMN,GAAP,OACT,eAACxC,GAAD,WACE,cAAC,IAAD,CACE3E,MAAK,gBAAWmH,EAAX,QACL1J,MAAOgK,EAAKX,KACZ5G,SAAU,SAAAC,GAAC,OACTkG,EAAmB,6BACdD,GADa,mBAEfP,EAFe,aAAC,gBAGXO,EAAgBP,IAAuB,IAH7B,mBAIb2B,IAAiBpB,EAAgBP,IAAuB,IAAI2B,IAAiB,IAAIX,KAChF,SAAC/C,EAAGsD,GACF,OAAIA,IAAMD,EACD,6BAAKrD,GAAZ,IAAegD,KAAM3G,EAAEC,OAAO3C,QAEzBqG,aAOnB,cAAC,IAAD,CACE9D,MAAK,gBAAWmH,EAAX,SACL1J,MAAOgK,EAAKV,KACZ7G,SAAU,SAAAC,GAAC,OACTkG,EAAmB,6BACdD,GADa,mBAEfP,EAFe,aAAC,gBAGXO,EAAgBP,IAAuB,IAH7B,mBAIb2B,IAAiBpB,EAAgBP,IAAuB,IAAI2B,IAAiB,IAAIX,KAChF,SAAC/C,EAAGsD,GACF,OAAIA,IAAMD,EACD,6BAAKrD,GAAZ,IAAeiD,KAAM5G,EAAEC,OAAO3C,QAEzBqG,eAlCJqD,QAtBFK,OAFF3B,MAuEvB,cAAC,KAAD,CACEwB,cAAe,CACbC,KAAM,OACN9G,QAAQ,WAAD,sCAAE,WAAML,GAAN,0GAEC4E,EACJC,OAAOsB,QAAQF,GACZsB,SAAQ,mCAAE7B,EAAF,KAAS8B,EAAT,YACP3C,OAAOsB,QAAQqB,GAAeD,SAAQ,YAA4B,IAAD,mBAAzBF,EAAyB,KAC/D,OAD+D,KAClDX,KAAI,SAAAY,GAAI,MAAK,CACxBX,KAAMc,SAASH,EAAKX,KAAM,IAC1BC,KAAMU,EAAKV,KACXlB,MAAOA,EACPe,cAAeY,YAIpBd,QAAO,SAAAe,GAAI,QAAMA,EAAKX,SAdtB,OAgBLb,GAAa,GACbE,EAAe,IAjBV,gDAkBIhJ,EAlBJ,KAkBIA,MACTgJ,EAAe,yBAAD,OAA0BhJ,IAnBnC,yDAAF,mDAAC,IAuBVoK,aAAcrB,W,mBCrPlB2B,GAAc9I,IAAOC,IAAV,2GAMX8I,GAAa/I,IAAOC,IAAV,yIA2CD+I,OA1Bf,YAA6D,IAAvCC,EAAsC,EAAtCA,UAAWP,EAA2B,EAA3BA,KAAMQ,EAAqB,EAArBA,WACrC,IAAKR,EACH,OAAO,KAGT,IAAMT,EAAK,UAAMS,EAAKV,KAAX,aATb,WAAyD,IAA9BmB,EAA6B,uDAAxB,CAAEC,KAAM,EAAGC,OAAQ,GACjD,MAAM,GAAN,OAAUF,EAAGC,KAAb,YAAqBD,EAAGE,QAQOC,CAAkBJ,GAAtC,KAEX,OAAID,EAEA,eAACH,GAAD,WACE,cAAC,IAAD,UAAKb,IACL,cAAC,IAAD,CAAMpH,GAAI6H,EAAKX,KAAO,GAAtB,8BAMJ,eAACgB,GAAD,WACE,cAAC,IAAD,CAAIhI,MAAO,CAAEwI,WAAY,GAAzB,SAA+BtB,IAC/B,cAAC,IAAD,CAAMpH,GAAI,KAAME,MAAO,CAAEyI,WAAY,OAAQ9G,UAAW,SAAxD,mCCuES+G,I,GAAAA,GAtFf,YAA+F,IAAD,IAAjEC,qBAAiE,MAAjD,UAAiD,EAAtC5J,EAAsC,EAAtCA,cAAe6J,EAAuB,EAAvBA,aAC/DrH,EAAQC,cACRqH,EAAiBC,mBAAQ,WAC7B,IAAMC,EAAsD,GACtDC,EAAS,CACbX,KAAM,EACNC,OAAQ,EACRW,SAAU,EACVC,UAAW,GAEPL,EAAQ3D,OAAOsB,QACnBzH,EAAcsG,QAA8B,SAACS,EAAKqD,GAChD,IAAMC,EAAOD,EAAY1K,QAAQ4K,MAAK,SAAAC,GAAC,OAAIA,EAAE3B,KAAKX,OAAS4B,MJjBb,CACpD5B,KAAM,EACNC,KAAM,GACNU,KAAM,CAAEX,KAAM,EAAGC,KAAM,IACvBsC,SAAU,EACVC,UAAW,GIaCC,EAAMN,EAAY1K,QAAQ4K,MAAK,SAAAC,GAAC,OAAIA,EAAE3B,KAAKX,OAAS4B,MJlBZ,CACpD5B,KAAM,EACNC,KAAM,GACNU,KAAM,CAAEX,KAAM,EAAGC,KAAM,IACvBsC,SAAU,EACVC,UAAW,GIeoB,OAArBL,EAAY5I,OACTwI,EAAYK,EAAKpC,QACpB+B,EAAYK,EAAKpC,MAAQ,IAEtB+B,EAAYK,EAAKpC,MAAMmC,EAAYO,YACtCX,EAAYK,EAAKpC,MAAMmC,EAAYO,UAAY,GAEjDX,EAAYK,EAAKpC,MAAMmC,EAAYO,aAGrC,IAAMb,EAAQ/C,EAAIsD,EAAKpC,OArCZ,iBAAiC,CAClDA,KADiB,uDAAQ,EAEzBC,KAFiB,uDAAkB,GAGnCsC,SAAU,EACVI,QAAS,EACTtB,KAAM,EACNC,OAAQ,EACRW,SAAU,EACVC,UAAW,EACXU,QAAS,GA4B6BC,CAAWT,EAAKpC,KAAMoC,EAAKnC,MAU3D,OATA4B,EAAMU,SAAWH,EAAKG,SACtBV,EAAMR,MAAQe,EAAKU,IAAM,EAAI,EAC7BjB,EAAMP,QAAUc,EAAKW,KAAO,EAAI,EAChClB,EAAMI,UAAYG,EAAKI,UACvBX,EAAMK,WAAaO,EAAID,UACvBR,EAAOX,MAAQe,EAAKU,IAAM,EAAI,EAC9Bd,EAAOV,QAAUc,EAAKW,KAAO,EAAI,EACjCf,EAAOC,UAAYG,EAAKI,UACxBR,EAAOE,WAAaO,EAAID,UACjB,6BAAK1D,GAAZ,mBAAkBsD,EAAKpC,KAAO6B,MAC7B,KACH9B,KAAI,mCAAEC,EAAF,KAAQ6B,EAAR,yBAAC,gBACFA,GADC,IAEJe,QAASf,EAAMI,UAAYJ,EAAMI,SAAWJ,EAAMK,WAClDS,QAASzE,OAAOC,OAAO4D,EAAY/B,IAAS,IAAIJ,QAAO,SAAAoD,GAAC,OAAIA,EAAI,KAAGxE,YAWrE,OATAqD,EAAMoB,MAAK,SAACC,EAAIC,GAAL,OAAYA,EAAGP,QAAUM,EAAGN,WACvCf,EAAMuB,KAAN,cACEpD,KAAM,EACNC,KAAM,SACNsC,SAAW,GACXI,QAAU,GACVC,QAASZ,EAAOC,UAAYD,EAAOC,SAAWD,EAAOE,YAClDF,IAEEH,IACN,CAAC9J,EAAe6J,IAEnB,OACE,cAAC,KAAD,CACE1K,KAAM2K,EACNwB,QAAS,CACP,cAAC,KAAD,CAAanK,MAAM,SACnB,cAAC,KAAD,CAAaA,MAAM,QACnB,cAAC,KAAD,CAAaA,MAAM,SACnB,cAAC,KAAD,CAAaA,MAAM,MACnB,cAAC,KAAD,CAAaA,MAAM,MACnB,cAAC,KAAD,CAAaA,MAAM,OACnB,cAAC,KAAD,CAAaA,MAAM,OACnB,cAAC,KAAD,CAAaA,MAAM,SAVvB,SAaG,gBAAUoK,EAAV,EAAGC,MAAH,OACC,eAAC,KAAD,WACE,cAAC,KAAD,UACE,cAAC,GAAD,CAAa7J,QAAS,kBAAMa,EAAMoH,EAAe,CAAE/I,MAAO,CAAEoH,KAAMsD,EAAGtD,KAAO,OAA5E,SAAsFsD,EAAGrD,SAE3F,cAAC,KAAD,UAAOqD,EAAGf,WACV,cAAC,KAAD,UAAOe,EAAGX,UACV,cAAC,KAAD,UAAOW,EAAGjC,OACV,cAAC,KAAD,UAAOiC,EAAGhC,SACV,cAAC,KAAD,UAAOgC,EAAGrB,WACV,cAAC,KAAD,UAAOqB,EAAGpB,YACV,cAAC,KAAD,UAAOoB,EAAGV,QAAQY,QAAQ,OAVlBF,EAAGtD,U,UCjGfyD,GAAsBxL,IAAOC,IAAV,8GA+BVwL,I,GAAAA,GAnBf,YAA4D,IAAnCC,EAAkC,EAAlCA,UAAWC,EAAuB,EAAvBA,OAAQjD,EAAe,EAAfA,KAC1C,OACE,eAAC8C,GAAD,WACE,cAAC,IAAD,sBACA,cAAC,IAAD,oBAAUG,EAAOvC,KAAjB,YAAyBuC,EAAOtC,OAAhC,aAA2CuC,GAAcD,EAAOE,WAChE,cAAC,IAAD,yBACA,cAAC,IAAD,UAAOnD,EAAKV,OACZ,cAAC,IAAD,wBACA,8BACG0D,EAAU5D,KAAI,gBAAGpJ,EAAH,EAAGA,MAAOoN,EAAV,EAAUA,SAAV,OACb,cAAC,IAAD,oBAAiDpN,GAAjD,OACGoN,EAAD,wBAAkCA,EAAlC,KAAY,KADFA,GAAW,oBAWjC,SAASF,GAAcC,GAErB,OADeA,EAAS,EAAI,IAAM,KAClBE,KAAKC,IAAIH,GCnC3B,IAAMI,GAAYjM,YAAOkM,KAAK,CAC5BC,kBAAmB,SAAAC,GAAI,MAAa,QAATA,GAA2B,SAATA,GAA4B,aAATA,IADhDpM,CAAH,4CAGX,gBAAGsE,EAAH,EAAGA,MAAH,SAAU+H,UACG,CACXC,UAAU,aAAD,OAAehI,EAAMC,OAAOE,GAAG8H,KAAKC,YAE/C,gBAAGlI,EAAH,EAAGA,MAAOuG,EAAV,EAAUA,IAAKC,EAAf,EAAeA,KAAf,OACAD,EACI,CACE4B,gBAAiBnI,EAAMC,OAAOE,GAAGiI,MAAMC,QAEzC7B,EACA,CACE2B,gBAAiBnI,EAAMC,OAAOE,GAAGmI,IAAID,QAEvC,MA8DOE,I,eAAAA,GAtDf,YAAoD,IAAzBC,EAAwB,EAAxBA,QAAS/E,EAAe,EAAfA,KAClC,EAA0CrK,mBAAkD,IAA5F,mBAAOqP,EAAP,KAAsBC,EAAtB,KAgBA,OAfA7N,qBAAU,WACR,IAAM8N,EAAgC,GACtCD,EACEF,EAAQhF,KAAI,SAAAoF,GACV,IAAIb,GAAW,EAOf,OANIY,EAAQC,EAAMzC,UAChB4B,GAAW,EAEXY,EAAQC,EAAMzC,WAAY,EAGrB,6BAAKyC,GAAZ,IAAmBb,mBAGtB,CAACS,IAEF,cAAC,KAAD,CACE7N,KAAM8N,EACN3B,QAAS,CACP,cAAC,KAAD,CAAanK,MAAM,SACnB,cAAC,KAAD,CAAaA,MAAM,SACnB,cAAC,KAAD,CAAaA,MAAM,YACnB,cAAC,KAAD,CAAaA,MAAM,eACnB,cAAC,KAAD,CAAaA,MAAM,aACnB,cAAC,KAAD,CAAaA,MAAM,UACnB,cAAC,KAAD,CAAaA,MAAM,cACnB,cAAC,KAAD,CAAaA,MAAM,eACnB,cAAC,KAAD,CAAaA,MAAM,WAXvB,SAcG,YAAoB,IPtBD8D,EOsBToI,EAAS,EAAhB7B,MACInB,EAAOgD,EAAG3N,QAAQ4K,MAAK,SAAAC,GAAC,OAAIA,EAAEtC,KAAO,KAAOA,MNlCJ,CACpDA,KAAM,EACNC,KAAM,GACNU,KAAM,CAAEX,KAAM,EAAGC,KAAM,IACvBsC,SAAU,EACVC,UAAW,GM8BCC,EAAM2C,EAAG3N,QAAQ4K,MAAK,SAAAC,GAAC,OAAIA,EAAEtC,KAAO,KAAOA,MNnCH,CACpDA,KAAM,EACNC,KAAM,GACNU,KAAM,CAAEX,KAAM,EAAGC,KAAM,IACvBsC,SAAU,EACVC,UAAW,GMgCL,OACE,eAAC0B,GAAD,CAA6BpB,IAAKV,EAAKU,IAAKC,KAAMX,EAAKW,KAAMuB,SAAUc,EAAGd,SAA1E,UACE,cAAC,KAAD,UAAOc,EAAG1C,WACV,cAAC,KAAD,qBP7Bc1F,EO6BMoI,EAAGC,KAAKC,WP7BQlI,GAAWJ,IO6B/C,YAA2CK,GAAU+H,EAAGC,KAAKE,cAC7D,cAAC,KAAD,oBAAUnD,EAAKG,SAAf,eAA8BE,EAAIF,YAClC,cAAC,KAAD,UAAOE,EAAIxC,OACX,cAAC,KAAD,UAAOwC,EAAI9B,KAAKV,OAChB,cAAC,KAAD,UAAOmF,EAAG7L,OACV,cAAC,KAAD,UAAO6I,EAAKI,YACZ,cAAC,KAAD,UAAOC,EAAID,YACX,cAAC,KAAD,UAAO4C,EAAGI,QAAU,UAAY,OATlBJ,EAAGK,c,+BC1DvBC,GAAqBzN,IAAOC,IAAV,2KAUlByN,GAAW1N,IAAOC,IAAV,2GAMR0N,GAAU3N,IAAOC,IAAV,iGAMP2N,GAAQ5N,IAAOiB,MAAV,wEAKLgL,GAAYjM,YAAOkM,KAAK,CAC5BC,kBAAmB,SAAAC,GAAI,MAAa,aAATA,IADXpM,CAAH,qCAGX,gBAAGsE,EAAH,EAAGA,MAAH,SAAU+H,UACG,CACXC,UAAU,aAAD,OAAehI,EAAMC,OAAOE,GAAG8H,KAAKC,YA8NpCqB,I,MAAAA,GAhMf,YAA4D,IAApCnC,EAAmC,EAAnCA,UAAWoB,EAAwB,EAAxBA,QAAS/E,EAAe,EAAfA,KACpC+F,EAAcjE,mBAAQ,WAC1B,IAAMkE,EAA4B,GAClC,OAAOrC,EACJ/D,QAAO,YAAgB,IAAbjJ,EAAY,EAAZA,MACT,OAAIqP,EAAIrP,KAGRqP,EAAIrP,IAAS,GACN,MAERoJ,KAAI,qBAAGpJ,MAAoB,QAC7B,CAACgN,IAEJ,EAAgDhO,mBAAS,IAAzD,mBAAOsQ,EAAP,KAAyBC,EAAzB,KACA,EAAgDvQ,oBAAS,GAAzD,mBAAOwQ,EAAP,KAAyBC,EAAzB,KACA,EAA8CzQ,oBAAS,GAAvD,mBAAO0Q,EAAP,KAAwBC,EAAxB,KAEA,EAA4B3Q,mBAAgD,IAA5E,mBAAO4Q,EAAP,KAAeC,EAAf,KAyGA,OAxGApP,qBAAU,WACR,IA4DIqP,EA5DEF,EAASxB,EAAQ1G,QACrB,SAACS,EAAKqG,GACJ,IAOIuB,EAPEtE,EAAO+C,EAAM1N,QAAQ4K,MAAK,SAAAC,GAAC,OAAIA,EAAEtC,KAAO,KAAOA,MPhEP,CACpDA,KAAM,EACNC,KAAM,GACNU,KAAM,CAAEX,KAAM,EAAGC,KAAM,IACvBsC,SAAU,EACVC,UAAW,GO4DCC,EAAM0C,EAAM1N,QAAQ4K,MAAK,SAAAC,GAAC,OAAIA,EAAEtC,KAAO,KAAOA,MPjEN,CACpDA,KAAM,EACNC,KAAM,GACNU,KAAM,CAAEX,KAAM,EAAGC,KAAM,IACvBsC,SAAU,EACVC,UAAW,GO8DL,GAAIyD,GAAoB7D,EAAKG,SAAW,KAAO0D,EAC7C,OAAOnH,EAKP4H,EADEtE,EAAKG,SAAWE,EAAIF,SAAW,GAC1B,OAEA,QAELH,EAAKU,IACPhE,EAAI6H,MAAMD,GAAMrF,OAEhBvC,EAAI6H,MAAMD,GAAMpF,SAElBxC,EAAI6H,MAAMD,GAAMzE,UAAYG,EAAKI,UACjC1D,EAAI6H,MAAMD,GAAMxE,WAAaO,EAAID,UACjC1D,EAAI6H,MAAMD,GAAME,MAAMC,QAAQ1B,EAAMzC,UAEhCN,EAAKU,IACPhE,EAAIgI,OAAO3B,EAAM5L,MAAM8H,OAEvBvC,EAAIgI,OAAO3B,EAAM5L,MAAM+H,SAEzBxC,EAAIgI,OAAO3B,EAAM5L,MAAM0I,UAAYG,EAAKI,UACxC1D,EAAIgI,OAAO3B,EAAM5L,MAAM2I,WAAaO,EAAID,UACxC1D,EAAIgI,OAAO3B,EAAM5L,MAAMqN,MAAMC,QAAQ1B,EAAMzC,UAE3C,IAAMqE,EAAUjI,EAAI2H,SAAShE,EAAIF,SAAWH,EAAKG,WA3DxB,CAAElB,KAAM,EAAGC,OAAQ,EAAGW,SAAU,EAAGC,UAAW,EAAG0E,MAAO,IAsEjF,OAVIxE,EAAKU,IACPiE,EAAQ1F,OAER0F,EAAQzF,SAEVyF,EAAQ9E,UAAYG,EAAKI,UACzBuE,EAAQ7E,WAAaO,EAAID,UACzBuE,EAAQH,MAAMC,QAAQ1B,EAAMzC,UAC5B5D,EAAI2H,SAAShE,EAAIF,SAAWH,EAAKG,UAAYwE,EAEtCjI,IAET,CACE2H,SAAU,GACVE,MAAO,CACLK,KA3EuB,CAAE3F,KAAM,EAAGC,OAAQ,EAAGW,SAAU,EAAGC,UAAW,EAAG0E,MAAO,IA4E/EK,MA5EuB,CAAE5F,KAAM,EAAGC,OAAQ,EAAGW,SAAU,EAAGC,UAAW,EAAG0E,MAAO,KA8EjFE,OAAQ,CACNI,GA/EuB,CAAE7F,KAAM,EAAGC,OAAQ,EAAGW,SAAU,EAAGC,UAAW,EAAG0E,MAAO,IAgF/EO,GAhFuB,CAAE9F,KAAM,EAAGC,OAAQ,EAAGW,SAAU,EAAGC,UAAW,EAAG0E,MAAO,IAiF/EQ,GAjFuB,CAAE/F,KAAM,EAAGC,OAAQ,EAAGW,SAAU,EAAGC,UAAW,EAAG0E,MAAO,OAuFhFT,IA0BHM,EAAWvI,OAAOsB,QAAQ+G,EAAOE,UAAU1G,KAAI,mCAAEE,EAAF,KAAQoH,EAAR,0BAAsBpH,QAASoH,OACrEpE,MAAK,SAACqE,EAAIC,GAAL,OAAYzG,SAASyG,EAAGtH,KAAM,IAAMa,SAASwG,EAAGrH,KAAM,OACpEwG,EAAWA,EAAS1G,KAAI,gBAAGE,EAAH,EAAGA,KAAS8G,EAAZ,wCAA6B9G,KAAMuH,GAAuBvH,IAAU8G,OA3B5FN,EAAWvI,OAAOsB,QAChBtB,OAAOsB,QAAQ+G,EAAOE,UAAUpI,QAC9B,SAACS,EAAD,GAA4B,IAAD,EACrB2I,EADqB,mBAApBV,EAAoB,KAAXM,EAAW,KAiBzB,OAPAvI,EAPE2I,EADEV,EAAU,IACN,KACGA,EAAU,IACb,OAEA,QAGC1F,MAAQgG,EAAMhG,KACvBvC,EAAI2I,GAAKnG,QAAU+F,EAAM/F,OACzBxC,EAAI2I,GAAKxF,UAAYoF,EAAMpF,SAC3BnD,EAAI2I,GAAKvF,WAAamF,EAAMnF,WAC5B,EAAApD,EAAI2I,GAAKb,OAAMxD,KAAf,qBAAuBiE,EAAMT,QAC7B9H,EAAI2I,GAAKb,MAAM3D,MAAK,SAACyE,EAAIC,GAAL,OAAYD,EAAKC,KAE9B7I,IAET,CAAE8I,GA7GqB,CAAEvG,KAAM,EAAGC,OAAQ,EAAGW,SAAU,EAAGC,UAAW,EAAG0E,MAAO,IA6G3DiB,KA7GG,CAAExG,KAAM,EAAGC,OAAQ,EAAGW,SAAU,EAAGC,UAAW,EAAG0E,MAAO,IA6GvCkB,KA7GjB,CAAEzG,KAAM,EAAGC,OAAQ,EAAGW,SAAU,EAAGC,UAAW,EAAG0E,MAAO,OA+GjF7G,KAAI,mCAAEE,EAAF,KAAQoH,EAAR,0BAAsBpH,KAAM8H,GAAoB9H,IAAUoH,MAOlEb,EAAU,GAAD,oBACJtI,OAAOsB,QAAQ+G,EAAOI,OACtB/G,QAAO,oDAAyBgH,MAAMpI,UACtCuB,KAAI,WAAgBO,GAAhB,IAwGQ/G,EAxGR,mBAAE0G,EAAF,KAAQoH,EAAR,yBAAC,cAAwBpH,MAwGjB1G,EAxGmC0G,EAyG/C1G,EAAK0D,OAAO,GAAGC,cAAgB3D,EAAK4D,UAAU,GAAK,UAzGMkK,GAArD,IAA4D/C,SAAgB,IAANhE,QAHtE,aAIJpC,OAAOsB,QAAQ+G,EAAOO,QACtBlH,QAAO,mCAAErG,EAAF,KAAQ8N,EAAR,WAA4B,OAAT9N,GAAiB8N,EAAMT,MAAMpI,UACvDuB,KAAI,WAAgBO,GAAhB,uBAAEL,EAAF,KAAQoH,EAAR,yBAAC,cAAwBpH,KAAM+H,GAAa/H,IAAUoH,GAAtD,IAA6D/C,SAAgB,IAANhE,QANvE,aAOJmG,EAAS7G,QAAO,SAAAyH,GAAK,OAAIA,EAAMT,MAAMpI,UAAQuB,KAAI,SAACsH,EAAO/G,GAAR,oBAAC,gBAAmB+G,GAApB,IAA2B/C,SAAgB,IAANhE,YAE1F,CAACyE,EAASkB,EAAkBE,EAAkBE,EAAiBrG,IAGhE,eAAC0F,GAAD,WACE,eAACC,GAAD,WACE,cAAC,IAAD,CAAU3M,MAAO,CAAEkC,KAAM,GAAzB,2BACA,cAAC,KAAD,CACEhC,MAAM,UACNC,YAAY,MACZ8G,KAAK,kBACLjH,MAAO,CAAEiP,MAAO,QAChBtR,MAAOsP,EACP7M,SAAU,SAAAgH,GAAG,OAAI8F,EAAoB9F,GAAO,KAN9C,SAQG2F,EAAYhG,KAAI,SAAAwC,GAAQ,OACvB,cAAC,KAAD,CAAuB5L,MAAO4L,EAA9B,SACGA,GADUA,QAKjB,eAACqD,GAAD,WACE,cAACC,GAAD,CAAOtQ,GAAG,wBAAwB2S,QAAQ,yBAA1C,2BAGA,cAAC,KAAD,CACE3S,GAAG,yBACH,kBAAgB,wBAChB4S,QAAShC,EACT/M,SAAU,SAAA+O,GAAO,OAAI/B,EAAoB+B,SAG7C,eAACvC,GAAD,WACE,cAACC,GAAD,CAAOtQ,GAAG,wBAAwB2S,QAAQ,yBAA1C,8BAGA,cAAC,KAAD,CACE3S,GAAG,yBACH,kBAAgB,wBAChB4S,QAAS9B,EACTjN,SAAU,SAAA+O,GAAO,OAAI7B,EAAmB6B,YAI9C,cAAC,KAAD,CACEjR,KAAMqP,EACNlD,QAAS,CACP,cAAC,KAAD,CAAanK,MAAM,UACnB,cAAC,KAAD,CAAaA,MAAM,SACnB,cAAC,KAAD,CAAaA,MAAM,WACnB,cAAC,KAAD,CAAaA,MAAM,cACnB,cAAC,KAAD,CAAaA,MAAM,kBACnB,cAAC,KAAD,CAAaA,MAAM,WARvB,SAWG,YAAuB,IAAbmO,EAAY,EAAnB9D,MACF,OACE,eAAC,GAAD,CAA4Be,SAAU+C,EAAM/C,SAA5C,UACE,cAAC,KAAD,UAAO+C,EAAMpH,OACb,cAAC,KAAD,UAAOoH,EAAMhG,OACb,cAAC,KAAD,UAAOgG,EAAM/F,SACb,cAAC,KAAD,UAAO+F,EAAMpF,WACb,cAAC,KAAD,UAAOoF,EAAMnF,YACb,cAAC,KAAD,UAAOmF,EAAMT,MAAMwB,KAAK,UANVf,EAAMpH,aAiBlC,SAAS8H,GAAoBhB,GAC3B,MAAgB,OAAZA,EACK,gBAEO,SAAZA,EACK,eAEF,cAGT,SAASS,GAAuBT,GAC9B,GAAgB,MAAZA,EACF,MAAO,cAGT,IAAIsB,EAAS,WACT1R,EAAQoQ,EAMZ,MAL0B,MAAtBA,EAAQ9J,OAAO,KACjBoL,EAAS,UACT1R,EAAQoQ,EAAQ5J,UAAU,IAGrBkL,EAAS1R,EAOlB,SAASqR,GAAazO,GACpB,MAAa,OAATA,EACK,gBAEI,OAATA,EACK,iBAEF,YCvRT,IAAM+O,GAAYrQ,IAAOC,IAAV,uHAOTqQ,GAAiBtQ,YAAOuQ,KAAPvQ,CAAH,qIAiHL6M,I,GAAAA,GAlGf,YAA0F,IAAD,EAA9D2D,EAA8D,EAA9DA,oBAAqBC,EAAyC,EAAzCA,kBAAmBC,EAAsB,EAAtBA,YAE3D3I,EAAI,UADOzH,cACcK,aAArB,aAAG,EAAyBoH,KAEtC,EAA4CrK,qBAA5C,mBAAOiT,EAAP,KAAuBC,EAAvB,KACAzR,qBAAU,WACRyR,EAAkB7I,KACjB,CAACA,IAEJ,MAA0CrK,mBAAwB,IAAlE,mBAAOoC,EAAP,KAAsB+Q,EAAtB,KACA,EAAoCnT,mBRzBgB,CACpDqK,KAAM,EACNC,KAAM,GACNU,KAAM,CAAEX,KAAM,EAAGC,KAAM,IACvBsC,SAAU,EACVC,UAAW,IQoBX,mBAAOuG,EAAP,KAAmBC,EAAnB,KACA,EAAwCrT,mBRAY,CAAE0L,KAAM,EAAGC,OAAQ,EAAGwC,OAAQ,IQAlF,mBAAOmF,EAAP,KAAqBC,EAArB,KACA,EAA8CvT,mBAA2B,IAAzE,mBAAOwT,EAAP,KAAwBC,EAAxB,KA8DA,OA7DAhS,qBAAU,WACR,GAAKwR,EAAL,CAKA,IAAM7Q,EAAgB0Q,EAAoBG,IAAmB,GAG7D,GAFAE,EAAiB/Q,GAEZA,EAAcyG,OAAnB,CAIA,IAAM6K,EAAQ,aAAOtR,GACrBsR,EAASpG,MAAK,SAACqE,EAAIC,GACjB,IAAMlC,EAAOiC,EAAGjC,KAAKiE,UAAY/B,EAAGlC,KAAKiE,UACzC,OAAa,IAATjE,EACKiC,EAAGiC,IAAMhC,EAAGgC,IAEdlE,KAGT,IAAM1B,EAA8B,GAEpCuF,EACEG,EAAShL,QAAO,SAACS,EAAKqG,EAAO7E,GAC3B,IAAMkJ,EAASrE,EAAM1N,QAAQ4K,MAAK,SAAAC,GAAC,OAAIA,EAAEtC,KAAO,KAAO4I,MRtDT,CACpD5I,KAAM,EACNC,KAAM,GACNU,KAAM,CAAEX,KAAM,EAAGC,KAAM,IACvBsC,SAAU,EACVC,UAAW,GQ6EL,OA1BU,IAANlC,GACF0I,EAAcQ,EAAO7I,MACrBgD,EAAUP,KAAK5F,GAAoBgM,EAAOjH,YAEtCoB,EAAU,GAAGhN,QAAU6S,EAAOjH,WAChCoB,EAAU,GAAGI,SAAWsF,EAAS/I,EAAI,GAAGoC,SACxCiB,EAAUkD,QAAQrJ,GAAoBgM,EAAOjH,YAI7CiH,EAAO1G,KACThE,EAAIuC,OACAvC,EAAIgF,OAAS,EACfhF,EAAIgF,SAEJhF,EAAIgF,OAAS,IAGfhF,EAAIwC,SACAxC,EAAIgF,OAAS,EACfhF,EAAIgF,SAEJhF,EAAIgF,QAAU,GAIXhF,IRxDuC,CAAEuC,KAAM,EAAGC,OAAQ,EAAGwC,OAAQ,KQ4DhFsF,EAAmBzF,SAxDjBmF,EAAiB,MAyDlB,CAACF,EAAgBH,IAGlB,eAACH,GAAD,WACE,cAACC,GAAD,CACErP,MAAM,cACNwC,YAAY,gCACZvC,YAAY,qBACZxC,MAAOiS,EACPxP,SAAUyP,EALZ,SAOG3K,OAAOsB,QAAQkJ,GAAmB3I,KAAI,mCAAE0J,EAAF,KAAYhS,EAAZ,YACrC,cAAC,KAAD,CAA8ByB,MAAOyP,EAAYc,GAAUxJ,KAA3D,SACGxI,EAAQsI,KAAI,SAAA2J,GAAM,OACjB,cAAC,KAAD,CAAkC/S,MAAO+S,EAAO1J,KAAO,GAAI2J,YAAaD,EAAOzJ,MAA1DyJ,EAAO1J,UAFZyJ,QAOvBb,GAAkB,cAAC,GAAD,CAAejF,UAAWwF,EAAiBvF,OAAQqF,EAActI,KAAMoI,IACzFH,GAAkB,cAAC,GAAD,CAAe7D,QAAShN,EAAeiI,KAAM4I,IAC/DA,GAAkB,cAAC,GAAD,CAAcjF,UAAWwF,EAAiBpE,QAAShN,EAAeiI,KAAM4I,QCnI3F1E,GAAYjM,YAAOkM,KAAK,CAC5BC,kBAAmB,SAAAC,GAAI,MAAa,QAATA,GAA2B,SAATA,IAD7BpM,CAAH,qCAGX,gBAAGsE,EAAH,EAAGA,MAAOuG,EAAV,EAAUA,IAAKC,EAAf,EAAeA,KAAf,OACAD,EACI,CACE4B,gBAAiBnI,EAAMC,OAAOE,GAAGiI,MAAMC,QAEzC7B,EACA,CACE2B,gBAAiBnI,EAAMC,OAAOE,GAAGmI,IAAID,QAEvC,MAuCOgF,I,GAAAA,GA/Bf,YAA4D,IAAvC7R,EAAsC,EAAtCA,cAAe6J,EAAuB,EAAvBA,aAClC,OACE,cAAC,KAAD,CACE1K,KAAMa,EACNsL,QAAS,CACP,cAAC,KAAD,CAAanK,MAAM,WACnB,cAAC,KAAD,CAAaA,MAAM,QACnB,cAAC,KAAD,CAAaA,MAAM,UACnB,cAAC,KAAD,CAAaA,MAAM,aACnB,cAAC,KAAD,CAAaA,MAAM,QACnB,cAAC,KAAD,CAAaA,MAAM,WARvB,SAWG,YAAoB,IAAVkM,EAAS,EAAhB7B,MACInB,EAAOgD,EAAG3N,QAAQ4K,MAAK,SAAAC,GAAC,OAAIA,EAAE3B,KAAKX,OAAS4B,MTXJ,CACpD5B,KAAM,EACNC,KAAM,GACNU,KAAM,CAAEX,KAAM,EAAGC,KAAM,IACvBsC,SAAU,EACVC,UAAW,GSOCC,EAAM2C,EAAG3N,QAAQ4K,MAAK,SAAAC,GAAC,OAAIA,EAAE3B,KAAKX,OAAS4B,MTZH,CACpD5B,KAAM,EACNC,KAAM,GACNU,KAAM,CAAEX,KAAM,EAAGC,KAAM,IACvBsC,SAAU,EACVC,UAAW,GSQL,OACE,eAAC,GAAD,CAAwBM,IAAKV,EAAKU,IAAKC,KAAMX,EAAKW,KAAlD,UACE,cAAC,KAAD,UAAOX,EAAKnC,OACZ,cAAC,KAAD,UAAOmC,EAAKG,WACZ,cAAC,KAAD,UAAOH,EAAKI,YACZ,cAAC,KAAD,UAAOC,EAAIxC,OACX,cAAC,KAAD,UAAOwC,EAAIF,WACX,cAAC,KAAD,UAAOE,EAAID,cANG4C,EAAGyE,SC9BvBC,GAAU7R,IAAOC,IAAV,iKA0EE6R,I,GAAAA,GAzDf,YAAgH,IAA5FpI,EAA2F,EAA3FA,cAAeqI,EAA4E,EAA5EA,wBAAyBrJ,EAAmD,EAAnDA,KAAMsJ,EAA6C,EAA7CA,gBAAiBC,EAA4B,EAA5BA,kBACjF,EAAkDvU,mBAAwC,IAA1F,mBAAOwU,EAAP,KAA0BC,EAA1B,KAgBA,OAfAhT,qBAAU,WACR,IAAM+S,GAAqBH,GAA4B,OAAJrJ,QAAI,IAAJA,OAAA,EAAAA,EAAMX,OAAQ,IAAM,IAAI3B,QACzE,SAACS,EAAKqD,GAAN,oBAAC,gBACIrD,GADL,mBAEGqD,EAAYsD,SAFf,uBAE+B3G,EAAIqD,EAAYsD,WAAa,IAF5D,CAEiEtD,QAEjE,IAEFjE,OAAOsB,QAAQ2K,GAAmBE,SAAQ,YAA+B,IAAD,mBAA5BC,EAA4B,KAAnBvS,EAAmB,KACtEA,EAAckL,MAAK,SAACqE,EAAIC,GAAL,OAAYD,EAAGiC,IAAMhC,EAAGgC,OAC3CY,EAAkBG,GAAWvS,KAE/BqS,EAAqBD,KACpB,QAACxJ,QAAD,IAACA,OAAD,EAACA,EAAMX,KAAMgK,IAEXrJ,EAKH,qCACE,cAAC,IAAD,CAAI3H,MAAO,CAAEQ,UAAW,QAAxB,4BACA,cAAC,GAAD,CACEmI,cAAeA,EACf5J,cAAeiS,EAAwBrJ,EAAKX,OAAS,GACrD4B,aAAcjB,EAAKX,OAErB,cAAC,IAAD,CAAIhH,MAAO,CAAEQ,UAAW,QAAxB,0BACA,cAACsQ,GAAD,UACGnJ,EAAK4J,SAASxK,KAAI,YAAiC,IAA9ByK,EAA6B,EAA7BA,QAAS/E,EAAoB,EAApBA,SAAUhD,EAAU,EAAVA,IACjCgI,EAiChB,SAAwBC,EAA0BC,GAChD,IAAMvI,EAAOuI,EAAU9S,MAAMwK,MAAK,SAAAxC,GAAC,OAAIA,EAAEG,OAAS0K,MArFT,CAAE1K,KAAM,EAAGC,KAAM,GAAIuC,UAAW,EAAGoI,YAAa,GAsFnFnI,EAAMkI,EAAU9S,MAAMwK,MAAK,SAAAxC,GAAC,OAAIA,EAAEG,OAAS0K,MAtFR,CAAE1K,KAAM,EAAGC,KAAM,GAAIuC,UAAW,EAAGoI,YAAa,GAuFzF,MAAO,CAAExI,OAAMK,OApCaoI,CAAelK,EAAKX,KAAMiK,EAAgBxE,GAAY,KAAO,CAAE5N,MAAO,KAC1F,OACE,eAAC,KAAD,CAEEqI,MAAK,UAAKsK,EAAL,iBAAqB/H,EAAIxC,KAAzB,aAAkCkB,GAAW+I,EAAkBzH,EAAIzC,OAAnE,KACLtE,YAAc+J,EAAgBqF,GAAiBL,GAAtB,GAH3B,WAKIhF,GACA,cAAC,GAAD,CACE9D,cAAeA,EACf5J,cAAeiS,EAAwBvH,EAAIzC,OAAS,GACpD4B,aAAca,EAAIzC,OAGrByF,GACC,cAAC,GAAD,CAAW1N,cAAeoS,EAAkB1E,GAAY,KAAO,GAAI7D,aAAcjB,EAAKX,SAZnFwK,WAjBR,MAyCX,SAASM,GAAT,GAAuD,IAA3B1I,EAA0B,EAA1BA,KAAMK,EAAoB,EAApBA,IAChC,MAAM,GAAN,OAAUL,EAAKU,IAAM,aAAU,oBAA/B,aAA6CV,EAAKwI,YAAlD,YAAiEnI,EAAImI,YAArE,aAAqFxI,EAAKI,UAA1F,YACEC,EAAID,WAUR,SAASrB,KAAyC,IAA9BC,EAA6B,uDAAxB,CAAEC,KAAM,EAAGC,OAAQ,GAC1C,MAAM,GAAN,OAAUF,EAAGC,KAAb,YAAqBD,EAAGE,QC7F1B,IAAMgH,GAAYrQ,IAAOC,IAAV,uHA4CA6S,I,SAAAA,GA9Bf,YAKW,IAJTf,EAIQ,EAJRA,wBACArB,EAGQ,EAHRA,YACAsB,EAEQ,EAFRA,gBACAC,EACQ,EADRA,kBAEQlK,EAASgL,cAAThL,KACR,EAAwBrK,qBAAxB,mBAAOgL,EAAP,KAAasK,EAAb,KACA,EAAoCtV,qBAApC,mBAAOwL,EAAP,KAAmB+J,EAAnB,KAQA,OAPA9T,qBAAU,WACH4I,IAGLiL,EAAQtC,EAAY3I,IACpBkL,EAAchB,EAAkBlK,OAC/B,CAAC2I,EAAauB,EAAmBlK,IAElC,eAAC,GAAD,WACE,cAAC,GAAD,CAAYW,KAAMA,EAAMQ,WAAYA,IACpC,cAAC,GAAD,CACEQ,cAAc,aACdqI,wBAAyBA,EACzBrJ,KAAMA,EACNsJ,gBAAiBA,EACjBC,kBAAmBA,QClCrBiB,GAAUlT,IAAOC,IAAV,gGAMPkT,GAAYnT,IAAOC,IAAV,8FAMTmT,GAAWpT,IAAOC,IAAV,mGA+HC6S,OAhHf,YAMW,IALTf,EAKQ,EALRA,wBACAjM,EAIQ,EAJRA,OACA4K,EAGQ,EAHRA,YACAsB,EAEQ,EAFRA,gBACAC,EACQ,EADRA,kBAEM3P,EAAQC,cAEd,EAAsD7E,mBAAmC,IAAzF,mBAAO2V,EAAP,KAA4BC,EAA5B,KACAnU,qBAAU,WACRmU,EACErN,OAAOC,OAAOwK,GAAatK,QACzB,SAACS,EAAK6B,GAAN,oBAAC,gBACI7B,GADL,mBAEG6B,EAAKb,cAFR,uBAE6BhB,EAAI6B,EAAKb,gBAAkB,IAFxD,CAE6Da,EAAKX,WAElE,OAGH,CAAC2I,IAEJ,MAAkChT,mBAAuC,IAAzE,mBAAOyI,EAAP,KAAkBa,EAAlB,KACA7H,qBAAU,WACR6H,EACEf,OAAOsB,QAAQ8L,GAAqBjN,QAAO,SAACS,EAAD,GAAiC,IAAD,mBAAzB4B,EAAyB,KACnE8K,EADmE,KAC/CzL,KACxB,SAAAC,GAAI,OAAIkK,EAAkBlK,IAAS,CAAEA,KAAM,EAAGC,KAAM,GAAIwL,KAAM,EAAGpK,KAAM,EAAGC,OAAQ,EAAGoK,IAAK,MAS5F,OAPAF,EAAYvI,MAAK,SAAC0I,EAAKC,GAAN,OACfD,EAAItK,OAASuK,EAAIvK,KACbsK,EAAIrK,SAAWsK,EAAItK,OACjBsK,EAAIF,IAAMC,EAAID,IACdC,EAAIrK,OAASsK,EAAItK,OACnBsK,EAAIvK,KAAOsK,EAAItK,QAEd,6BACFvC,GADL,mBAEG4B,EAAe8K,EAAYzL,KAAI,SAACqB,EAAId,GAAL,oBAAC,gBAAgBc,GAAjB,IAAqBqK,KAAMnL,EAAI,WAEhE,OAEJ,CAACgL,EAAqBpB,IAEzB,MAAkCvU,mBAAS,GAA3C,mBAAOkW,EAAP,KAAkBC,EAAlB,KAEMC,EAAWC,wBAAc,CAAEC,MAAO,uBAExC,OACE,qCACE,cAACd,GAAD,UACGpN,EAAOc,OAAOkB,KAAI,SAAAhB,GAAK,OACtB,eAACqM,GAAD,WACE,cAAC,IAAD,CAAIpS,MAAO,CAAEC,aAAc,QAA3B,SAAsC8D,GAAUgC,KAC/ChB,EAAOK,UAAUW,GAAQgB,KAAI,SAAAW,GAAY,OACxC,cAAC2K,GAAD,UACGjN,EAAUsC,IACT,qCACE,cAAC,IAAD,UAAKA,IACL,cAAC,KAAD,CACExJ,KAAMkH,EAAUsC,GAChB2C,QAAS,CACP,cAAC,KAAD,CAAanK,MAAM,UACnB,cAAC,KAAD,CAAaA,MAAM,cACnB,cAAC,KAAD,CAAaA,MAAM,QACnB,cAAC,KAAD,CAAaA,MAAM,QACnB,cAAC,KAAD,CAAaA,MAAM,UAPvB,SAUG,gBAAUgT,EAAV,EAAG3I,MAAH,OACC,eAAC,KAAD,WACE,cAAC,KAAD,UAAO2I,EAAGT,OACV,cAAC,KAAD,UACE,cAAC,GAAD,CAAa/R,QAAS,kBAAOqS,EAAWxR,EAAM2R,EAAGlM,KAAO,IAAM8L,EAAaI,EAAGlM,OAA9E,SACGkM,EAAGjM,SAGR,cAAC,KAAD,UAAOiM,EAAG7K,OACV,cAAC,KAAD,UAAO6K,EAAG5K,SACV,cAAC,KAAD,UAAO4K,EAAGR,IAAIlI,QAAQ,OATd0I,EAAGlM,aAfRU,QAHH3B,QAsCpB,cAAC,KAAD,CACE1D,OAAQwQ,EACRM,QAAS,SAAA9Q,GACFA,GACHyQ,EAAa,IAJnB,SAQE,qCACE,cAAC,GAAD,CAAY5K,WAAS,EAACP,KAAMgI,EAAYkD,GAAY1K,WAAY+I,EAAkB2B,KAClF,cAAC,GAAD,CACE7B,wBAAyBA,EACzBrJ,KAAMgI,EAAYkD,GAClB5B,gBAAiBA,EACjBC,kBAAmBA,aC2FhBkC,OAtMf,YAAkH,IAA5FxU,EAA2F,EAA3FA,QAASyU,EAAkF,EAAlFA,kBAAmBC,EAA+D,EAA/DA,UAAWC,EAAoD,EAApDA,gBAAiBvO,EAAmC,EAAnCA,cAAeC,EAAoB,EAApBA,UAC3F,EAA6B+M,cAArBwB,EAAR,EAAQA,KAAMC,EAAd,EAAcA,KAAMlT,EAApB,EAAoBA,KAEdwE,EAAS+D,mBAAQ,WACrB,OAAOlK,EAAQyK,MAAK,SAAAqK,GAAC,OAAIA,EAAEF,KAAO,KAAOA,GAAQE,EAAED,OAASA,GAAQC,EAAEnT,OAASA,OAC9E,CAAC3B,EAAS4U,EAAMC,EAAMlT,IAEzB,EAA0B5D,mBAAiB,IAA3C,mBAAOkC,EAAP,KAAc8U,EAAd,KACA,EAAsChX,mBAA+B,IAArE,mBAAOgT,EAAP,KAAoBiE,EAApB,KACAxV,qBAAU,WACH2G,GAGLuO,EAAUvO,EAAOiC,MAAM6M,MAAK,SAAAhV,GAC1B8U,EAAS9U,GACT+U,EAAe/U,EAAMwG,QAAO,SAACS,EAAK6B,GAAN,oBAAC,gBAAoB7B,GAArB,mBAA2B6B,EAAKX,KAAOW,MAAS,UAE7E,CAAC2L,EAAWvO,IAEf,MAA8CpI,mBAAoC,IAAlF,mBAAOsU,EAAP,KAAwB6C,EAAxB,KACA,EAAkDnX,mBAAqC,IAAvF,mBAAOuU,EAAP,KAA0B6C,EAA1B,KACA3V,qBAAU,WACH2G,GAGLwO,EAAgBxO,EAAOiC,MAAM6M,MAAK,SAAA/U,GAChCgV,EACEhV,EAAYuG,QAAkC,SAACS,EAAK6L,GAAN,oBAAC,gBAAyB7L,GAA1B,mBAAgC6L,EAAUd,IAAMc,MAAc,KAG9GoC,EACE7O,OAAOsB,QACL1H,EAAYuG,QAAmC,SAAC2O,EAAOrC,GACrD,IAAIsC,EAAa,EACXC,EAAavC,EAAU9S,MAAMwG,QAAmC,SAACoB,EAAOkB,GAC5E,IAAMwM,EAAwBH,EAAMrM,EAAKX,OA5CxB,iBAAsC,CACnEA,KAD6B,uDAAQ,EAErCC,KAF6B,uDAAkB,GAG/CoB,KAAM,EACNC,OAAQ,EACRW,SAAU,EACVgL,WAAY,GAsCkDG,CAAgBzM,EAAKX,KAAMW,EAAKV,MAKlF,OAJAkN,EAAU9L,MAAQV,EAAKmC,IAAM,EAAI,EACjCqK,EAAU7L,QAAUX,EAAKoC,KAAO,EAAI,EACpCoK,EAAUlL,UAAYtB,EAAK6B,UAC3ByK,GAActM,EAAK6B,UACZ,6BAAK/C,GAAZ,mBAAoBkB,EAAKX,KAAOmN,MAC/B,IAIH,OAHAjP,OAAOC,OAAO+O,GAAY7C,SAAQ,SAAA8C,GAChCA,EAAUF,YAAcA,KAEnB,6BAAKD,GAAUE,KACrB,KACH7O,QACA,SAACS,EAAD,0BAAOkB,EAAP,KAAamN,EAAb,yBAAC,gBACIrO,GADL,mBAEGkB,EAAO,CACNA,KAAMmN,EAAUnN,KAChBC,KAAMkN,EAAUlN,KAChBwL,KAAM,EACNpK,KAAM8L,EAAU9L,KAChBC,OAAQ6L,EAAU7L,OAClBoK,IAAKyB,EAAUlL,SAAWkL,EAAUF,gBAGxC,UAIL,CAACV,EAAiBxO,IAErB,MAA0CpI,mBAAwB,IAAlE,mBAAOoC,EAAP,KAAsB+Q,EAAtB,KACA,EAAsDnT,mBAAwC,IAA9F,mBAAO8S,EAAP,KAA4B4E,EAA5B,KACA,EAA8D1X,mBAAwC,IAAtG,mBAAOqU,EAAP,KAAgCsD,EAAhC,KACA,EAAkD3X,mBAAuC,IAAzF,mBAAO+S,EAAP,KAA0B6E,EAA1B,KA2EA,OA1EAnW,qBAAU,WACH2G,GAGLsO,EAAkBtO,EAAOiC,MAAM6M,MAAK,SAAA9U,GAClC+Q,EAAiB/Q,GAEjB,IAAM0Q,EAAsB1Q,EAAcsG,QACxC,SAAC2O,EAAO7K,GAAR,oBAAC,gBACI6K,GACA7K,EAAY1K,QAAQ4G,QACrB,SAACoB,EAAOiK,GAAR,oBAAC,gBACIjK,GADL,mBAEGiK,EAAO1J,KAFV,uBAEsBgN,EAAMtD,EAAO1J,OAAS,IAF5C,CAEiDmC,QAEjD,OAGJ,IAEFjE,OAAOC,OAAOsK,GAAqB4B,SAAQ,SAAAtS,GACzCA,EAAckL,MAAK,SAACuK,EAAKC,GACvB,IAAMpI,EAAOoI,EAAIpI,KAAKiE,UAAYkE,EAAInI,KAAKiE,UAC3C,OAAIjE,GAGGoI,EAAIlE,IAAMiE,EAAIjE,UAGzB8D,EAAuB5E,GAEvB6E,EACEvV,EAAcsG,QACZ,SAAC2O,EAAO7K,GAAR,oBAAC,gBACI6K,GACA7K,EAAY1K,QAAQ4G,QACrB,SAACoB,EAAOiK,GAAR,oBAAC,gBACIjK,GADL,mBAEGiK,EAAO/I,KAAKX,KAFf,uBAE2BgN,EAAMtD,EAAO/I,KAAKX,OAAS,IAFtD,CAE2DmC,QAE3D,OAGJ,KAIJoL,EACErP,OAAOsB,QACLzH,EAAcsG,QACZ,SAAC2O,EAAO7K,GAAR,oBAAC,gBACI6K,GACA7K,EAAY1K,QAAQ4G,QACrB,SAACoB,EAAOiK,GAAR,oBAAC,gBACIjK,GADL,mBAEGiK,EAAO/I,KAAKX,KAFf,aAAC,gBAGOgN,EAAMtD,EAAO/I,KAAKX,OAAS,IAHnC,mBAIK0J,EAAO1J,KAAO0J,QAGnB,OAGJ,KAEFrL,QAAO,SAACS,EAAD,GAAkC,IAAD,mBAA1B2K,EAA0B,KAAhBiE,EAAgB,KAClCjW,EAAUyG,OAAOC,OAAOuP,GAE9B,OADAjW,EAAQwL,MAAK,SAACC,EAAIC,GAAL,OAAYD,EAAGlD,KAAOmD,EAAGnD,QAC/B,6BAAKlB,GAAZ,mBAAkB2K,EAAWhS,MAC5B,UAGN,CAAC4U,EAAmBtO,IAElBA,EAIH,eAAC,IAAD,WACE,cAAC,IAAD,CACE4P,KAAK,IACLC,QACE,cAAC,GAAD,CACE7P,OAAQA,EACRhG,cAAeA,EACfiS,wBAAyBA,EACzBrB,YAAaA,EACbsB,gBAAiBA,EACjBC,kBAAmBA,MAIzB,cAAC,IAAD,CACEyD,KAAK,QACLC,QACE,cAAC,GAAD,CACE7P,OAAQA,EACRlG,MAAOA,EACPmG,cAAe,SAAAI,GAAS,OAAIJ,EAAcD,EAAOiC,KAAM5B,IACvDH,UAAW,SAAApG,GAAK,OAAIoG,EAAUF,EAAOiC,KAAMnI,QAIjD,cAAC,IAAD,CACE8V,KAAK,UACLC,QACE,cAAC,GAAD,CACEnF,oBAAqBA,EACrBC,kBAAmBA,EACnBC,YAAaA,EACbsB,gBAAiBA,MAIvB,cAAC,IAAD,CACE0D,KAAK,QACLC,QACE,cAAC,GAAD,CACE5D,wBAAyBA,EACzBrB,YAAaA,EACbsB,gBAAiBA,EACjBC,kBAAmBA,SA9CpB,cAAC,GAAD,K,SClBI2D,I,SAAAA,GAtJf,YAA2C,IAAtBC,EAAqB,EAArBA,WACnB,EAAkCnY,mBAAS,IAA3C,mBAAOoY,EAAP,KAAkBC,EAAlB,KACA,EAAkCrY,mBAAS,IAA3C,mBAAOsY,EAAP,KAAkBC,EAAlB,KACA,EAAkCvY,mBAAS,IAA3C,mBAAOwY,EAAP,KAAkBC,EAAlB,KACA,EAAkCzY,mBAAS,IAA3C,mBAAO0Y,EAAP,KAAkBC,EAAlB,KACA,EAAwB3Y,mBAAS,IAAjC,mBAAOsK,EAAP,KAAasO,EAAb,KACA,EAA4B5Y,oBAAS,GAArC,mBAAO6Y,EAAP,KAAeC,EAAf,KACA,EAA8B9Y,oBAAS,GAAvC,mBAAO+Y,EAAP,KAAgBC,EAAhB,KACA,EAAkChZ,oBAAS,GAA3C,mBAAOiZ,EAAP,KAAkBC,EAAlB,KACA,EAAgClZ,oBAAS,GAAzC,mBAAOmZ,EAAP,KAAiBC,EAAjB,KACA,EAA4BpZ,oBAAS,GAArC,mBAAOqZ,EAAP,KAAeC,EAAf,KACA,EAAgCtZ,oBAAS,GAAzC,mBAAOuZ,EAAP,KAAiBC,EAAjB,KACA,EAA4BxZ,oBAAS,GAArC,oBAAOyZ,GAAP,MAAeC,GAAf,MACA,GAA0C1Z,mBAAS,IAAnD,qBAAO2Z,GAAP,MAAsBC,GAAtB,MACA,GAA4B5Z,mBAAS,IAArC,qBAAO6Z,GAAP,MAAeC,GAAf,MACA,OACE,qCACE,cAAC,KAAD,CAAQvW,MAAM,OAAOC,YAAY,mBAAmBxC,MAAOoX,EAAW3U,SAAU4U,EAAhF,SACE,cAAC,KAAD,CAAQrX,MAAM,OAAd,oBAEF,eAAC,KAAD,CAAQuC,MAAM,OAAOC,YAAY,mBAAmBxC,MAAOsX,EAAW7U,SAAU8U,EAAhF,UACE,cAAC,KAAD,CAAQvX,MAAM,SAAd,oBACA,cAAC,KAAD,CAAQA,MAAM,SAAd,oBACA,cAAC,KAAD,CAAQA,MAAM,SAAd,oBACA,cAAC,KAAD,CAAQA,MAAM,OAAd,qBAEF,cAAC,KAAD,CAAQuC,MAAM,cAAcC,YAAY,qBAAqBxC,MAAOwX,EAAW/U,SAAUgV,EAAzF,SACE,cAAC,KAAD,CAAQzX,MAAM,aAAd,2BAEF,cAAC,IAAD,CACEuC,MAAM,gBACNwC,YAAY,qCACZtC,SAAU,SAAAC,GAAC,OAAIiV,EAAajV,EAAEC,OAAO3C,QACrCA,MAAO0X,IAET,cAAC,IAAD,CACEnV,MAAM,OACNwC,YAAY,wBACZtC,SAAU,SAAAC,GAAC,OAAIkV,EAAQlV,EAAEC,OAAO3C,QAChCA,MAAOsJ,IAET,gCACE,cAAC,IAAD,oDACA,gCACE,cAAC,KAAD,CAAU/G,MAAM,SAASiP,QAASqG,EAAQpV,SAAU,SAAAC,GAAC,OAAIoV,EAAUpV,EAAEC,OAAO6O,YAC5E,cAAC,KAAD,CAAUjP,MAAM,UAAUiP,QAASuG,EAAStV,SAAU,SAAAC,GAAC,OAAIsV,EAAWtV,EAAEC,OAAO6O,YAC/E,cAAC,KAAD,CAAUjP,MAAM,YAAYiP,QAASyG,EAAWxV,SAAU,SAAAC,GAAC,OAAIwV,EAAaxV,EAAEC,OAAO6O,YACrF,cAAC,KAAD,CAAUjP,MAAM,WAAWiP,QAAS2G,EAAU1V,SAAU,SAAAC,GAAC,OAAI0V,EAAY1V,EAAEC,OAAO6O,YAClF,cAAC,KAAD,CAAUjP,MAAM,SAASiP,QAAS6G,EAAQ5V,SAAU,SAAAC,GAAC,OAAI4V,EAAU5V,EAAEC,OAAO6O,YAC5E,cAAC,KAAD,CAAUjP,MAAM,WAAWiP,QAAS+G,EAAU9V,SAAU,SAAAC,GAAC,OAAI8V,EAAY9V,EAAEC,OAAO6O,YAClF,cAAC,KAAD,CAAUjP,MAAM,SAASiP,QAASiH,GAAQhW,SAAU,SAAAC,GAAC,OAAIgW,GAAUhW,EAAEC,OAAO6O,kBAGhF,cAAC,IAAD,CACEjP,MAAM,gBACNwC,YAAY,kDACZtC,SAAU,SAAAC,GAAC,OAAIkW,GAAiBlW,EAAEC,OAAO3C,QACzCA,MAAO2Y,KAET,cAAC,KAAD,CACE/O,cAAe,CACbC,KAAM,OACN9G,QAAQ,WAAD,sCAAE,WAAML,GAAN,6FACPA,EAAEqW,kBAEElD,EAAO,EAHJ,SAKLA,EAAO1L,SAASiN,EAAW,IALtB,uDAOL0B,GAAU,uBAAD,cAPJ,8BAWHhD,EAAmB,UACnBhP,GAAawQ,GAZV,iBAaLxB,EAAOwB,EAbF,+BAeLwB,GAAU,wBAAD,OAAyBxB,IAf7B,8BAmBH1U,EAAmB,ab3E1B,ea4EoB4U,EApBV,iBAqBL1B,EAAOwB,EArBF,+BAuBLwB,GAAU,wBAAD,OAAyBxB,IAvB7B,2BA2BHjO,EAAO,EA3BJ,UA6BLA,EAAOc,SAASuN,EAAW,IA7BtB,0DA+BLoB,GAAU,0BAAD,cA/BJ,2BAmCHE,EAAW,EAnCR,UAqCLA,EAAW7O,SAASwO,GAAe,IArC9B,0DAuCLG,GAAU,0BAAD,cAvCJ,kCA2CD5Q,EAAsB,GACxB2P,GACF3P,EAAOuE,KAAK,UAEVsL,GACF7P,EAAOuE,KAAK,WAEVwL,GACF/P,EAAOuE,KAAK,aAEV0L,GACFjQ,EAAOuE,KAAK,YAEV4L,GACFnQ,EAAOuE,KAAK,UAEV8L,GACFrQ,EAAOuE,KAAK,YAEVgM,IACFvQ,EAAOuE,KAAK,UA/DP,oBAmEC0K,EAAW,CACftB,OACAC,OACAlT,OACAyG,OACAC,OACA2P,UAAWD,EACX9Q,SACAT,UAAWS,EAAOR,QAAO,SAACS,EAAKC,GAAN,oBAAC,gBAAqBD,GAAtB,mBAA4BC,EAAQ,OAAO,MA3EjE,2DA6EI1I,EA7EJ,KA6EIA,MACToZ,GAAU,0BAAD,OAA2BpZ,IA9E/B,iFAAF,mDAAC,IAkFVoK,aAAc+O,SC9IhBK,GAAa5X,IAAOC,IAAV,4BAEV4X,GAAW7X,IAAOC,IAAV,oEAKR6X,GAAY9X,IAAOC,IAAV,mFAyDA8X,OA/Cf,YAA2D,IAA/BpY,EAA8B,EAA9BA,QAASkW,EAAqB,EAArBA,WAC7BvT,EAAQC,cACNtD,EAASK,IAATL,KAER,EAAkCvB,oBAAS,GAA3C,mBAAOsa,EAAP,KAAkBC,EAAlB,KAEA,OAAKhZ,EAKH,eAAC2Y,GAAD,WACE,cAAC,IAAD,6BACA,eAACC,GAAD,WACGlY,EAAQmI,KAAI,SAAAhC,GAAM,OACjB,cAAC,KAAD,CACE/E,MAAO,CAAEmX,SAAU,SAEnBzW,QAAS,kBAAMa,EAAM,GAAD,OAAIwD,EAAOyO,KAAX,YAAmBzO,EAAO0O,KAA1B,YAAkC1O,EAAOxE,QAH/D,SAKE,eAACwW,GAAD,WACE,cAAC,IAAD,UAAWhS,EAAOkC,OAClB,cAAC,KAAD,CACE9E,MAAM,SACNC,QAAQ,QACRE,QACE,cAAC,IAAD,CAAQ/B,KAAK,SAASgC,KAAK,SAAS7B,QAAS,SAAAL,GAAC,OAAIA,EAAEqW,mBAAmBzP,KAAK,UAA5E,SACE,cAAC,IAAD,CAAMzE,MAAM,eALlB,SASE,cAAC,KAAD,kCAdCuC,EAAOiC,SAmBhB,cAAC,KAAD,CAAMhH,MAAO,CAAEmX,SAAU,SAAWzW,QAAS,kBAAMwW,GAAa,IAAhE,uCAIF,cAAC,KAAD,CAAO7U,KAAM4U,EAAW9D,QAAS+D,EAAjC,SACE,cAAC,GAAD,CAAWpC,WAAY,SAAApB,GAAC,OAAIoB,EAAWpB,GAAGG,MAAK,kBAAMqD,GAAa,cAlC/D,MC0CIE,OAvEf,WACE,IAAQlZ,EAASK,IAATL,KAER,EAA8BvB,mBAAmB,IAAjD,mBAAOiC,EAAP,KAAgByY,EAAhB,KAQA,OAPAjZ,qBAAU,WACHF,GAGLA,EAAKU,UAAUyK,OAAOwK,KAAKwD,KAC1B,CAACnZ,IAECA,EAyCH,eAAC,IAAD,WACE,cAAC,IAAD,CAAOyW,KAAK,IAAIC,QAAS,cAAC,GAAD,CAAWhW,QAASA,EAASkW,WAdvC,SAAC/P,GAAD,OACjB7G,EACGU,UACA0Y,UAAUvS,GACV8O,MAAK,gBAAG0D,EAAH,EAAGA,WAAH,OAAoBF,EAAW,GAAD,oBAAKzY,GAAL,cAAC,gBAAkBmG,GAAnB,IAA2B8L,IAAK0G,eAWpE,cAAC,IAAD,CACE5C,KAAK,sBACLC,QACE,cAAC,GAAD,CACEhW,QAASA,EACTyU,kBA5CgB,SAACmE,GAAD,OAAwBtZ,EAAKa,gBAAgBsK,KAAK,CAAEoO,YAAaD,KA6CjFlE,UA3CQ,SAACkE,GAAD,OAAwBtZ,EAAKW,QAAQwK,KAAK,CAAEoO,YAAaD,KA4CjEjE,gBA1Cc,SAACiE,GAAD,OAAwBtZ,EAAKY,cAAcuK,KAAK,CAAEoO,YAAaD,KA2C7ExS,cAzCY,SAACwS,EAAoBpS,GAArB,OACpBlH,EACGU,UACA8Y,UAAU,CAAE1Q,KAAMwQ,GAAc,CAAEG,KAAM,CAAEvS,eAC1CyO,MAAK,YACJ,GAAsB,IADK,EAApB+D,cAEL,MAAM,IAAI7Z,MAAM,2BAA6ByZ,GAE/CH,EACEzY,EAAQmI,KAAI,SAAAhC,GACV,OAAIA,EAAOiC,OAASwQ,EACXzS,EAEF,6BAAKA,GAAZ,IAAoBK,sBA6BpBH,UAlBQ,SAACuS,EAAoB3Y,GAArB,OAChBX,EACGW,QACAgZ,WAAWhZ,EAAMkI,KAAI,SAAAY,GAAI,oCAAUA,GAAV,IAAgB8P,YAAaD,EAAYjG,SAAU,SAC5EsC,MAAK,uBArCD,MCgBIiE,I,MAAAA,GA5Bf,WACE,IAAM/E,EAAWC,wBAAc,CAAEC,MAAO,uBACxC,OACE,qCACGF,EAAW,cAAC,GAAD,IAAmB,cAAC,EAAD,IAC/B,eAAC,IAAD,WACE,cAAC,IAAD,CACE4B,KAAK,IACLC,QACE,cAAC,EAAD,UACE,cAAC,GAAD,QAIN,cAAC,IAAD,CACED,KAAK,YACLC,QACE,cAAC,EAAD,UACE,cAAC,GAAD,QAIN,cAAC,IAAD,CAAOD,KAAK,QAAQC,QAAS,cAAC,EAAD,aClBtBmD,GAZS,SAACC,GACnBA,GAAeA,aAAuBC,UACxC,8BAAqBpE,MAAK,YAAkD,IAA/CqE,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOF,GACPG,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAQN,OCNRO,GAAQ,UADF,wCACE,UAERC,GAAYC,cAAH,ktDAICF,GAEAA,GAE0BA,GAEFA,GAQxBA,GAEAA,GAEWA,GACeA,GAEFA,GAQxBA,GAEAA,GAEWA,GACeA,GAEFA,IAuBlCG,GAAiBD,cAAH,2pCA0DLE,OAPf,WACE,MAAO,CACLD,GACAF,KC7FWjV,GA3BD,CACZC,OAAQ,CACNoV,MAAO,UACPnV,MAAO,UACPoV,SAAU,UACVC,MAAO,CACLlV,KAAM,WAERmV,KAAM,CACJnV,KAAM,UACN6H,OAAQ,UACRG,OAAQ,UACRoN,OAAQ,WAEVC,MAAO,CACLxN,OAAQ,WAEV/H,G,KAAIwV,GAENC,WAAY,CACVC,MAAO,CACLC,KAAK,wECXEC,IAASC,WAAWC,SAASC,eAAe,SACpDC,OACH,cAAC,IAAMC,WAAP,UACE,cAAC,IAAD,CAAeC,SAAUpd,aAAzB,SACE,cAAC,EAAD,UACE,cAAC,EAAD,UACE,cAAC,IAAD,UACE,eAAC,IAAD,CAAe+G,MAAOA,GAAtB,UACE,cAAC,SAAD,CAAQoV,OAAQA,KAChB,cAAC,GAAD,kBAYdZ,O","file":"static/js/main.3ba76d1c.chunk.js","sourcesContent":["import React, { createContext, useContext, useState } from 'react';\nimport * as Realm from 'realm-web';\n\ninterface RealmProps {\n  login: (email: string, password: string) => Promise<Realm.User | null>;\n  loginAnonymous: () => Promise<Realm.User | null>;\n  logout: () => Promise<void>;\n  user: Realm.User | null;\n}\n\nconst RealmContext = createContext<RealmProps | null>(null);\n\ninterface RealmProviderProps {\n  children: React.ReactNode;\n}\n\nexport const RealmProvider = ({ children }: RealmProviderProps) => {\n  if (!process.env.REACT_APP_REALM_APP_ID!) {\n    throw new Error('no Realm app configured for this environment');\n  }\n  const app = new Realm.App({\n    id: process.env.REACT_APP_REALM_APP_ID,\n    baseUrl: process.env.REACT_APP_REALM_BASE_URL,\n  });\n\n  const [user, setUser] = useState<Realm.User | null>(app.currentUser);\n\n  const login = async (email: string, password: string) => {\n    try {\n      await app.logIn(Realm.Credentials.emailPassword(email, password));\n\n      setUser(app.currentUser);\n      return app.currentUser;\n    } catch (e) {\n      console.error('failed to login', e);\n      setUser(null);\n      return null;\n    }\n  };\n\n  const loginAnonymous = async () => {\n    try {\n      await app.logIn(Realm.Credentials.anonymous());\n\n      setUser(app.currentUser);\n      return app.currentUser;\n    } catch (e) {\n      console.error('failed to login', e);\n      setUser(null);\n      return null;\n    }\n  };\n\n  const logout = async () => {\n    try {\n      if (app.currentUser) {\n        await app.currentUser.logOut();\n      }\n    } catch (e) {\n      console.error('failed to logout', e);\n    } finally {\n      setUser(null);\n    }\n  };\n\n  return <RealmContext.Provider value={{ login, loginAnonymous, logout, user }}>{children}</RealmContext.Provider>;\n};\n\nexport const useRealm = () => {\n  const realm = useContext(RealmContext);\n  if (realm === null) {\n    throw new Error('useRealm() called outside of a RealmProvider');\n  }\n  return realm;\n};\n","import React, { createContext, useContext, useEffect, useState } from 'react';\n\nimport { Player, PlayerMatch, Season, Team, TeamMatch } from '../types';\n\nimport { useRealm } from './use_realm';\n\ninterface AtlasProps {\n  data: ReturnType<typeof atlasData> | null;\n}\n\nconst AtlasContext = createContext<AtlasProps | null>(null);\n\ninterface AtlasProviderProps {\n  children: React.ReactNode;\n}\n\nexport const AtlasProvider = ({ children }: AtlasProviderProps) => {\n  const { user } = useRealm();\n\n  const [data, setData] = useState<ReturnType<Realm.User['mongoClient']> | null>(null);\n\n  useEffect(() => {\n    if (user === null) {\n      return;\n    }\n    setData(user.mongoClient('data'));\n  }, [user]);\n\n  return <AtlasContext.Provider value={{ data: atlasData(data) }}>{children}</AtlasContext.Provider>;\n};\n\nexport const useAtlas = () => {\n  const atlas = useContext(AtlasContext);\n  if (atlas === null) {\n    throw new Error('useAtlas() called outside of a AtlasProvider');\n  }\n  return atlas;\n};\n\nfunction atlasData(data: ReturnType<Realm.User['mongoClient']> | null) {\n  if (!data) {\n    return null;\n  }\n  return {\n    players: () => data.db('amsterdam').collection<Player>('players'),\n    seasons: () => data.db('amsterdam').collection<Season>('seasons'),\n    teams: () => data.db('amsterdam').collection<Team>('teams'),\n    teamMatches: () => data.db('amsterdam').collection<TeamMatch>('team_matches'),\n    playerMatches: () => data.db('amsterdam').collection<PlayerMatch>('player_matches'),\n  };\n}\n","import React, { useState } from 'react';\nimport { useLocation } from 'react-router-dom';\nimport styled from '@emotion/styled';\nimport Button from '@leafygreen-ui/button';\nimport TextInput from '@leafygreen-ui/text-input';\nimport { Body } from '@leafygreen-ui/typography';\nimport { Navigate } from 'react-router-dom';\n\nimport { useRealm } from '../../realm';\n\nconst StyledLogin = styled.div`\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n`;\n\nconst LoginContainer = styled.div`\n  min-width: 360px;\n  padding: 1rem;\n  border: 1px solid;\n`;\n\nconst LoginAnonContainer = styled.div`\n  min-width: 360px;\n  padding: 0 1rem 1rem 1rem;\n  margin-top: 0.5rem;\n`;\n\nfunction LoginPage() {\n  const location = useLocation();\n  const [username, setUsername] = useState('');\n  const [password, setPassword] = useState('');\n\n  const { login, loginAnonymous, user } = useRealm();\n\n  let from = (location as any).state?.from?.pathname || '/';\n\n  if (user) {\n    return <Navigate to={from} replace />;\n  }\n\n  return (\n    <StyledLogin>\n      <LoginContainer>\n        <Body style={{ marginBottom: '1rem' }}>Please log in using your credentials</Body>\n        <TextInput\n          label=\"Username\"\n          placeholder=\"your.email@example.com\"\n          onChange={e => {\n            setUsername(e.target.value);\n          }}\n          value={username}\n        />\n        <TextInput\n          label=\"Password\"\n          type=\"password\"\n          onChange={e => {\n            setPassword(e.target.value);\n          }}\n          value={password}\n        />\n        <Button style={{ marginTop: '1rem' }} variant=\"primary\" onClick={() => login(username, password)}>\n          Login\n        </Button>\n      </LoginContainer>\n      <LoginAnonContainer>\n        <Body style={{ marginBottom: '0.5rem' }}>Or log in as a guest</Body>\n        <Button variant=\"primaryOutline\" onClick={() => loginAnonymous()}>\n          Login Anonymously\n        </Button>\n      </LoginAnonContainer>\n    </StyledLogin>\n  );\n}\n\nexport default LoginPage;\n","import React from 'react';\nimport { useLocation, Navigate } from 'react-router-dom';\n\nimport { useRealm } from '../../realm';\n\ninterface Props {\n  children: JSX.Element;\n}\n\nfunction ProtectedRoute({ children }: Props) {\n  let { user } = useRealm();\n  let location = useLocation();\n\n  if (!user) {\n    return <Navigate to=\"/login\" state={{ from: location }} replace />;\n  }\n\n  return children;\n}\n\nexport default ProtectedRoute;\n","import React from 'react';\nimport { keyframes } from '@emotion/react';\nimport styled from '@emotion/styled';\nimport { MongoDBLogoMark } from '@leafygreen-ui/logo';\n\nconst leafAnimation = keyframes`\n  from {\n    transform: rotate(-5deg);\n  }\n  to {\n    transform: rotate(5deg);\n  }\n`;\n\nconst StyledLogo = styled(MongoDBLogoMark)`\n  display: inline-block;\n  margin: 24px;\n  animation: ${leafAnimation} 3s infinite alternate-reverse ease-in-out;\n  transform-origin: 50% 100%;\n`;\n\nfunction Logo() {\n  return <StyledLogo style={{ marginTop: 0, marginBottom: 0 }} height={48} />;\n}\n\nexport default Logo;\n","import React from 'react';\nimport { useNavigate, Link } from 'react-router-dom';\nimport styled from '@emotion/styled';\nimport Button from '@leafygreen-ui/button';\nimport { Body, H1 } from '@leafygreen-ui/typography';\n\nimport { useRealm } from '../../realm';\n\nimport Logo from './logo';\n\nconst StyledHeader = styled.div`\n  display: grid;\n  grid-template-columns: 1fr auto 1fr;\n  grid-column-gap: 5px;\n  justify-items: center;\n  margin-top: 0.5rem;\n`;\n\nconst NavLinks = styled.ul`\n  margin-right: auto;\n  text-align: left;\n  display: flex;\n`;\n\nconst UserInfo = styled.div`\n  margin-left: auto;\n  text-align: right;\n  padding-right: 0.5rem;\n`;\n\nfunction Header() {\n  const navTo = useNavigate();\n  const { logout, user } = useRealm();\n\n  return (\n    <StyledHeader>\n      <NavLinks>\n        <Link style={{ margin: '1rem', textDecoration: 'none' }} to=\"/seasons\">\n          Seasons\n        </Link>\n      </NavLinks>\n      <span style={{ textAlign: 'center', cursor: 'pointer' }} onClick={() => navTo('/')}>\n        <H1>Amsterdam Billiards</H1>\n        <Logo />\n      </span>\n      {user && (\n        <UserInfo>\n          <Button variant=\"primaryOutline\" onClick={logout}>\n            Logout\n          </Button>\n          <Body>{user.providerType === 'anon-user' ? 'Guest' : user.profile.email || user.id}</Body>\n        </UserInfo>\n      )}\n    </StyledHeader>\n  );\n}\n\nexport default Header;\n","import React, { useState } from 'react';\nimport styled from '@emotion/styled';\nimport Icon from '@leafygreen-ui/icon';\nimport IconButton from '@leafygreen-ui/icon-button';\nimport { Menu, MenuSeparator, MenuItem } from '@leafygreen-ui/menu';\nimport { H1 } from '@leafygreen-ui/typography';\n\nimport { useRealm } from '../../realm';\n\nimport Logo from './logo';\n\nconst StyledHeader = styled.header`\n  margin-top: 0.5rem;\n  display: flex;\n  justify-items: space-between;\n  align-items: center;\n`;\n\nfunction Header() {\n  const [menuOpen, setMenuOpen] = useState(false);\n  const { logout, user } = useRealm();\n\n  return (\n    <StyledHeader>\n      <Logo />\n      <H1 style={{ flex: 1 }}>Amsterdam Billiards</H1>\n      <Menu\n        align=\"bottom\"\n        justify=\"end\"\n        open={menuOpen}\n        trigger={\n          <IconButton size=\"xlarge\" aria-label=\"User Menu\" onClick={() => setMenuOpen(!menuOpen)}>\n            <Icon glyph=\"Ellipsis\" />\n          </IconButton>\n        }\n      >\n        <MenuItem href=\"/amsterdam\">Standings</MenuItem>\n        <MenuItem href=\"/amsterdam/team\">Team Results</MenuItem>\n        <MenuItem href=\"/amsterdam/players\">Individual Results</MenuItem>\n        <MenuSeparator />\n        {!user && <MenuItem href=\"/amsterdam/login\">Login</MenuItem>}\n        {user && (\n          <MenuItem\n            onClick={logout}\n            description={user.providerType === 'anon-user' ? 'As guest' : user.profile.email || user.id}\n          >\n            Logout\n          </MenuItem>\n        )}\n      </Menu>\n    </StyledHeader>\n  );\n}\n\nexport default Header;\n","import React from 'react';\nimport styled from '@emotion/styled';\nimport Button from '@leafygreen-ui/button';\nimport Card from '@leafygreen-ui/card';\nimport { Body, H2, H3 } from '@leafygreen-ui/typography';\n\nconst StyledMain = styled.div`\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n  gap: 12px;\n  justify-content: center;\n`;\n\nconst StyledOrderedList = styled.ol`\n  list-style: auto;\n`;\n\nconst StyledUnorderedList = styled.ol`\n  list-style: disc;\n  margin-left: 1rem;\n`;\n\nfunction HomePage() {\n  return (\n    <StyledMain>\n      <H2>Welcome to Amsterdam Billiards Information</H2>\n      <Card>\n        <Button href=\"http://amsterdambilliards.com/\" target=\"_blank\" rel=\"noopener noreferrer\">\n          Official Amsterdam Billiards & Bar website\n        </Button>\n        <Button href=\"/amsterdam/seasons/2022/summer/team_8ball\">Team 8-Ball League Site</Button>\n      </Card>\n      <H3>Why You Should Join an Amsterdam Billiards League:</H3>\n      <StyledOrderedList>\n        <li>\n          <Body>The leagues are for players of all levels, including beginners and Pros</Body>\n        </li>\n        <li>\n          <Body>You'll have fun</Body>\n        </li>\n        <li>\n          <Body>You'll improve your pool game</Body>\n        </li>\n        <li>\n          <Body>It's a great way to meet other pool players</Body>\n        </li>\n        <li>\n          <Body>The leagues are co-ed</Body>\n        </li>\n        <li>\n          <Body>They're inexpensive</Body>\n        </li>\n        <li>\n          <Body>The prizes are great</Body>\n        </li>\n        <li>\n          <Body>\n            They're easy to join (just sign up in the club at the front desk or by clicking 'Register Now!' on this\n            page)\n          </Body>\n        </li>\n        <li>\n          <Body>You get a lot of free stuff:</Body>\n          <StyledUnorderedList>\n            <li>\n              <Body>Play pool for free for a week</Body>\n            </li>\n            <li>\n              <Body>3 hours of free play every week while the league lasts</Body>\n            </li>\n            <li>\n              <Body>Get a dollar off all drinks while you're playing in the leagues</Body>\n            </li>\n            <li>\n              <Body>Mid-Season league party</Body>\n            </li>\n            <li>\n              <Body>League Finals & Registration signup party</Body>\n            </li>\n          </StyledUnorderedList>\n        </li>\n      </StyledOrderedList>\n      <Button href=\"https://amsterdambilliards.com/leagues/\" target=\"_blank\" rel=\"noopener noreferrer\">\n        Register Now!\n      </Button>\n    </StyledMain>\n  );\n}\n\nexport default HomePage;\n","import React from 'react';\nimport Spinner from 'react-spinners/PulseLoader';\nimport styled from '@emotion/styled';\nimport Banner from '@leafygreen-ui/banner';\n\nconst StyledLoading = styled.div`\n  margin: 0 auto;\n  max-width: 62%;\n  @media (max-width: 720px) {\n    max-width: 100%;\n  }\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n`;\n\ninterface Props {\n}\n\nfunction Loading(_: Props) {\n  return (\n    <StyledLoading>\n      <Banner variant=\"info\" style={{ margin: '1rem 0' }}>\n        Please wait while we load the season data.\n      </Banner>\n      <Spinner color=\"gray\" />\n    </StyledLoading>\n  );\n}\n\nexport default Loading;\n","import React from 'react';\nimport styled from '@emotion/styled';\nimport Button from '@leafygreen-ui/button';\n\nconst StyledButton = styled(Button)`\n  border: 0;\n  background-color: ${({ theme }) => theme.colors.white};\n  color: ${({ theme }) => theme.colors.lg.blue.base};\n`;\n\ninterface Props {\n  children?: React.ReactNode;\n  onClick: () => void;\n}\n\nfunction PlainButton({ children, ...rest }: Props) {\n  return <StyledButton {...rest}>{children}</StyledButton>;\n}\n\nexport default PlainButton;\n","export interface AmsterdamKey {\n  xref: number;\n  name: string;\n}\n\nexport type DayOfWeek = 'monday' | 'tuesday' | 'wednesday' | 'thursday' | 'friday' | 'saturday' | 'sunday';\n\nexport const isDayOfWeek = (v: string): v is DayOfWeek => {\n  switch (v) {\n    case 'monday':\n    case 'tuesday':\n    case 'wednesday':\n    case 'thursday':\n    case 'friday':\n    case 'saturday':\n    case 'sunday':\n      return true;\n  }\n  return false;\n};\n\nexport const dayOfWeek = (v: DayOfWeek): string => {\n  return v.charAt(0).toUpperCase() + v.substring(1);\n};\n\nconst monthNames = [\n  'January',\n  'February',\n  'March',\n  'April',\n  'May',\n  'June',\n  'July',\n  'August',\n  'September',\n  'October',\n  'November',\n  'December',\n];\n\nexport const monthName = (v: number): string => monthNames[v];\n\nexport const rankPlace = (r: number): string => {\n  let suffix = 'th';\n  if (r === 1) {\n    suffix = 'st';\n  } else if (r === 2) {\n    suffix = 'nd';\n  } else if (r === 3) {\n    suffix = 'rd';\n  }\n  return r + suffix;\n};\n","import { AmsterdamKey } from './amsterdam';\nimport { TeamPlayer } from './player';\n\nexport type PlayerMatchType = 'R1' | 'R2' | 'TB';\n\nexport interface PlayerMatch {\n  _id: string;\n  match_id: string;\n  season_xref: number;\n  week_num: number;\n  date: Date;\n  type: PlayerMatchType;\n  seq: number;\n  players: PlayerResult[];\n  forfeit?: boolean;\n}\n\nexport interface PlayerMatches extends TeamPlayer {\n  matches: PlayerMatch[];\n}\n\nexport interface PlayerResult extends AmsterdamKey {\n  team: AmsterdamKey;\n  handicap: number;\n  games_won: number;\n  win?: boolean;\n  loss?: boolean;\n}\n\nexport const emptyPlayerResult = (): PlayerResult => ({\n  xref: 0,\n  name: '',\n  team: { xref: 0, name: '' },\n  handicap: 0,\n  games_won: 0,\n});\n\nexport interface PlayerMatchup {\n  self: PlayerResult;\n  opp: PlayerResult;\n}\n\nexport interface PlayerHandicap {\n  value: number;\n  lastWeek?: number;\n}\n\nexport const emptyPlayerHandicap = (value = 0): PlayerHandicap => ({ value });\n\nexport interface PlayerRecord {\n  wins: number;\n  losses: number;\n  streak: number;\n}\n\nexport const emptyPlayerRecord = (): PlayerRecord => ({ wins: 0, losses: 0, streak: 0 });\n","import { DayOfWeek } from './amsterdam';\n\nexport type SeasonTerm = 'winter' | 'spring' | 'summer' | 'fall';\n\nexport const isSeasonTerm = (v: string): v is SeasonTerm => {\n  switch (v) {\n    case 'winter':\n    case 'spring':\n    case 'summer':\n    case 'fall':\n      return true;\n  }\n  return false;\n};\n\nexport type LeagueType = 'team_8ball';\n\nexport const isLeagueType = (v: string): v is LeagueType => {\n  switch (v) {\n    case 'team_8ball':\n      return true;\n  }\n  return false;\n};\n\nexport interface Season {\n  _id: string;\n  year: number;\n  term: SeasonTerm;\n  type: LeagueType;\n  xref: number;\n  name: string;\n  num_weeks: number;\n  nights: DayOfWeek[];\n  divisions: Partial<Record<DayOfWeek, string[]>>;\n}\n","import React, { useEffect, useState } from 'react';\nimport { useNavigate } from 'react-router-dom';\nimport styled from '@emotion/styled';\nimport Button from '@leafygreen-ui/button';\nimport ExpandableCard from '@leafygreen-ui/expandable-card';\nimport FormFooter from '@leafygreen-ui/form-footer';\nimport TextInput from '@leafygreen-ui/text-input';\nimport { Subtitle } from '@leafygreen-ui/typography';\n\nimport { dayOfWeek, DayOfWeek, Team, Season } from '../../types';\n\nconst NightContainer = styled.div`\n  display: flex;\n  flex-wrap: wrap;\n  justify-content: center;\n`;\n\nconst NightControl = styled.div`\n  display: flex;\n  flex-direction: column;\n  :not(:first-of-type) {\n    margin-left: 2rem;\n  }\n`;\n\nconst NightHeader = styled.div`\n  display: flex;\n  justify-content: space-between;\n  margin-bottom: 1rem;\n`;\n\nconst TeamInputs = styled.div`\n  display: flex;\n`;\n\ninterface Props {\n  season: Season;\n  teams: Team[];\n  saveDivisions: (divisions: Season['divisions']) => Promise<void>;\n  saveTeams: (teams: Omit<Team, '_id' | 'season_xref' | 'schedule'>[]) => Promise<void>;\n}\n\nfunction SeasonAdmin({ season, teams, saveDivisions, saveTeams }: Props) {\n  const navTo = useNavigate();\n\n  const [divisionsOpen, setDivisionsOpen] = useState(\n    !Object.values(season.divisions).reduce((tot, divs) => (tot += divs.length), 0),\n  );\n  const [divisionsErrMsg, setDivisionsErrMsg] = useState('');\n  const [divisions, setDivisions] = useState<Partial<Record<DayOfWeek, string[]>>>(\n    season.nights.reduce((acc, night) => {\n      const existingDivisions = season.divisions[night] || [];\n      return {\n        ...acc,\n        [night]: existingDivisions.length > 0 ? existingDivisions : [''],\n      };\n    }, {}),\n  );\n\n  const [teamsOepn, setTeamsOpen] = useState(\n    !!Object.values(season.divisions).reduce((tot, divs) => (tot += divs.length), 0),\n  );\n  const [teamsErrMsg, setTeamsErrMsg] = useState('');\n  const [teamsByDivision, setTeamsByDivision] = useState<\n    Partial<Record<DayOfWeek, Record<string, { xref: string; name: string }[]>>>\n  >({});\n  useEffect(() => {\n    setTeamsByDivision(\n      Object.entries(divisions).reduce(\n        (acc, [night, divisions]) => ({\n          ...acc,\n          [night]: divisions.reduce((inner, division) => {\n            const existingTeams = teams\n              .filter(t => t.division_name === division)\n              .map(t => ({ xref: t.xref + '', name: t.name }));\n            return {\n              ...inner,\n              [division]: existingTeams.length > 0 ? existingTeams : [{ xref: '', name: '' }],\n            };\n          }, {}),\n        }),\n        {},\n      ),\n    );\n  }, [season, teams, divisions]);\n\n  return (\n    <>\n      <Button variant=\"primaryOutline\" onClick={() => navTo('..')}>\n        Back to Dashboard\n      </Button>\n      <ExpandableCard\n        title=\"Admin: Divisions\"\n        description=\"Make sure the league divisions are correct\"\n        isOpen={divisionsOpen}\n        onClick={() => setDivisionsOpen(!divisionsOpen)}\n      >\n        <NightContainer>\n          {season.nights.map(night => (\n            <NightControl key={night}>\n              <NightHeader>\n                <Subtitle>{dayOfWeek(night)}</Subtitle>\n                <Button\n                  size=\"xsmall\"\n                  onClick={() => setDivisions({ ...divisions, [night]: [...(divisions[night] || []), ''] })}\n                >\n                  +\n                </Button>\n              </NightHeader>\n              {(divisions[night] || []).map((val, idx) => (\n                <TextInput\n                  style={{ marginBottom: '0.5rem' }}\n                  key={val + idx}\n                  label={`Division #${idx}`}\n                  value={val}\n                  onChange={e =>\n                    setDivisions({\n                      ...divisions,\n                      [night]: (divisions[night] || []).map((v, i) => {\n                        if (i === idx) {\n                          return e.target.value;\n                        }\n                        return v;\n                      }),\n                    })\n                  }\n                />\n              ))}\n            </NightControl>\n          ))}\n        </NightContainer>\n        <FormFooter\n          primaryButton={{\n            text: 'Save',\n            onClick: async e => {\n              try {\n                saveDivisions(divisions);\n                setDivisionsOpen(false);\n                setTeamsOpen(true);\n                setDivisionsErrMsg('');\n              } catch ({ error }) {\n                setDivisionsErrMsg(`failed to save divisions: ${error}`);\n              }\n            },\n          }}\n          errorMessage={divisionsErrMsg}\n        />\n      </ExpandableCard>\n      <ExpandableCard\n        title=\"Admin: Teams\"\n        description=\"Make sure the league teams are correct\"\n        isOpen={teamsOepn}\n        onClick={() => setTeamsOpen(!teamsOepn)}\n      >\n        {Object.entries(teamsByDivision).map(([night, divisions]) => (\n          <NightContainer key={night}>\n            {Object.entries(divisions).map(([divisionName, teams]) => (\n              <NightControl key={divisionName}>\n                <NightHeader>\n                  <Subtitle>{divisionName}</Subtitle>\n                  <Button\n                    size=\"xsmall\"\n                    onClick={() =>\n                      setTeamsByDivision({\n                        ...teamsByDivision,\n                        [night]: {\n                          ...(teamsByDivision[night as DayOfWeek] || {}),\n                          [divisionName]: [\n                            ...((teamsByDivision[night as DayOfWeek] || {})[divisionName] || []),\n                            { xref: '', name: '' },\n                          ],\n                        },\n                      })\n                    }\n                  >\n                    +\n                  </Button>\n                </NightHeader>\n                {teams.map((team, idx) => (\n                  <TeamInputs key={idx}>\n                    <TextInput\n                      label={`Team #${idx} Key`}\n                      value={team.xref}\n                      onChange={e =>\n                        setTeamsByDivision({\n                          ...teamsByDivision,\n                          [night]: {\n                            ...(teamsByDivision[night as DayOfWeek] || {}),\n                            [divisionName]: ((teamsByDivision[night as DayOfWeek] || {})[divisionName] || []).map(\n                              (v, i) => {\n                                if (i === idx) {\n                                  return { ...v, xref: e.target.value };\n                                }\n                                return v;\n                              },\n                            ),\n                          },\n                        })\n                      }\n                    />\n                    <TextInput\n                      label={`Team #${idx} Name`}\n                      value={team.name}\n                      onChange={e =>\n                        setTeamsByDivision({\n                          ...teamsByDivision,\n                          [night]: {\n                            ...(teamsByDivision[night as DayOfWeek] || {}),\n                            [divisionName]: ((teamsByDivision[night as DayOfWeek] || {})[divisionName] || []).map(\n                              (v, i) => {\n                                if (i === idx) {\n                                  return { ...v, name: e.target.value };\n                                }\n                                return v;\n                              },\n                            ),\n                          },\n                        })\n                      }\n                    />\n                  </TeamInputs>\n                ))}\n              </NightControl>\n            ))}\n          </NightContainer>\n        ))}\n        <FormFooter\n          primaryButton={{\n            text: 'Save',\n            onClick: async e => {\n              try {\n                await saveTeams(\n                  Object.entries(teamsByDivision)\n                    .flatMap(([night, divisionTeams]) =>\n                      Object.entries(divisionTeams).flatMap(([divisionName, teams]) => {\n                        return teams.map(team => ({\n                          xref: parseInt(team.xref, 10),\n                          name: team.name,\n                          night: night as DayOfWeek,\n                          division_name: divisionName,\n                        }));\n                      }),\n                    )\n                    .filter(team => !!team.xref),\n                );\n                setTeamsOpen(false);\n                setTeamsErrMsg('');\n              } catch ({ error }) {\n                setTeamsErrMsg(`failed to save teams: ${error}`);\n              }\n            },\n          }}\n          errorMessage={teamsErrMsg}\n        />\n      </ExpandableCard>\n    </>\n  );\n}\n\nexport default SeasonAdmin;\n","import React from 'react';\nimport { Link } from 'react-router-dom';\nimport styled from '@emotion/styled';\nimport { H2 } from '@leafygreen-ui/typography';\n\nimport { Team, TeamRecord } from '../../../types';\n\nconst ModalHeader = styled.div`\n  display: flex;\n  justify-content: space-between;\n  align-items: center;\n`;\n\nconst PageHeader = styled.div`\n  align-self: stretch;\n  display: grid;\n  grid-template-columns: 1fr auto 1fr;\n  grid-column-gap: 5px;\n`;\n\ninterface Props {\n  modalView?: boolean;\n  team?: Team;\n  teamRecord?: TeamRecord;\n}\n\nfunction teamRecordDisplay(tr = { wins: 0, losses: 0 }) {\n  return `${tr.wins}-${tr.losses}`;\n}\n\nfunction TeamHeader({ modalView, team, teamRecord }: Props) {\n  if (!team) {\n    return null;\n  }\n\n  const title = `${team.name} (${teamRecordDisplay(teamRecord)})`;\n\n  if (modalView) {\n    return (\n      <ModalHeader>\n        <H2>{title}</H2>\n        <Link to={team.xref + ''}>Detailed View</Link>\n      </ModalHeader>\n    );\n  }\n\n  return (\n    <PageHeader>\n      <H2 style={{ gridColumn: 2 }}>{title}</H2>\n      <Link to={'..'} style={{ marginLeft: 'auto', textAlign: 'right' }}>\n        Back to Standings\n      </Link>\n    </PageHeader>\n  );\n}\n\nexport default TeamHeader;\n","import React, { useMemo } from 'react';\nimport { useNavigate } from 'react-router-dom';\nimport { Table, TableHeader, Row, Cell } from '@leafygreen-ui/table';\n\nimport { PlainButton } from '../../../components';\nimport { emptyPlayerResult, PlayerMatch, PlayerResult } from '../../../types';\n\ninterface Props {\n  linkToPlayers?: string;\n  playerMatches: PlayerMatch[];\n  selfTeamXref: number;\n}\n\ninterface Stats extends Pick<PlayerResult, 'xref' | 'name' | 'handicap'> {\n  doubles: number;\n  wins: number;\n  losses: number;\n  gamesWon: number;\n  gamesLost: number;\n  gamePct: number;\n}\n\nconst emptyStats = (xref = 0, name = ''): Stats => ({\n  xref,\n  name,\n  handicap: 0,\n  doubles: 0,\n  wins: 0,\n  losses: 0,\n  gamesWon: 0,\n  gamesLost: 0,\n  gamePct: 0,\n});\n\nfunction PlayerTeamResults({ linkToPlayers = 'players', playerMatches, selfTeamXref }: Props) {\n  const navTo = useNavigate();\n  const stats: Stats[] = useMemo(() => {\n    const playerWeeks: Record<string, Record<number, number>> = {};\n    const totals = {\n      wins: 0,\n      losses: 0,\n      gamesWon: 0,\n      gamesLost: 0,\n    };\n    const stats = Object.entries(\n      playerMatches.reduce<Record<number, Stats>>((acc, playerMatch) => {\n        const self = playerMatch.players.find(p => p.team.xref === selfTeamXref) || emptyPlayerResult();\n        const opp = playerMatch.players.find(p => p.team.xref !== selfTeamXref) || emptyPlayerResult();\n\n        if (playerMatch.type !== 'TB') {\n          if (!playerWeeks[self.xref]) {\n            playerWeeks[self.xref] = {};\n          }\n          if (!playerWeeks[self.xref][playerMatch.week_num]) {\n            playerWeeks[self.xref][playerMatch.week_num] = 0;\n          }\n          playerWeeks[self.xref][playerMatch.week_num]++;\n        }\n\n        const stats = acc[self.xref] || emptyStats(self.xref, self.name);\n        stats.handicap = self.handicap;\n        stats.wins += self.win ? 1 : 0;\n        stats.losses += self.loss ? 1 : 0;\n        stats.gamesWon += self.games_won;\n        stats.gamesLost += opp.games_won;\n        totals.wins += self.win ? 1 : 0;\n        totals.losses += self.loss ? 1 : 0;\n        totals.gamesWon += self.games_won;\n        totals.gamesLost += opp.games_won;\n        return { ...acc, [self.xref]: stats };\n      }, {}),\n    ).map(([xref, stats]) => ({\n      ...stats,\n      gamePct: stats.gamesWon / (stats.gamesWon + stats.gamesLost),\n      doubles: Object.values(playerWeeks[xref] || {}).filter(n => n > 1).length,\n    }));\n    stats.sort((p1, p2) => p2.gamePct - p1.gamePct);\n    stats.push({\n      xref: 0,\n      name: 'Totals',\n      handicap: ('' as unknown) as number,\n      doubles: ('' as unknown) as number,\n      gamePct: totals.gamesWon / (totals.gamesWon + totals.gamesLost),\n      ...totals,\n    });\n    return stats;\n  }, [playerMatches, selfTeamXref]);\n\n  return (\n    <Table\n      data={stats}\n      columns={[\n        <TableHeader label=\"Name\" />,\n        <TableHeader label=\"HCP\" />,\n        <TableHeader label=\"DB's\" />,\n        <TableHeader label=\"W\" />,\n        <TableHeader label=\"L\" />,\n        <TableHeader label=\"GF\" />,\n        <TableHeader label=\"GA\" />,\n        <TableHeader label=\"PCT\" />,\n      ]}\n    >\n      {({ datum: pr }) => (\n        <Row key={pr.xref}>\n          <Cell>\n            <PlainButton onClick={() => navTo(linkToPlayers, { state: { xref: pr.xref + '' } })}>{pr.name}</PlainButton>\n          </Cell>\n          <Cell>{pr.handicap}</Cell>\n          <Cell>{pr.doubles}</Cell>\n          <Cell>{pr.wins}</Cell>\n          <Cell>{pr.losses}</Cell>\n          <Cell>{pr.gamesWon}</Cell>\n          <Cell>{pr.gamesLost}</Cell>\n          <Cell>{pr.gamePct.toFixed(3)}</Cell>\n        </Row>\n      )}\n    </Table>\n  );\n}\n\nexport default PlayerTeamResults;\n","import React from 'react';\nimport styled from '@emotion/styled';\nimport { Body, Overline } from '@leafygreen-ui/typography';\n\nimport { AmsterdamKey, PlayerHandicap, PlayerRecord } from '../../../types';\n\nconst StyledPlayerDetails = styled.div`\n  margin-bottom: 1rem;\n  display: grid;\n  grid-template-columns: 90px 270px;\n`;\n\ninterface Props {\n  handicaps: PlayerHandicap[];\n  record: PlayerRecord;\n  team: AmsterdamKey;\n}\n\nfunction PlayerDetails({ handicaps, record, team }: Props) {\n  return (\n    <StyledPlayerDetails>\n      <Overline>Record:</Overline>\n      <Body>{`${record.wins}-${record.losses}, ${streakDisplay(record.streak)}`}</Body>\n      <Overline>Plays for:</Overline>\n      <Body>{team.name}</Body>\n      <Overline>Handicap:</Overline>\n      <div>\n        {handicaps.map(({ value, lastWeek }) => (\n          <Body key={!lastWeek ? 'current' : lastWeek}>{`${value}${\n            !lastWeek ? '' : ` (until: Week ${lastWeek})`\n          }`}</Body>\n        ))}\n      </div>\n    </StyledPlayerDetails>\n  );\n}\n\nexport default PlayerDetails;\n\nfunction streakDisplay(streak: number) {\n  const prefix = streak > 0 ? 'W' : 'L';\n  return prefix + Math.abs(streak);\n}\n","import React, { useEffect, useState } from 'react';\nimport styled from '@emotion/styled';\nimport { Table, TableHeader, Row, Cell } from '@leafygreen-ui/table';\n\nimport { emptyPlayerResult, monthName, rankPlace, PlayerMatch } from '../../../types';\n\nconst StyledRow = styled(Row, {\n  shouldForwardProp: prop => prop !== 'win' && prop !== 'loss' && prop !== 'noBorder',\n})<{ win?: boolean; loss?: boolean; noBorder: boolean }>`\n  ${({ theme, noBorder }) =>\n    !noBorder && {\n      borderTop: `1px solid ${theme.colors.lg.gray.light1}`,\n    }}\n  ${({ theme, win, loss }) =>\n    win\n      ? {\n          backgroundColor: theme.colors.lg.green.light2,\n        }\n      : loss\n      ? {\n          backgroundColor: theme.colors.lg.red.light2,\n        }\n      : {}}\n`;\n\ninterface Props {\n  matches: PlayerMatch[];\n  xref: string;\n}\n\nfunction PlayerDashboard({ matches, xref }: Props) {\n  const [styledMatches, setStyledMatches] = useState<(PlayerMatch & { noBorder: boolean })[]>([]);\n  useEffect(() => {\n    const weekSet: Record<number, true> = {};\n    setStyledMatches(\n      matches.map(match => {\n        let noBorder = false;\n        if (weekSet[match.week_num]) {\n          noBorder = true;\n        } else {\n          weekSet[match.week_num] = true;\n        }\n\n        return { ...match, noBorder };\n      }),\n    );\n  }, [matches]);\n  return (\n    <Table\n      data={styledMatches}\n      columns={[\n        <TableHeader label=\"Week\" />,\n        <TableHeader label=\"Date\" />,\n        <TableHeader label=\"Matchup\" />,\n        <TableHeader label=\"Opp Player\" />,\n        <TableHeader label=\"Opp Team\" />,\n        <TableHeader label=\"Round\" />,\n        <TableHeader label=\"Games Won\" />,\n        <TableHeader label=\"Games Lost\" />,\n        <TableHeader label=\"Notes\" />,\n      ]}\n    >\n      {({ datum: pm }) => {\n        const self = pm.players.find(p => p.xref + '' === xref) || emptyPlayerResult();\n        const opp = pm.players.find(p => p.xref + '' !== xref) || emptyPlayerResult();\n\n        return (\n          <StyledRow key={pm.match_id} win={self.win} loss={self.loss} noBorder={pm.noBorder}>\n            <Cell>{pm.week_num}</Cell>\n            <Cell>{`${monthName(pm.date.getMonth())} ${rankPlace(pm.date.getDate())}`}</Cell>\n            <Cell>{`${self.handicap} vs ${opp.handicap}`}</Cell>\n            <Cell>{opp.name}</Cell>\n            <Cell>{opp.team.name}</Cell>\n            <Cell>{pm.type}</Cell>\n            <Cell>{self.games_won}</Cell>\n            <Cell>{opp.games_won}</Cell>\n            <Cell>{pm.forfeit ? 'Forfeit' : ''}</Cell>\n          </StyledRow>\n        );\n      }}\n    </Table>\n  );\n}\n\nexport default PlayerDashboard;\n","import React, { useEffect, useMemo, useState } from 'react';\nimport styled from '@emotion/styled';\nimport { Option, Select } from '@leafygreen-ui/select';\nimport { Table, TableHeader, Row, Cell } from '@leafygreen-ui/table';\nimport Toggle from '@leafygreen-ui/toggle';\nimport { Subtitle } from '@leafygreen-ui/typography';\n\nimport { emptyPlayerResult, PlayerHandicap, PlayerMatch, PlayerMatchType } from '../../../types';\n\nconst StyledPlayerSplits = styled.div`\n  margin-top: 1rem;\n  display: flex;\n  flex-direction: column;\n  width: 720px;\n  @media (max-width: 720px) {\n    max-width: 100%;\n  }\n`;\n\nconst Controls = styled.div`\n  display: flex;\n  align-items: center;\n  justify-content: space-between;\n`;\n\nconst Control = styled.div`\n  margin-left: 1rem;\n  display: flex;\n  flex-direction: column;\n`;\n\nconst Label = styled.label`\n  font-size: 12px;\n  font-weight: bold;\n`;\n\nconst StyledRow = styled(Row, {\n  shouldForwardProp: prop => prop !== 'noBorder',\n})<{ noBorder: boolean }>`\n  ${({ theme, noBorder }) =>\n    !noBorder && {\n      borderTop: `1px solid ${theme.colors.lg.gray.light1}`,\n    }}\n`;\n\ninterface Props {\n  handicaps: PlayerHandicap[];\n  matches: PlayerMatch[];\n  xref: string;\n}\n\ninterface Splits {\n  matchups: Record<number, Split>;\n  races: Record<'long' | 'short', Split>;\n  rounds: Record<PlayerMatchType, Split>;\n}\n\ninterface Split {\n  wins: number;\n  losses: number;\n  gamesWon: number;\n  gamesLost: number;\n  weeks: number[];\n}\n\nconst emptySplit = (): Split => ({ wins: 0, losses: 0, gamesWon: 0, gamesLost: 0, weeks: [] });\n\ninterface SplitData extends Split {\n  name: string;\n}\n\nfunction PlayerSplits({ handicaps, matches, xref }: Props) {\n  const handicapSet = useMemo(() => {\n    const set: Record<number, true> = {};\n    return handicaps\n      .filter(({ value }) => {\n        if (set[value]) {\n          return false;\n        }\n        set[value] = true;\n        return true;\n      })\n      .map(({ value }) => value + '');\n  }, [handicaps]);\n\n  const [selectedHandicap, setSelectedHandicap] = useState('');\n  const [showExpandedView, setShowExpandedView] = useState(false);\n  const [excludeForfeits, setExcludeForfeits] = useState(true);\n\n  const [splits, setSplits] = useState<(SplitData & { noBorder: boolean })[]>([]);\n  useEffect(() => {\n    const splits = matches.reduce<Splits>(\n      (acc, match) => {\n        const self = match.players.find(p => p.xref + '' === xref) || emptyPlayerResult();\n        const opp = match.players.find(p => p.xref + '' !== xref) || emptyPlayerResult();\n\n        if (selectedHandicap && self.handicap + '' !== selectedHandicap) {\n          return acc;\n        }\n\n        let race: keyof Splits['races'];\n        if (self.handicap + opp.handicap > 10) {\n          race = 'long';\n        } else {\n          race = 'short';\n        }\n        if (self.win) {\n          acc.races[race].wins++;\n        } else {\n          acc.races[race].losses++;\n        }\n        acc.races[race].gamesWon += self.games_won;\n        acc.races[race].gamesLost += opp.games_won;\n        acc.races[race].weeks.unshift(match.week_num);\n\n        if (self.win) {\n          acc.rounds[match.type].wins++;\n        } else {\n          acc.rounds[match.type].losses++;\n        }\n        acc.rounds[match.type].gamesWon += self.games_won;\n        acc.rounds[match.type].gamesLost += opp.games_won;\n        acc.rounds[match.type].weeks.unshift(match.week_num);\n\n        const matchup = acc.matchups[opp.handicap - self.handicap] || emptySplit();\n        if (self.win) {\n          matchup.wins++;\n        } else {\n          matchup.losses++;\n        }\n        matchup.gamesWon += self.games_won;\n        matchup.gamesLost += opp.games_won;\n        matchup.weeks.unshift(match.week_num);\n        acc.matchups[opp.handicap - self.handicap] = matchup;\n\n        return acc;\n      },\n      {\n        matchups: {},\n        races: {\n          long: emptySplit(),\n          short: emptySplit(),\n        },\n        rounds: {\n          R1: emptySplit(),\n          R2: emptySplit(),\n          TB: emptySplit(),\n        },\n      },\n    );\n\n    let matchups: SplitData[];\n    if (!showExpandedView) {\n      matchups = Object.entries(\n        Object.entries(splits.matchups).reduce(\n          (acc, [matchup, split]) => {\n            let key: keyof typeof acc;\n            if (matchup > '0') {\n              key = 'up';\n            } else if (matchup < '0') {\n              key = 'down';\n            } else {\n              key = 'even';\n            }\n\n            acc[key].wins += split.wins;\n            acc[key].losses += split.losses;\n            acc[key].gamesWon += split.gamesWon;\n            acc[key].gamesLost += split.gamesLost;\n            acc[key].weeks.push(...split.weeks);\n            acc[key].weeks.sort((w1, w2) => w1 - w2);\n\n            return acc;\n          },\n          { up: emptySplit(), even: emptySplit(), down: emptySplit() },\n        ),\n      ).map(([name, split]) => ({ name: basicMatchupDisplay(name), ...split }));\n    } else {\n      matchups = Object.entries(splits.matchups).map(([name, split]) => ({ name, ...split }));\n      matchups.sort((m1, m2) => parseInt(m2.name, 10) - parseInt(m1.name, 10));\n      matchups = matchups.map(({ name, ...matchup }) => ({ name: detailedMatchupDisplay(name), ...matchup }));\n    }\n\n    setSplits([\n      ...Object.entries(splits.races)\n        .filter(([type, split]) => split.weeks.length)\n        .map(([name, split], i) => ({ name: raceDisplay(name), ...split, noBorder: i !== 0 })),\n      ...Object.entries(splits.rounds)\n        .filter(([type, split]) => type !== 'TB' || split.weeks.length)\n        .map(([name, split], i) => ({ name: roundDisplay(name), ...split, noBorder: i !== 0 })),\n      ...matchups.filter(split => split.weeks.length).map((split, i) => ({ ...split, noBorder: i !== 0 })),\n    ]);\n  }, [matches, selectedHandicap, showExpandedView, excludeForfeits, xref]);\n\n  return (\n    <StyledPlayerSplits>\n      <Controls>\n        <Subtitle style={{ flex: 1 }}>Player Splits</Subtitle>\n        <Select\n          label=\"As Rank\"\n          placeholder=\"All\"\n          name=\"splits_handicap\"\n          style={{ width: '90px' }}\n          value={selectedHandicap}\n          onChange={val => setSelectedHandicap(val || '')}\n        >\n          {handicapSet.map(handicap => (\n            <Option key={handicap} value={handicap}>\n              {handicap}\n            </Option>\n          ))}\n        </Select>\n        <Control>\n          <Label id=\"splits_expanded_label\" htmlFor=\"splits_expanded_toggle\">\n            Detailed View\n          </Label>\n          <Toggle\n            id=\"splits_expanded_toggle\"\n            aria-labelledby=\"splits_expanded_label\"\n            checked={showExpandedView}\n            onChange={checked => setShowExpandedView(checked)}\n          />\n        </Control>\n        <Control>\n          <Label id=\"splits_forfeits_label\" htmlFor=\"splits_forfeits_toggle\">\n            Exclude Forfeits\n          </Label>\n          <Toggle\n            id=\"splits_forfeits_toggle\"\n            aria-labelledby=\"splits_forfeits_label\"\n            checked={excludeForfeits}\n            onChange={checked => setExcludeForfeits(checked)}\n          />\n        </Control>\n      </Controls>\n      <Table\n        data={splits}\n        columns={[\n          <TableHeader label=\"Split\" />,\n          <TableHeader label=\"Wins\" />,\n          <TableHeader label=\"Losses\" />,\n          <TableHeader label=\"Games For\" />,\n          <TableHeader label=\"Games Against\" />,\n          <TableHeader label=\"Weeks\" />,\n        ]}\n      >\n        {({ datum: split }) => {\n          return (\n            <StyledRow key={split.name} noBorder={split.noBorder}>\n              <Cell>{split.name}</Cell>\n              <Cell>{split.wins}</Cell>\n              <Cell>{split.losses}</Cell>\n              <Cell>{split.gamesWon}</Cell>\n              <Cell>{split.gamesLost}</Cell>\n              <Cell>{split.weeks.join(', ')}</Cell>\n            </StyledRow>\n          );\n        }}\n      </Table>\n    </StyledPlayerSplits>\n  );\n}\n\nexport default PlayerSplits;\n\nfunction basicMatchupDisplay(matchup: string) {\n  if (matchup === 'up') {\n    return 'Getting balls';\n  }\n  if (matchup === 'down') {\n    return 'Giving balls';\n  }\n  return 'Straight up';\n}\n\nfunction detailedMatchupDisplay(matchup: string) {\n  if (matchup === '0') {\n    return 'Straight up';\n  }\n\n  let prefix = 'Getting ';\n  let value = matchup;\n  if (matchup.charAt(0) === '-') {\n    prefix = 'Giving ';\n    value = matchup.substring(1);\n  }\n\n  return prefix + value;\n}\n\nfunction raceDisplay(type: string) {\n  return type.charAt(0).toUpperCase() + type.substring(1) + ' race';\n}\n\nfunction roundDisplay(type: string) {\n  if (type === 'R1') {\n    return 'Playing first';\n  }\n  if (type === 'R2') {\n    return 'Playing second';\n  }\n  return 'Fifth set';\n}\n","import React, { useEffect, useState } from 'react';\nimport { useLocation } from 'react-router-dom';\nimport styled from '@emotion/styled';\nimport { Combobox, ComboboxGroup, ComboboxOption } from '@leafygreen-ui/combobox';\n\nimport {\n  emptyPlayerHandicap,\n  emptyPlayerRecord,\n  emptyPlayerResult,\n  AmsterdamKey,\n  PlayerHandicap,\n  PlayerMatch,\n  PlayerRecord,\n  Team,\n  TeamPlayer,\n  TeamMatch,\n} from '../../../types';\n\nimport PlayerDetails from './details';\nimport PlayerMatches from './matches';\nimport PlayerSplits from './splits';\n\nconst Dashboard = styled.div`\n  padding: 0 1rem;\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n`;\n\nconst StyledCombobox = styled(Combobox)`\n  margin-bottom: 1rem;\n  max-width: 360px;\n  @media (max-width: 720px) {\n    max-width: 100%;\n  }\n`;\n\ninterface Props {\n  playerMatchesByXref: Record<string, PlayerMatch[]>;\n  playersByTeamXref: Record<number, TeamPlayer[]>;\n  teamsByXref: Record<string, Team>;\n  teamMatchesById: Record<string, TeamMatch>;\n}\n\nfunction PlayerDashboard({ playerMatchesByXref, playersByTeamXref, teamsByXref }: Props) {\n  const location = useLocation();\n  const xref = (location as any).state?.xref;\n\n  const [selectedPlayer, setSelectedPlayer] = useState<string | null>();\n  useEffect(() => {\n    setSelectedPlayer(xref);\n  }, [xref]);\n\n  const [playerMatches, setPlayerMatches] = useState<PlayerMatch[]>([]);\n  const [playerTeam, setPlayerTeam] = useState<AmsterdamKey>(emptyPlayerResult());\n  const [playerRecord, setPlayerRecord] = useState<PlayerRecord>(emptyPlayerRecord());\n  const [playerHandicaps, setPlayerHandicaps] = useState<PlayerHandicap[]>([]);\n  useEffect(() => {\n    if (!selectedPlayer) {\n      setPlayerMatches([]);\n      return;\n    }\n\n    const playerMatches = playerMatchesByXref[selectedPlayer] || [];\n    setPlayerMatches(playerMatches);\n\n    if (!playerMatches.length) {\n      return;\n    }\n\n    const reversed = [...playerMatches];\n    reversed.sort((m1, m2) => {\n      const date = m1.date.getTime() - m2.date.getTime();\n      if (date === 0) {\n        return m1.seq - m2.seq;\n      }\n      return date;\n    });\n\n    const handicaps: PlayerHandicap[] = [];\n\n    setPlayerRecord(\n      reversed.reduce((acc, match, i) => {\n        const result = match.players.find(p => p.xref + '' === selectedPlayer) || emptyPlayerResult();\n\n        if (i === 0) {\n          setPlayerTeam(result.team);\n          handicaps.push(emptyPlayerHandicap(result.handicap));\n        } else {\n          if (handicaps[0].value !== result.handicap) {\n            handicaps[0].lastWeek = reversed[i - 1].week_num;\n            handicaps.unshift(emptyPlayerHandicap(result.handicap));\n          }\n        }\n\n        if (result.win) {\n          acc.wins++;\n          if (acc.streak > 0) {\n            acc.streak++;\n          } else {\n            acc.streak = 1;\n          }\n        } else {\n          acc.losses++;\n          if (acc.streak < 0) {\n            acc.streak--;\n          } else {\n            acc.streak = -1;\n          }\n        }\n\n        return acc;\n      }, emptyPlayerRecord()),\n    );\n\n    setPlayerHandicaps(handicaps);\n  }, [selectedPlayer, playerMatchesByXref]);\n\n  return (\n    <Dashboard>\n      <StyledCombobox\n        label=\"Player Name\"\n        description=\"Choose a player to view stats\"\n        placeholder=\"Select a player...\"\n        value={selectedPlayer}\n        onChange={setSelectedPlayer}\n      >\n        {Object.entries(playersByTeamXref).map(([teamXref, players]) => (\n          <ComboboxGroup key={teamXref} label={teamsByXref[teamXref].name}>\n            {players.map(player => (\n              <ComboboxOption key={player.xref} value={player.xref + ''} displayName={player.name} />\n            ))}\n          </ComboboxGroup>\n        ))}\n      </StyledCombobox>\n      {selectedPlayer && <PlayerDetails handicaps={playerHandicaps} record={playerRecord} team={playerTeam} />}\n      {selectedPlayer && <PlayerMatches matches={playerMatches} xref={selectedPlayer} />}\n      {selectedPlayer && <PlayerSplits handicaps={playerHandicaps} matches={playerMatches} xref={selectedPlayer} />}\n    </Dashboard>\n  );\n}\n\nexport default PlayerDashboard;\n","import React from 'react';\nimport styled from '@emotion/styled';\nimport { Table, TableHeader, Row, Cell } from '@leafygreen-ui/table';\n\nimport { emptyPlayerResult, PlayerMatch } from '../../../types';\n\nconst StyledRow = styled(Row, {\n  shouldForwardProp: prop => prop !== 'win' && prop !== 'loss',\n})<{ win?: boolean; loss?: boolean }>`\n  ${({ theme, win, loss }) =>\n    win\n      ? {\n          backgroundColor: theme.colors.lg.green.light2,\n        }\n      : loss\n      ? {\n          backgroundColor: theme.colors.lg.red.light2,\n        }\n      : {}}\n`;\n\ninterface Props {\n  playerMatches: PlayerMatch[];\n  selfTeamXref: number;\n}\n\nfunction MatchView({ playerMatches, selfTeamXref }: Props) {\n  return (\n    <Table\n      data={playerMatches}\n      columns={[\n        <TableHeader label=\"Player\" />,\n        <TableHeader label=\"HCP\" />,\n        <TableHeader label=\"Games\" />,\n        <TableHeader label=\"Opponent\" />,\n        <TableHeader label=\"HCP\" />,\n        <TableHeader label=\"Games\" />,\n      ]}\n    >\n      {({ datum: pm }) => {\n        const self = pm.players.find(p => p.team.xref === selfTeamXref) || emptyPlayerResult();\n        const opp = pm.players.find(p => p.team.xref !== selfTeamXref) || emptyPlayerResult();\n        return (\n          <StyledRow key={pm._id} win={self.win} loss={self.loss}>\n            <Cell>{self.name}</Cell>\n            <Cell>{self.handicap}</Cell>\n            <Cell>{self.games_won}</Cell>\n            <Cell>{opp.name}</Cell>\n            <Cell>{opp.handicap}</Cell>\n            <Cell>{opp.games_won}</Cell>\n          </StyledRow>\n        );\n      }}\n    </Table>\n  );\n}\n\nexport default MatchView;\n","import React, { useEffect, useState } from 'react';\nimport styled from '@emotion/styled';\nimport ExpandableCard from '@leafygreen-ui/expandable-card';\nimport { H3 } from '@leafygreen-ui/typography';\n\nimport { PlayerMatch, Team, TeamMatch, TeamMatchup, TeamRecord, TeamResult } from '../../../types';\n\nimport { PlayerTeamResults } from '../player';\n\nimport MatchView from './match_view';\n\nconst emptyTeamResult = (): TeamResult => ({ xref: 0, name: '', games_won: 0, matches_won: 0 });\n\nconst Matches = styled.div`\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n  gap: 12px;\n  justify-content: center;\n  max-width: 100%;\n`;\n\ninterface Props {\n  linkToPlayers?: string;\n  playerMatchesByTeamXref: Record<number, PlayerMatch[]>;\n  team?: Team;\n  teamMatchesById: Record<string, TeamMatch>;\n  teamRecordsByXref: Record<number, TeamRecord>;\n}\n\nfunction TeamView({ linkToPlayers, playerMatchesByTeamXref, team, teamMatchesById, teamRecordsByXref }: Props) {\n  const [playerMatchesById, setPlayerMatchesById] = useState<Record<string, PlayerMatch[]>>({});\n  useEffect(() => {\n    const playerMatchesById = (playerMatchesByTeamXref[team?.xref || 0] || []).reduce<Record<string, PlayerMatch[]>>(\n      (acc, playerMatch) => ({\n        ...acc,\n        [playerMatch.match_id]: [...(acc[playerMatch.match_id] || []), playerMatch],\n      }),\n      {},\n    );\n    Object.entries(playerMatchesById).forEach(([matchId, playerMatches]) => {\n      playerMatches.sort((m1, m2) => m1.seq - m2.seq);\n      playerMatchesById[matchId] = playerMatches;\n    });\n    setPlayerMatchesById(playerMatchesById);\n  }, [team?.xref, playerMatchesByTeamXref]);\n\n  if (!team) {\n    return null;\n  }\n\n  return (\n    <>\n      <H3 style={{ marginTop: '1rem' }}>Player Results</H3>\n      <PlayerTeamResults\n        linkToPlayers={linkToPlayers}\n        playerMatches={playerMatchesByTeamXref[team.xref] || []}\n        selfTeamXref={team.xref}\n      />\n      <H3 style={{ marginTop: '1rem' }}>Team Results</H3>\n      <Matches>\n        {team.schedule.map(({ display, match_id, opp }) => {\n          const teamMatchup = newTeamMatchup(team.xref, teamMatchesById[match_id || ''] || { teams: [] });\n          return (\n            <ExpandableCard\n              key={display}\n              title={`${display}: vs. ${opp.name} (${teamRecord(teamRecordsByXref[opp.xref])})`}\n              description={!match_id ? '' : matchDescription(teamMatchup)}\n            >\n              {!match_id && (\n                <PlayerTeamResults\n                  linkToPlayers={linkToPlayers}\n                  playerMatches={playerMatchesByTeamXref[opp.xref] || []}\n                  selfTeamXref={opp.xref}\n                />\n              )}\n              {match_id && (\n                <MatchView playerMatches={playerMatchesById[match_id || ''] || []} selfTeamXref={team.xref} />\n              )}\n            </ExpandableCard>\n          );\n        })}\n      </Matches>\n    </>\n  );\n}\n\nexport default TeamView;\n\nfunction matchDescription({ self, opp }: TeamMatchup) {\n  return `${self.win ? '✅ Win' : '💩 Loss'}: ${self.matches_won}-${opp.matches_won}, ${self.games_won}-${\n    opp.games_won\n  }`;\n}\n\nfunction newTeamMatchup(selectedTeamXref: number, teamMatch: Pick<TeamMatch, 'teams'>): TeamMatchup {\n  const self = teamMatch.teams.find(t => t.xref === selectedTeamXref) || emptyTeamResult();\n  const opp = teamMatch.teams.find(t => t.xref !== selectedTeamXref) || emptyTeamResult();\n  return { self, opp };\n}\n\nfunction teamRecord(tr = { wins: 0, losses: 0 }) {\n  return `${tr.wins}-${tr.losses}`;\n}\n","import React, { useEffect, useState } from 'react';\nimport { useParams } from 'react-router-dom';\nimport styled from '@emotion/styled';\n\nimport { PlayerMatch, Team, TeamMatch, TeamRecord } from '../../../types';\n\nimport TeamHeader from './header';\nimport TeamView from './view';\n\nconst Dashboard = styled.div`\n  padding: 0 1rem;\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n`;\n\ninterface Props {\n  playerMatchesByTeamXref: Record<number, PlayerMatch[]>;\n  teamsByXref: Record<string, Team>;\n  teamMatchesById: Record<string, TeamMatch>;\n  teamRecordsByXref: Record<string, TeamRecord>;\n}\n\nfunction TeamDashboard({\n  playerMatchesByTeamXref,\n  teamsByXref,\n  teamMatchesById,\n  teamRecordsByXref,\n}: Props) {\n  const { xref } = useParams();\n  const [team, setTeam] = useState<Team>();\n  const [teamRecord, setTeamRecord] = useState<TeamRecord>();\n  useEffect(() => {\n    if (!xref) {\n      return;\n    }\n    setTeam(teamsByXref[xref]);\n    setTeamRecord(teamRecordsByXref[xref]);\n  }, [teamsByXref, teamRecordsByXref, xref]);\n  return (\n    <Dashboard>\n      <TeamHeader team={team} teamRecord={teamRecord} />\n      <TeamView\n        linkToPlayers=\"../players\"\n        playerMatchesByTeamXref={playerMatchesByTeamXref}\n        team={team}\n        teamMatchesById={teamMatchesById}\n        teamRecordsByXref={teamRecordsByXref}\n      />\n    </Dashboard>\n  );\n}\n\nexport default TeamDashboard;\n","import React, { useEffect, useState } from 'react';\nimport { useMediaQuery } from 'react-responsive';\nimport { useNavigate } from 'react-router-dom';\nimport styled from '@emotion/styled';\nimport Modal from '@leafygreen-ui/modal';\nimport { Table, TableHeader, Row, Cell } from '@leafygreen-ui/table';\nimport { H2, H3 } from '@leafygreen-ui/typography';\n\nimport { PlainButton } from '../../components';\nimport { dayOfWeek, PlayerMatch, Season, Team, TeamMatch, TeamRecord } from '../../types';\n\nimport { TeamHeader, TeamView } from './team'\n\nconst Leagues = styled.div`\n  display: flex;\n  flex-wrap: wrap;\n  justify-content: center;\n`;\n\nconst Divisions = styled.div`\n  display: flex;\n  flex-direction: column;\n  margin: 0 1rem;\n`;\n\nconst Division = styled.div`\n  display: flex;\n  flex-direction: column;\n  margin-bottom: 1rem;\n`;\n\ninterface Props {\n  season: Season;\n  playerMatches: PlayerMatch[];\n  playerMatchesByTeamXref: Record<number, PlayerMatch[]>;\n  teamsByXref: Record<number, Team>;\n  teamMatchesById: Record<string, TeamMatch>;\n  teamRecordsByXref: Record<number, TeamRecord>;\n}\n\nfunction TeamDashboard({\n  playerMatchesByTeamXref,\n  season,\n  teamsByXref,\n  teamMatchesById,\n  teamRecordsByXref,\n}: Props) {\n  const navTo = useNavigate();\n\n  const [teamXrefsByDivision, setTeamXrefsByDivision] = useState<Record<string, number[]>>({});\n  useEffect(() => {\n    setTeamXrefsByDivision(\n      Object.values(teamsByXref).reduce<Record<string, number[]>>(\n        (acc, team) => ({\n          ...acc,\n          [team.division_name]: [...(acc[team.division_name] || []), team.xref],\n        }),\n        {},\n      ),\n    );\n  }, [teamsByXref]);\n\n  const [divisions, setDivisions] = useState<Record<string, TeamRecord[]>>({});\n  useEffect(() => {\n    setDivisions(\n      Object.entries(teamXrefsByDivision).reduce((acc, [divisionName, xrefs]) => {\n        const teamRecords = xrefs.map(\n          xref => teamRecordsByXref[xref] || { xref: 0, name: '', rank: 0, wins: 0, losses: 0, pct: 0 },\n        );\n        teamRecords.sort((tr1, tr2) =>\n          tr1.wins === tr2.wins\n            ? tr1.losses === tr2.losses\n              ? tr2.pct - tr1.pct\n              : tr1.losses - tr2.losses\n            : tr2.wins - tr1.wins,\n        );\n        return {\n          ...acc,\n          [divisionName]: teamRecords.map((tr, i) => ({ ...tr, rank: i + 1 })),\n        };\n      }, {}),\n    );\n  }, [teamXrefsByDivision, teamRecordsByXref]);\n\n  const [modalTeam, setModalTeam] = useState(0);\n\n  const isMobile = useMediaQuery({ query: '(max-width: 720px)' });\n\n  return (\n    <>\n      <Leagues>\n        {season.nights.map(night => (\n          <Divisions key={night}>\n            <H2 style={{ marginBottom: '1rem' }}>{dayOfWeek(night)}</H2>\n            {season.divisions[night]!.map(divisionName => (\n              <Division key={divisionName}>\n                {divisions[divisionName] && (\n                  <>\n                    <H3>{divisionName}</H3>\n                    <Table\n                      data={divisions[divisionName]}\n                      columns={[\n                        <TableHeader label=\"Place\" />,\n                        <TableHeader label=\"Team Name\" />,\n                        <TableHeader label=\"W's\" />,\n                        <TableHeader label=\"L's\" />,\n                        <TableHeader label=\"PCT.\" />,\n                      ]}\n                    >\n                      {({ datum: ts }) => (\n                        <Row key={ts.xref}>\n                          <Cell>{ts.rank}</Cell>\n                          <Cell>\n                            <PlainButton onClick={() => (isMobile ? navTo(ts.xref + '') : setModalTeam(ts.xref))}>\n                              {ts.name}\n                            </PlainButton>\n                          </Cell>\n                          <Cell>{ts.wins}</Cell>\n                          <Cell>{ts.losses}</Cell>\n                          <Cell>{ts.pct.toFixed(3)}</Cell>\n                        </Row>\n                      )}\n                    </Table>\n                  </>\n                )}\n              </Division>\n            ))}\n          </Divisions>\n        ))}\n      </Leagues>\n      <Modal\n        open={!!modalTeam}\n        setOpen={open => {\n          if (!open) {\n            setModalTeam(0);\n          }\n        }}\n      >\n        <>\n          <TeamHeader modalView team={teamsByXref[modalTeam]} teamRecord={teamRecordsByXref[modalTeam]} />\n          <TeamView\n            playerMatchesByTeamXref={playerMatchesByTeamXref}\n            team={teamsByXref[modalTeam]}\n            teamMatchesById={teamMatchesById}\n            teamRecordsByXref={teamRecordsByXref}\n          />\n        </>\n      </Modal>\n    </>\n  );\n}\n\nexport default TeamDashboard;\n","import React, { useEffect, useMemo, useState } from 'react';\nimport { useParams } from 'react-router-dom';\nimport { Routes, Route } from 'react-router-dom';\n\nimport { LoadingSpinner } from '../../components';\nimport { AmsterdamKey, PlayerMatch, Season, Team, TeamMatch, TeamPlayer, TeamRecord } from '../../types';\n\nimport Admin from './admin';\nimport Dashboard from './dashboard';\nimport PlayerDashboard from './player';\nimport TeamDashboard from './team';\n\ninterface Props {\n  seasons: Season[];\n  loadPlayerMatches: (seasonXref: number) => Promise<PlayerMatch[]>;\n  loadTeams: (seasonXref: number) => Promise<Team[]>;\n  loadTeamMatches: (seasonXref: number) => Promise<TeamMatch[]>;\n  saveDivisions: (seasonXref: number, divisions: Season['divisions']) => Promise<void>;\n  saveTeams: (seasonXref: number, teams: Omit<Team, '_id' | 'season_xref' | 'schedule'>[]) => Promise<void>;\n}\n\ninterface MatchStats extends AmsterdamKey {\n  wins: number;\n  losses: number;\n  gamesWon: number;\n  gamesTotal: number;\n}\n\nexport const emptyMatchStats = (xref = 0, name = ''): MatchStats => ({\n  xref,\n  name,\n  wins: 0,\n  losses: 0,\n  gamesWon: 0,\n  gamesTotal: 0,\n});\n\nfunction TeamRouter({ seasons, loadPlayerMatches, loadTeams, loadTeamMatches, saveDivisions, saveTeams }: Props) {\n  const { year, term, type } = useParams();\n\n  const season = useMemo(() => {\n    return seasons.find(s => s.year + '' === year && s.term === term && s.type === type);\n  }, [seasons, year, term, type]);\n\n  const [teams, setTeams] = useState<Team[]>([]);\n  const [teamsByXref, setTeamsByXref] = useState<Record<number, Team>>({});\n  useEffect(() => {\n    if (!season) {\n      return;\n    }\n    loadTeams(season.xref).then(teams => {\n      setTeams(teams);\n      setTeamsByXref(teams.reduce((acc, team) => ({ ...acc, [team.xref]: team }), {}));\n    });\n  }, [loadTeams, season]);\n\n  const [teamMatchesById, setTeamMatchesById] = useState<Record<string, TeamMatch>>({});\n  const [teamRecordsByXref, setTeamRecordsByXref] = useState<Record<number, TeamRecord>>({});\n  useEffect(() => {\n    if (!season) {\n      return;\n    }\n    loadTeamMatches(season.xref).then(teamMatches => {\n      setTeamMatchesById(\n        teamMatches.reduce<Record<string, TeamMatch>>((acc, teamMatch) => ({ ...acc, [teamMatch._id]: teamMatch }), {}),\n      );\n\n      setTeamRecordsByXref(\n        Object.entries(\n          teamMatches.reduce<Record<number, MatchStats>>((outer, teamMatch) => {\n            var gamesTotal = 0;\n            const matchStats = teamMatch.teams.reduce<Record<number, MatchStats>>((inner, team) => {\n              const teamStats: MatchStats = outer[team.xref] || emptyMatchStats(team.xref, team.name);\n              teamStats.wins += team.win ? 1 : 0;\n              teamStats.losses += team.loss ? 1 : 0;\n              teamStats.gamesWon += team.games_won;\n              gamesTotal += team.games_won;\n              return { ...inner, [team.xref]: teamStats };\n            }, {});\n            Object.values(matchStats).forEach(teamStats => {\n              teamStats.gamesTotal += gamesTotal;\n            });\n            return { ...outer, ...matchStats };\n          }, {}),\n        ).reduce(\n          (acc, [xref, teamStats]) => ({\n            ...acc,\n            [xref]: {\n              xref: teamStats.xref,\n              name: teamStats.name,\n              rank: 0,\n              wins: teamStats.wins,\n              losses: teamStats.losses,\n              pct: teamStats.gamesWon / teamStats.gamesTotal,\n            },\n          }),\n          {},\n        ),\n      );\n    });\n  }, [loadTeamMatches, season]);\n\n  const [playerMatches, setPlayerMatches] = useState<PlayerMatch[]>([]);\n  const [playerMatchesByXref, setPlayerMatchesByXref] = useState<Record<number, PlayerMatch[]>>({});\n  const [playerMatchesByTeamXref, setPlayerMatchesByTeamXref] = useState<Record<number, PlayerMatch[]>>({});\n  const [playersByTeamXref, setPlayersByTeamXref] = useState<Record<number, TeamPlayer[]>>({});\n  useEffect(() => {\n    if (!season) {\n      return;\n    }\n    loadPlayerMatches(season.xref).then(playerMatches => {\n      setPlayerMatches(playerMatches);\n\n      const playerMatchesByXref = playerMatches.reduce<Record<number, PlayerMatch[]>>(\n        (outer, playerMatch) => ({\n          ...outer,\n          ...playerMatch.players.reduce(\n            (inner, player) => ({\n              ...inner,\n              [player.xref]: [...(outer[player.xref] || []), playerMatch],\n            }),\n            {},\n          ),\n        }),\n        {},\n      );\n      Object.values(playerMatchesByXref).forEach(playerMatches => {\n        playerMatches.sort((pm1, pm2) => {\n          const date = pm2.date.getTime() - pm1.date.getTime()\n          if (date) {\n            return date\n          }\n          return pm2.seq - pm1.seq\n        });\n      });\n      setPlayerMatchesByXref(playerMatchesByXref);\n\n      setPlayerMatchesByTeamXref(\n        playerMatches.reduce<Record<number, PlayerMatch[]>>(\n          (outer, playerMatch) => ({\n            ...outer,\n            ...playerMatch.players.reduce(\n              (inner, player) => ({\n                ...inner,\n                [player.team.xref]: [...(outer[player.team.xref] || []), playerMatch],\n              }),\n              {},\n            ),\n          }),\n          {},\n        ),\n      );\n\n      setPlayersByTeamXref(\n        Object.entries(\n          playerMatches.reduce<Record<number, Record<number, TeamPlayer>>>(\n            (outer, playerMatch) => ({\n              ...outer,\n              ...playerMatch.players.reduce(\n                (inner, player) => ({\n                  ...inner,\n                  [player.team.xref]: {\n                    ...(outer[player.team.xref] || {}),\n                    [player.xref]: player,\n                  },\n                }),\n                {},\n              ),\n            }),\n            {},\n          ),\n        ).reduce((acc, [teamXref, playersMap]) => {\n          const players = Object.values(playersMap);\n          players.sort((p1, p2) => p1.xref - p2.xref);\n          return { ...acc, [teamXref]: players };\n        }, {}),\n      );\n    });\n  }, [loadPlayerMatches, season]);\n\n  if (!season) {\n    return <LoadingSpinner />;\n  }\n  return (\n    <Routes>\n      <Route\n        path=\"/\"\n        element={\n          <Dashboard\n            season={season}\n            playerMatches={playerMatches}\n            playerMatchesByTeamXref={playerMatchesByTeamXref}\n            teamsByXref={teamsByXref}\n            teamMatchesById={teamMatchesById}\n            teamRecordsByXref={teamRecordsByXref}\n          />\n        }\n      />\n      <Route\n        path=\"admin\"\n        element={\n          <Admin\n            season={season}\n            teams={teams}\n            saveDivisions={divisions => saveDivisions(season.xref, divisions)}\n            saveTeams={teams => saveTeams(season.xref, teams)}\n          />\n        }\n      />\n      <Route\n        path=\"players\"\n        element={\n          <PlayerDashboard\n            playerMatchesByXref={playerMatchesByXref}\n            playersByTeamXref={playersByTeamXref}\n            teamsByXref={teamsByXref}\n            teamMatchesById={teamMatchesById}\n          />\n        }\n      />\n      <Route\n        path=\":xref\"\n        element={\n          <TeamDashboard\n            playerMatchesByTeamXref={playerMatchesByTeamXref}\n            teamsByXref={teamsByXref}\n            teamMatchesById={teamMatchesById}\n            teamRecordsByXref={teamRecordsByXref}\n          />\n        }\n      />\n    </Routes>\n  );\n}\n\nexport default TeamRouter;\n","import React, { useState } from 'react';\nimport Checkbox from '@leafygreen-ui/checkbox';\nimport FormFooter from '@leafygreen-ui/form-footer';\nimport { Option, Select } from '@leafygreen-ui/select';\nimport TextInput from '@leafygreen-ui/text-input';\nimport { Body } from '@leafygreen-ui/typography';\n\nimport { isLeagueType, isSeasonTerm, DayOfWeek, LeagueType, Season, SeasonTerm } from '../../types';\n\ninterface Props {\n  saveSeason: (season: Omit<Season, '_id'>) => Promise<void>;\n}\n\nfunction NewSeason({ saveSeason }: Props) {\n  const [yearInput, setYearInput] = useState('');\n  const [termInput, setTermInput] = useState('');\n  const [typeInput, setTypeInput] = useState('');\n  const [xrefInput, setXrefInput] = useState('');\n  const [name, setName] = useState('');\n  const [monday, setMonday] = useState(false);\n  const [tuesday, setTuesday] = useState(false);\n  const [wednesday, setWednesday] = useState(false);\n  const [thursday, setThursday] = useState(false);\n  const [friday, setFriday] = useState(false);\n  const [saturday, setSaturday] = useState(false);\n  const [sunday, setSunday] = useState(false);\n  const [numWeeksInput, setNumWeeksInput] = useState('');\n  const [errMsg, setErrMsg] = useState('');\n  return (\n    <>\n      <Select label=\"Year\" placeholder=\"Choose a year...\" value={yearInput} onChange={setYearInput}>\n        <Option value=\"2022\">2022</Option>\n      </Select>\n      <Select label=\"Term\" placeholder=\"Choose a term...\" value={termInput} onChange={setTermInput}>\n        <Option value=\"winter\">Winter</Option>\n        <Option value=\"spring\">Spring</Option>\n        <Option value=\"summer\">Summer</Option>\n        <Option value=\"fall\">Fall</Option>\n      </Select>\n      <Select label=\"League type\" placeholder=\"Choose a league...\" value={typeInput} onChange={setTypeInput}>\n        <Option value=\"team_8ball\">Team 8 Ball</Option>\n      </Select>\n      <TextInput\n        label=\"Amsterdam Key\"\n        description=\"Enter the Amsterdam site season id\"\n        onChange={e => setXrefInput(e.target.value)}\n        value={xrefInput}\n      />\n      <TextInput\n        label=\"Name\"\n        description=\"Enter the season name\"\n        onChange={e => setName(e.target.value)}\n        value={name}\n      />\n      <div>\n        <Body>Select the nights the league plays on</Body>\n        <div>\n          <Checkbox label=\"Monday\" checked={monday} onChange={e => setMonday(e.target.checked)} />\n          <Checkbox label=\"Tuesday\" checked={tuesday} onChange={e => setTuesday(e.target.checked)} />\n          <Checkbox label=\"Wednesday\" checked={wednesday} onChange={e => setWednesday(e.target.checked)} />\n          <Checkbox label=\"Thursday\" checked={thursday} onChange={e => setThursday(e.target.checked)} />\n          <Checkbox label=\"Friday\" checked={friday} onChange={e => setFriday(e.target.checked)} />\n          <Checkbox label=\"Saturday\" checked={saturday} onChange={e => setSaturday(e.target.checked)} />\n          <Checkbox label=\"Sunday\" checked={sunday} onChange={e => setSunday(e.target.checked)} />\n        </div>\n      </div>\n      <TextInput\n        label=\"Season length\"\n        description=\"Enter the number of weeks of the regular season\"\n        onChange={e => setNumWeeksInput(e.target.value)}\n        value={numWeeksInput}\n      />\n      <FormFooter\n        primaryButton={{\n          text: 'Save',\n          onClick: async e => {\n            e.stopPropagation();\n\n            var year = 0;\n            try {\n              year = parseInt(yearInput, 10);\n            } catch (e) {\n              setErrMsg(`invalid year value: ${e}`);\n              return;\n            }\n\n            var term: SeasonTerm = 'winter';\n            if (isSeasonTerm(termInput)) {\n              term = termInput;\n            } else {\n              setErrMsg(`invalid season term: ${termInput}`);\n              return;\n            }\n\n            var type: LeagueType = 'team_8ball';\n            if (isLeagueType(typeInput)) {\n              term = termInput;\n            } else {\n              setErrMsg(`invalid league type: ${termInput}`);\n              return;\n            }\n\n            var xref = 0;\n            try {\n              xref = parseInt(xrefInput, 10);\n            } catch (e) {\n              setErrMsg(`invalid amsterdam key: ${e}`);\n              return;\n            }\n\n            var numWeeks = 0;\n            try {\n              numWeeks = parseInt(numWeeksInput, 10);\n            } catch (e) {\n              setErrMsg(`invalid amsterdam key: ${e}`);\n              return;\n            }\n\n            const nights: DayOfWeek[] = [];\n            if (monday) {\n              nights.push('monday');\n            }\n            if (tuesday) {\n              nights.push('tuesday');\n            }\n            if (wednesday) {\n              nights.push('wednesday');\n            }\n            if (thursday) {\n              nights.push('thursday');\n            }\n            if (friday) {\n              nights.push('friday');\n            }\n            if (saturday) {\n              nights.push('saturday');\n            }\n            if (sunday) {\n              nights.push('sunday');\n            }\n\n            try {\n              await saveSeason({\n                year,\n                term,\n                type,\n                xref,\n                name,\n                num_weeks: numWeeks,\n                nights,\n                divisions: nights.reduce((acc, night) => ({ ...acc, [night]: [] }), {}),\n              });\n            } catch ({ error }) {\n              setErrMsg(`failed to save season: ${error}`);\n            }\n          },\n        }}\n        errorMessage={errMsg}\n      />\n    </>\n  );\n}\n\nexport default NewSeason;\n","import React, { useState } from 'react';\nimport { useNavigate } from 'react-router-dom';\nimport styled from '@emotion/styled';\nimport Button from '@leafygreen-ui/button';\nimport Card from '@leafygreen-ui/card';\nimport Icon from '@leafygreen-ui/icon';\nimport { Menu, MenuItem } from '@leafygreen-ui/menu';\nimport Modal from '@leafygreen-ui/modal';\nimport { H2, Subtitle } from '@leafygreen-ui/typography';\n\nimport { useAtlas } from '../../realm';\nimport { Season } from '../../types';\n\nimport NewSeason from './new_season';\n\nconst StyledPage = styled.div``;\n\nconst CardList = styled.div`\n  display: flex;\n  flex-wrap: wrap;\n`;\n\nconst CardTitle = styled.div`\n  display: flex;\n  justify-content: space-between;\n`;\n\ninterface Props {\n  seasons: Season[];\n  saveSeason: (season: Omit<Season, '_id'>) => Promise<void>;\n}\n\nfunction SeasonsDashboard({ seasons, saveSeason }: Props) {\n  const navTo = useNavigate();\n  const { data } = useAtlas();\n\n  const [modalOpen, setModalOpen] = useState(false);\n\n  if (!data) {\n    return null;\n  }\n\n  return (\n    <StyledPage>\n      <H2>Pick a season:</H2>\n      <CardList>\n        {seasons.map(season => (\n          <Card\n            style={{ minWidth: '360px' }}\n            key={season.xref}\n            onClick={() => navTo(`${season.year}/${season.term}/${season.type}`)}\n          >\n            <CardTitle>\n              <Subtitle>{season.name}</Subtitle>\n              <Menu\n                align=\"bottom\"\n                justify=\"start\"\n                trigger={\n                  <Button type=\"button\" size=\"xsmall\" onClick={e => e.stopPropagation()} name=\"options\">\n                    <Icon glyph=\"Ellipsis\" />\n                  </Button>\n                }\n              >\n                <MenuItem>Delete season</MenuItem>\n              </Menu>\n            </CardTitle>\n          </Card>\n        ))}\n        <Card style={{ minWidth: '180px' }} onClick={() => setModalOpen(true)}>\n          Create a new season...\n        </Card>\n      </CardList>\n      <Modal open={modalOpen} setOpen={setModalOpen}>\n        <NewSeason saveSeason={s => saveSeason(s).then(() => setModalOpen(false))} />\n      </Modal>\n    </StyledPage>\n  );\n}\n\nexport default SeasonsDashboard;\n","import React, { useEffect, useState } from 'react';\nimport { Routes, Route } from 'react-router-dom';\n\nimport { useAtlas } from '../../realm';\nimport { Season, Team } from '../../types';\n\nimport SeasonPage from '../season';\n\nimport Dashboard from './dashboard';\n\nfunction SeasonsRouter() {\n  const { data } = useAtlas();\n\n  const [seasons, setSeasons] = useState<Season[]>([]);\n  useEffect(() => {\n    if (!data) {\n      return;\n    }\n    data.seasons().find().then(setSeasons);\n  }, [data]);\n\n  if (!data) {\n    return null; // unreachable in a protected route\n  }\n\n  const loadPlayerMatches = (seasonXref: number) => data.playerMatches().find({ season_xref: seasonXref });\n\n  const loadTeams = (seasonXref: number) => data.teams().find({ season_xref: seasonXref });\n\n  const loadTeamMatches = (seasonXref: number) => data.teamMatches().find({ season_xref: seasonXref });\n\n  const saveDivisions = (seasonXref: number, divisions: Season['divisions']) =>\n    data\n      .seasons()\n      .updateOne({ xref: seasonXref }, { $set: { divisions } })\n      .then(({ modifiedCount }) => {\n        if (modifiedCount !== 1) {\n          throw new Error('failed to update season ' + seasonXref);\n        }\n        setSeasons(\n          seasons.map(season => {\n            if (season.xref !== seasonXref) {\n              return season;\n            }\n            return { ...season, divisions };\n          }),\n        );\n      });\n\n  const saveSeason = (season: Omit<Season, '_id'>) =>\n    data\n      .seasons()\n      .insertOne(season)\n      .then(({ insertedId }) => setSeasons([...seasons, { ...season, _id: insertedId }]));\n\n  const saveTeams = (seasonXref: number, teams: Omit<Team, '_id' | 'season_xref' | 'schedule'>[]) =>\n    data\n      .teams()\n      .insertMany(teams.map(team => ({ ...team, season_xref: seasonXref, schedule: [] })))\n      .then(() => {});\n\n  return (\n    <Routes>\n      <Route path=\"/\" element={<Dashboard seasons={seasons} saveSeason={saveSeason} />} />\n      <Route\n        path=\":year/:term/:type/*\"\n        element={\n          <SeasonPage\n            seasons={seasons}\n            loadPlayerMatches={loadPlayerMatches}\n            loadTeams={loadTeams}\n            loadTeamMatches={loadTeamMatches}\n            saveDivisions={saveDivisions}\n            saveTeams={saveTeams}\n          />\n        }\n      />\n    </Routes>\n  );\n}\n\nexport default SeasonsRouter;\n","import React from 'react';\nimport { Routes, Route } from 'react-router-dom';\nimport { useMediaQuery } from 'react-responsive';\n\nimport { LoginPage, ProtectedRoute } from './auth';\nimport { Header, MobileHeader } from './headers';\n\nimport HomePage from '../pages/home';\nimport SeasonsPage from '../pages/seasons';\n\nfunction App() {\n  const isMobile = useMediaQuery({ query: '(max-width: 720px)' });\n  return (\n    <>\n      {isMobile ? <MobileHeader /> : <Header />}\n      <Routes>\n        <Route\n          path=\"/\"\n          element={\n            <ProtectedRoute>\n              <HomePage />\n            </ProtectedRoute>\n          }\n        />\n        <Route\n          path=\"seasons/*\"\n          element={\n            <ProtectedRoute>\n              <SeasonsPage />\n            </ProtectedRoute>\n          }\n        />\n        <Route path=\"login\" element={<LoginPage />} />\n      </Routes>\n    </>\n  );\n}\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import { css } from '@emotion/react'\n\nconst CDN = 'https://d2va9gm4j17fy9.cloudfront.net';\nconst fontsURL = `${CDN}/fonts`;\n\nconst docStyles = css`\n  @font-face {\n    font-family: 'Akzidenz';\n    font-weight: normal;\n    src: url('${fontsURL}/akzidgrostdreg.eot');\n    /* IE9 Compat Modes */\n    src: url('${fontsURL}/akzidgrostdreg.eot?#iefix')\n        format('embedded-opentype'),\n      /* Pretty Modern Browsers */ url('${fontsURL}/akzidgrostdreg.ttf')\n        format('truetype'),\n      /* Safari, Android, iOS */ url('${fontsURL}/akzidgrostdreg.svg#Akzidenz')\n        format('svg');\n    /* Legacy iOS */\n  }\n\n  @font-face {\n    font-family: 'Akzidenz';\n    font-weight: 600;\n    src: url('${fontsURL}/akzidgrostdmed.eot');\n    /* IE9 Compat Modes */\n    src: url('${fontsURL}/akzidgrostdmed.eot?#iefix')\n        format('embedded-opentype'),\n      /* IE6-IE8 */ url('${fontsURL}/akzidgrostdmed.woff') format('woff'),\n      /* Pretty Modern Browsers */ url('${fontsURL}/akzidgrostdmed.ttf')\n        format('truetype'),\n      /* Safari, Android, iOS */ url('${fontsURL}/akzidgrostdmed.svg#Akzidenz')\n        format('svg');\n    /* Legacy iOS */\n  }\n\n  @font-face {\n    font-family: 'Akzidenz';\n    font-weight: bold;\n    src: url('${fontsURL}/akzidgrostdmed.eot');\n    /* IE9 Compat Modes */\n    src: url('${fontsURL}/akzidgrostdmed.eot?#iefix')\n        format('embedded-opentype'),\n      /* IE6-IE8 */ url('${fontsURL}/akzidgrostdmed.woff') format('woff'),\n      /* Pretty Modern Browsers */ url('${fontsURL}/akzidgrostdmed.ttf')\n        format('truetype'),\n      /* Safari, Android, iOS */ url('${fontsURL}/akzidgrostdmed.svg#Akzidenz')\n        format('svg');\n    /* Legacy iOS */\n  }\n\n  html {\n    font-family: 'Akzidenz', 'Helvetica Neue', Helvetica, Arial, sans-serif;\n    font-weight: normal;\n    font-style: normal;\n  }\n\n  body {\n    margin: 0;\n  }\n\n  *,\n  *:before,\n  *:after {\n    box-sizing: border-box;\n  }\n`\n\n\nconst meyersWebReset = css`\n/* http://meyerweb.com/eric/tools/css/reset/\n   v2.0 | 20110126\n   License: none (public domain)\n*/\nhtml, body, div, span, applet, object, iframe,\nh1, h2, h3, h4, h5, h6, p, blockquote, pre,\na, abbr, acronym, address, big, cite, code,\ndel, dfn, em, img, ins, kbd, q, s, samp,\nsmall, strike, strong, sub, sup, tt, var,\nb, u, i, center,\ndl, dt, dd, ol, ul, li,\nfieldset, form, label, legend,\ntable, caption, tbody, tfoot, thead, tr, th, td,\narticle, aside, canvas, details, embed,\nfigure, figcaption, footer, header, hgroup,\nmenu, nav, output, ruby, section, summary,\ntime, mark, audio, video {\n\tmargin: 0;\n\tpadding: 0;\n\tborder: 0;\n\tfont-size: 100%;\n\tfont: inherit;\n\tvertical-align: baseline;\n}\n/* HTML5 display-role reset for older browsers */\narticle, aside, details, figcaption, figure,\nfooter, header, hgroup, menu, nav, section {\n\tdisplay: block;\n}\nbody {\n\tline-height: 1;\n}\nol, ul {\n\tlist-style: none;\n}\nblockquote, q {\n\tquotes: none;\n}\nblockquote:before, blockquote:after,\nq:before, q:after {\n\tcontent: '';\n\tcontent: none;\n}\ntable {\n\tborder-collapse: collapse;\n\tborder-spacing: 0;\n}\n`;\n\n\nfunction styles() {\n  return [\n    meyersWebReset,\n    docStyles,\n  ]\n}\n\nexport default styles;\n","import { palette } from '@leafygreen-ui/palette';\n\nconst theme = {\n  colors: {\n    black: '#000000',\n    white: '#ffffff',\n    offwhite: '#fffed1',\n    grays: {\n      base: '#282c34',\n    },\n    reds: {\n      base: '#4d0a05',\n      light1: '#8a1a10',\n      light2: '#b42619',\n      light3: '#df3121',\n    },\n    blues: {\n      light1: '#61dafb',\n    },\n    lg: palette,\n  },\n  typography: {\n    fonts: {\n      code: `source-code-pro, Menlo, Monaco, Consolas, 'Courier New', monospace`,\n    },\n  },\n};\n\nexport type Theme = typeof theme;\nexport default theme;\n","import React from 'react';\nimport { Global, ThemeProvider } from '@emotion/react';\nimport LeafygreenProvider from '@leafygreen-ui/leafygreen-provider';\nimport ReactDOM from 'react-dom/client';\nimport { BrowserRouter } from 'react-router-dom';\n\nimport App from './app';\nimport { AtlasProvider, RealmProvider } from './realm';\nimport reportWebVitals from './reportWebVitals';\nimport styles from './styles';\nimport theme from './theme';\n\nconst root = ReactDOM.createRoot(document.getElementById('root') as HTMLElement);\nroot.render(\n  <React.StrictMode>\n    <BrowserRouter basename={process.env.PUBLIC_URL}>\n      <RealmProvider>\n        <AtlasProvider>\n          <LeafygreenProvider>\n            <ThemeProvider theme={theme}>\n              <Global styles={styles} />\n              <App />\n            </ThemeProvider>\n          </LeafygreenProvider>\n        </AtlasProvider>\n      </RealmProvider>\n    </BrowserRouter>\n  </React.StrictMode>,\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n// reportWebVitals(console.log);\n"],"sourceRoot":""}