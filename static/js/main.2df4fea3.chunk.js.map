{"version":3,"sources":["realm/use_realm.tsx","realm/use_atlas.tsx","app/auth/login.tsx","app/auth/protected_route.tsx","app/home/home.tsx","app/sandbox/realm.tsx","app/sandbox/logo.svg","app/sandbox/sandbox.tsx","app/app.tsx","reportWebVitals.ts","styles.ts","theme.ts","index.tsx"],"names":["RealmContext","createContext","RealmProvider","children","app","Realm","id","useState","currentUser","user","setUser","login","email","password","logIn","emailPassword","console","error","loginAnonymous","log","anonymous","logout","logOut","Provider","value","useRealm","realm","useContext","Error","AtlasContext","AtlasProvider","data","setData","useEffect","profile","mongoClient","atlasData","players","db","collection","schedule","teams","StyledLogin","styled","div","LoginContainer","LoginAnonContainer","Login","username","setUsername","setPassword","from","window","location","state","pathname","to","replace","style","marginBottom","label","placeholder","onChange","e","target","type","marginTop","variant","onClick","ProtectedRoute","useLocation","StyledMain","Home","atlas","useAtlas","setPlayers","find","then","setTeams","weeks","setWeeks","playersByKey","reduce","acc","player","key","teamsByKey","team","week","season","code","week_num","day","href","rel","UserDetail","StyledSandbox","SandboxHeader","header","theme","colors","grays","base","white","SandboxLink","a","blues","light1","sandboxLogoSpin","keyframes","SandboxLogo","img","Sandbox","src","logo","alt","Header","Title","UserInfo","leafAnimation","StyledLogo","MongoDBLogoMark","App","gridColumnStart","providerType","height","path","element","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","fontsURL","docStyles","css","meyersWebReset","styles","black","offwhite","reds","light2","light3","typography","fonts","ReactDOM","createRoot","document","getElementById","render","StrictMode","basename"],"mappings":"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","file":"static/js/main.2df4fea3.chunk.js","sourcesContent":["import React, { createContext, useContext, useState } from 'react';\nimport * as Realm from 'realm-web';\n\ninterface RealmProps {\n  login: (email: string, password: string) => Promise<Realm.User | null>;\n  loginAnonymous: () => Promise<Realm.User | null>;\n  logout: () => Promise<void>;\n  user: Realm.User | null;\n}\n\nconst RealmContext = createContext<RealmProps | null>(null);\n\ninterface RealmProviderProps {\n  children: React.ReactNode;\n}\n\nexport const RealmProvider = ({ children }: RealmProviderProps) => {\n  const app = new Realm.App({ id: 'amsterdam-ussnf' });\n\n  const [user, setUser] = useState<Realm.User | null>(app.currentUser);\n\n  const login = async (email: string, password: string) => {\n    try {\n      await app.logIn(Realm.Credentials.emailPassword(email, password));\n\n      setUser(app.currentUser);\n      return app.currentUser;\n    } catch (e) {\n      console.error('failed to login', e);\n      setUser(null);\n      return null;\n    }\n  };\n\n  const loginAnonymous = async () => {\n    try {\n      console.log('logging in anonymously');\n      await app.logIn(Realm.Credentials.anonymous());\n\n      setUser(app.currentUser);\n      return app.currentUser;\n    } catch (e) {\n      console.error('failed to login', e);\n      setUser(null);\n      return null;\n    }\n  };\n\n  const logout = async () => {\n    try {\n      if (app.currentUser) {\n        await app.currentUser.logOut();\n      }\n    } catch (e) {\n      console.error('failed to logout', e);\n    } finally {\n      setUser(null);\n    }\n  };\n\n  return <RealmContext.Provider value={{ login, loginAnonymous, logout, user }}>{children}</RealmContext.Provider>;\n};\n\nexport const useRealm = () => {\n  const realm = useContext(RealmContext);\n  if (realm === null) {\n    throw new Error('useRealm() called outside of a RealmProvider');\n  }\n  return realm;\n};\n","import React, { createContext, useContext, useEffect, useState } from 'react';\n\nimport { Player, ScheduledWeek, Team } from '../types';\n\nimport { useRealm } from './use_realm';\n\ninterface AtlasProps {\n  data: ReturnType<typeof atlasData> | null;\n}\n\nconst AtlasContext = createContext<AtlasProps | null>(null);\n\ninterface AtlasProviderProps {\n  children: React.ReactNode;\n}\n\nexport const AtlasProvider = ({ children }: AtlasProviderProps) => {\n  const { user } = useRealm();\n\n  const [data, setData] = useState<ReturnType<Realm.User['mongoClient']> | null>(null);\n\n  useEffect(() => {\n    console.log('on user effect...setting data');\n    if (user === null) {\n      return;\n    }\n    console.log(user);\n    console.log(user.profile);\n    setData(user.mongoClient('data'));\n  }, [user]);\n\n  return <AtlasContext.Provider value={{ data: atlasData(data) }}>{children}</AtlasContext.Provider>;\n};\n\nexport const useAtlas = () => {\n  const atlas = useContext(AtlasContext);\n  if (atlas === null) {\n    throw new Error('useAtlas() called outside of a AtlasProvider');\n  }\n  return atlas;\n};\n\nfunction atlasData(data: ReturnType<Realm.User['mongoClient']> | null) {\n  if (!data) {\n    return null;\n  }\n  return {\n    players: () => data.db('amsterdam').collection<Player>('players'),\n    schedule: () => data.db('amsterdam').collection<ScheduledWeek>('schedule'),\n    teams: () => data.db('amsterdam').collection<Team>('teams'),\n  };\n}\n","import React, { useState } from 'react';\nimport styled from '@emotion/styled';\nimport Button from '@leafygreen-ui/button';\nimport TextInput from '@leafygreen-ui/text-input';\nimport { Body } from '@leafygreen-ui/typography';\nimport { Navigate } from 'react-router-dom';\n\nimport { useRealm } from '../../realm';\n\nconst StyledLogin = styled.div`\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n`;\n\nconst LoginContainer = styled.div`\n  min-width: 360px;\n  padding: 1rem;\n  border: 1px solid;\n`;\n\nconst LoginAnonContainer = styled.div`\n  min-width: 360px;\n  padding: 0 1rem 1rem 1rem;\n  margin-top: 0.5rem;\n`;\n\nfunction Login() {\n  const [username, setUsername] = useState('');\n  const [password, setPassword] = useState('');\n\n  const { login, loginAnonymous, user } = useRealm();\n\n  let from = (window.location as any).state?.from?.pathname || '/';\n\n  if (user) {\n    return <Navigate to={from} replace />;\n  }\n\n  return (\n    <StyledLogin>\n      <LoginContainer>\n        <Body style={{ marginBottom: '1rem' }}>Please log in using your credentials</Body>\n        <TextInput\n          label=\"Username\"\n          placeholder=\"your.email@example.com\"\n          onChange={e => {\n            setUsername(e.target.value);\n          }}\n          value={username}\n        />\n        <TextInput\n          label=\"Password\"\n          type=\"password\"\n          onChange={e => {\n            setPassword(e.target.value);\n          }}\n          value={password}\n        />\n        <Button style={{ marginTop: '1rem' }} variant=\"primary\" onClick={() => login(username, password)}>\n          Login\n        </Button>\n      </LoginContainer>\n      <LoginAnonContainer>\n        <Body style={{ marginBottom: '0.5rem' }}>Or log in as a guest</Body>\n        <Button variant=\"primaryOutline\" onClick={() => loginAnonymous()}>\n          Login Anonymously\n        </Button>\n      </LoginAnonContainer>\n    </StyledLogin>\n  );\n}\n\nexport default Login;\n","import React from 'react';\nimport { useLocation, Navigate } from 'react-router-dom';\n\nimport { useRealm } from '../../realm';\n\ninterface Props {\n  children: JSX.Element;\n}\n\nfunction ProtectedRoute({ children }: Props) {\n  let { user } = useRealm();\n  let location = useLocation();\n\n  if (!user) {\n    return <Navigate to=\"/login\" state={{ from: location }} replace />;\n  }\n\n  return children;\n}\n\nexport default ProtectedRoute;\n","import React, { useEffect, useState } from 'react';\nimport styled from '@emotion/styled';\nimport Button from '@leafygreen-ui/button';\n\nimport { useAtlas } from '../../realm';\nimport { Player, ScheduledWeek, Team } from '../../types';\n\nconst StyledMain = styled.div`\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n  gap: 12px;\n  justify-content: center;\n`;\n\nfunction Home() {\n  const { data } = useAtlas();\n\n  const [players, setPlayers] = useState<Player[]>([]);\n  useEffect(() => {\n    if (!data) {\n      return;\n    }\n    data.players().find().then(setPlayers);\n  }, [data]);\n\n  const [teams, setTeams] = useState<Team[]>([]);\n  useEffect(() => {\n    if (!data) {\n      return;\n    }\n    data.teams().find().then(setTeams);\n  }, [data]);\n\n  const [weeks, setWeeks] = useState<ScheduledWeek[]>([]);\n  useEffect(() => {\n    if (!data) {\n      return;\n    }\n    data.schedule().find().then(setWeeks);\n  }, [data]);\n\n  if (!data) {\n    return null;\n  }\n\n  const playersByKey = players.reduce((acc, player) => ({ ...acc, [player.key]: player }), {});\n\n  const teamsByKey = teams.reduce((acc, team) => ({ ...acc, [team.key]: team }), {});\n\n  const schedule = weeks.reduce<Record<number, Record<number, Record<string, ScheduledWeek>>>>(\n    (acc, week) => ({\n      ...acc,\n      [week.season.code]: {\n        ...(acc[week.season.code] || {}),\n        [week.week_num]: {\n          ...((acc[week.season.code] || {})[week.week_num] || {}),\n          [week.season.day]: week,\n        },\n      },\n    }),\n    {},\n  );\n\n  console.log(playersByKey);\n\n  console.log(teamsByKey);\n\n  console.log(schedule);\n\n  return (\n    <StyledMain>\n      <Button variant=\"primary\" href=\"https://mongodb.design\" rel=\"noopener noreferrer\">\n        Read the Leafygreen Docs\n      </Button>\n    </StyledMain>\n  );\n}\n\nexport default Home;\n","import React from 'react';\nimport * as Realm from 'realm-web';\n\nimport { useRealm } from '../../realm';\n\nexport const UserDetail = ({ user }: { user: Realm.User }) => {\n  return (\n    <div>\n      <h1>Logged in with anonymous id: {user.id}</h1>\n    </div>\n  );\n};\n\nexport const Login = () => {\n  const { loginAnonymous } = useRealm();\n  return <button onClick={loginAnonymous}>Log In</button>;\n};\n","export default __webpack_public_path__ + \"static/media/logo.6ce24c58.svg\";","import React from 'react';\nimport { keyframes } from '@emotion/react';\nimport styled from '@emotion/styled';\n\nimport { useRealm } from '../../realm';\n\nimport { Login, UserDetail } from './realm';\n\nimport logo from './logo.svg';\n\nconst StyledSandbox = styled.div`\n  text-align: center;\n`;\n\nconst SandboxHeader = styled.header`\n  background-color: ${({ theme }) => theme.colors.grays.base};\n  min-height: 100vh;\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n  justify-content: center;\n  font-size: calc(10px + 2vmin);\n  color: ${({ theme }) => theme.colors.white};\n`;\n\nconst SandboxLink = styled.a`\n  color: ${({ theme }) => theme.colors.blues.light1};\n`;\n\nconst sandboxLogoSpin = keyframes`\n  from {\n    transform: rotate(0deg);\n  }\n  to {\n    transform: rotate(360deg);\n  }\n`;\n\nconst SandboxLogo = styled.img`\n  height: 40vmin;\n  pointer-events: none;\n  @media (prefers-reduced-motion: no-preference) {\n    animation: ${sandboxLogoSpin} infinite 20s linear;\n  }\n`;\n\nfunction Sandbox() {\n  const { user } = useRealm();\n  return (\n    <StyledSandbox>\n      <SandboxHeader>\n        <SandboxLogo src={logo} alt=\"logo\" />\n        <p>\n          Edit <code>src/sandbox/sandbox.tsx</code> and save to reload.\n        </p>\n        <SandboxLink href=\"https://reactjs.org\" target=\"_blank\" rel=\"noopener noreferrer\">\n          Learn React\n        </SandboxLink>\n        {user ? <UserDetail user={user} /> : <Login />}\n      </SandboxHeader>\n    </StyledSandbox>\n  );\n}\n\nexport default Sandbox;\n","import React from 'react';\nimport { keyframes } from '@emotion/react';\nimport styled from '@emotion/styled';\nimport Button from '@leafygreen-ui/button';\nimport { MongoDBLogoMark } from '@leafygreen-ui/logo';\nimport { Body, H1 } from '@leafygreen-ui/typography';\nimport { Routes, Route } from 'react-router-dom';\n\nimport { useRealm } from '../realm';\n\nimport { Login, ProtectedRoute } from './auth';\nimport Home from './home';\nimport Sandbox from './sandbox';\n\nconst Header = styled.header`\n  text-align: center;\n`;\n\nconst Title = styled.div`\n  display: grid;\n  grid-template-columns: 1fr auto 1fr;\n  grid-column-gap: 5px;\n  justify-items: center;\n`;\n\nconst UserInfo = styled.div`\n  margin-left: auto;\n  text-align: right;\n  padding-right: 0.5rem;\n`;\n\nconst leafAnimation = keyframes`\n  from {\n    transform: rotate(-5deg);\n  }\n  to {\n    transform: rotate(5deg);\n  }\n`;\n\nconst StyledLogo = styled(MongoDBLogoMark)`\n  display: inline-block;\n  margin: 24px;\n  animation: ${leafAnimation} 3s infinite alternate-reverse ease-in-out;\n  transform-origin: 50% 100%;\n`;\n\nfunction App() {\n  const { logout, user } = useRealm();\n  return (\n    <>\n      <Header>\n        <Title>\n          <H1 style={{ gridColumnStart: 2 }}>Amsterdam Billiards League Site</H1>\n          {user && (\n            <UserInfo>\n              <Body>{`Logged in as ${\n                user.providerType === 'anon-user' ? 'guest' : user.profile.email || user.id\n              }`}</Body>\n              <Button variant=\"primaryOutline\" onClick={logout}>\n                Logout\n              </Button>\n            </UserInfo>\n          )}\n        </Title>\n        <StyledLogo height={98} />\n      </Header>\n      <Routes>\n        <Route\n          path=\"/\"\n          element={\n            <ProtectedRoute>\n              <Home />\n            </ProtectedRoute>\n          }\n        />\n        <Route path=\"login\" element={<Login />} />\n        <Route path=\"sandbox\" element={<Sandbox />} />\n      </Routes>\n    </>\n  );\n}\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import { css } from '@emotion/react'\n\nconst CDN = 'https://d2va9gm4j17fy9.cloudfront.net';\nconst fontsURL = `${CDN}/fonts`;\n\nconst docStyles = css`\n  @font-face {\n    font-family: 'Akzidenz';\n    font-weight: normal;\n    src: url('${fontsURL}/akzidgrostdreg.eot');\n    /* IE9 Compat Modes */\n    src: url('${fontsURL}/akzidgrostdreg.eot?#iefix')\n        format('embedded-opentype'),\n      /* Pretty Modern Browsers */ url('${fontsURL}/akzidgrostdreg.ttf')\n        format('truetype'),\n      /* Safari, Android, iOS */ url('${fontsURL}/akzidgrostdreg.svg#Akzidenz')\n        format('svg');\n    /* Legacy iOS */\n  }\n\n  @font-face {\n    font-family: 'Akzidenz';\n    font-weight: 600;\n    src: url('${fontsURL}/akzidgrostdmed.eot');\n    /* IE9 Compat Modes */\n    src: url('${fontsURL}/akzidgrostdmed.eot?#iefix')\n        format('embedded-opentype'),\n      /* IE6-IE8 */ url('${fontsURL}/akzidgrostdmed.woff') format('woff'),\n      /* Pretty Modern Browsers */ url('${fontsURL}/akzidgrostdmed.ttf')\n        format('truetype'),\n      /* Safari, Android, iOS */ url('${fontsURL}/akzidgrostdmed.svg#Akzidenz')\n        format('svg');\n    /* Legacy iOS */\n  }\n\n  @font-face {\n    font-family: 'Akzidenz';\n    font-weight: bold;\n    src: url('${fontsURL}/akzidgrostdmed.eot');\n    /* IE9 Compat Modes */\n    src: url('${fontsURL}/akzidgrostdmed.eot?#iefix')\n        format('embedded-opentype'),\n      /* IE6-IE8 */ url('${fontsURL}/akzidgrostdmed.woff') format('woff'),\n      /* Pretty Modern Browsers */ url('${fontsURL}/akzidgrostdmed.ttf')\n        format('truetype'),\n      /* Safari, Android, iOS */ url('${fontsURL}/akzidgrostdmed.svg#Akzidenz')\n        format('svg');\n    /* Legacy iOS */\n  }\n\n  html {\n    font-family: 'Akzidenz', 'Helvetica Neue', Helvetica, Arial, sans-serif;\n    font-weight: normal;\n    font-style: normal;\n  }\n\n  body {\n    margin: 0;\n  }\n\n  *,\n  *:before,\n  *:after {\n    box-sizing: border-box;\n  }\n`\n\n\nconst meyersWebReset = css`\n/* http://meyerweb.com/eric/tools/css/reset/\n   v2.0 | 20110126\n   License: none (public domain)\n*/\nhtml, body, div, span, applet, object, iframe,\nh1, h2, h3, h4, h5, h6, p, blockquote, pre,\na, abbr, acronym, address, big, cite, code,\ndel, dfn, em, img, ins, kbd, q, s, samp,\nsmall, strike, strong, sub, sup, tt, var,\nb, u, i, center,\ndl, dt, dd, ol, ul, li,\nfieldset, form, label, legend,\ntable, caption, tbody, tfoot, thead, tr, th, td,\narticle, aside, canvas, details, embed,\nfigure, figcaption, footer, header, hgroup,\nmenu, nav, output, ruby, section, summary,\ntime, mark, audio, video {\n\tmargin: 0;\n\tpadding: 0;\n\tborder: 0;\n\tfont-size: 100%;\n\tfont: inherit;\n\tvertical-align: baseline;\n}\n/* HTML5 display-role reset for older browsers */\narticle, aside, details, figcaption, figure,\nfooter, header, hgroup, menu, nav, section {\n\tdisplay: block;\n}\nbody {\n\tline-height: 1;\n}\nol, ul {\n\tlist-style: none;\n}\nblockquote, q {\n\tquotes: none;\n}\nblockquote:before, blockquote:after,\nq:before, q:after {\n\tcontent: '';\n\tcontent: none;\n}\ntable {\n\tborder-collapse: collapse;\n\tborder-spacing: 0;\n}\n`;\n\n\nfunction styles() {\n  return [\n    meyersWebReset,\n    docStyles,\n  ]\n}\n\nexport default styles;\n","const theme = {\n  colors: {\n    black: '#000000',\n    white: '#ffffff',\n    offwhite: '#fffed1',\n    grays: {\n      base: '#282c34',\n    },\n    reds: {\n      base: '#4d0a05',\n      light1: '#8a1a10',\n      light2: '#b42619',\n      light3: '#df3121',\n    },\n    blues: {\n      light1: '#61dafb',\n    },\n  },\n  typography: {\n    fonts: {\n      code: `source-code-pro, Menlo, Monaco, Consolas, 'Courier New', monospace`,\n    },\n  },\n};\n\nexport type Theme = typeof theme;\nexport default theme;\n","import React from 'react';\nimport { Global, ThemeProvider } from '@emotion/react';\nimport LeafygreenProvider from '@leafygreen-ui/leafygreen-provider';\nimport ReactDOM from 'react-dom/client';\nimport { BrowserRouter } from 'react-router-dom';\n\nimport App from './app';\nimport { AtlasProvider, RealmProvider } from './realm';\nimport reportWebVitals from './reportWebVitals';\nimport styles from './styles';\nimport theme from './theme';\n\nconst root = ReactDOM.createRoot(document.getElementById('root') as HTMLElement);\nroot.render(\n  <React.StrictMode>\n    <BrowserRouter basename=\"/amsterdam\">\n      <RealmProvider>\n        <AtlasProvider>\n          <LeafygreenProvider>\n            <ThemeProvider theme={theme}>\n              <Global styles={styles} />\n              <App />\n            </ThemeProvider>\n          </LeafygreenProvider>\n        </AtlasProvider>\n      </RealmProvider>\n    </BrowserRouter>\n  </React.StrictMode>,\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals(console.log);\n"],"sourceRoot":""}