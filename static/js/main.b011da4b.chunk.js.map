{"version":3,"sources":["app/home/home.tsx","realm/use_app.tsx","app/sandbox/realm.tsx","app/sandbox/logo.svg","app/sandbox/sandbox.tsx","app/app.tsx","reportWebVitals.ts","styles.ts","theme.ts","index.tsx"],"names":["StyledHeader","styled","div","StyledMain","leafAnimation","keyframes","StyledLogo","MongoDBLogoMark","Home","height","variant","href","rel","RealmContext","createContext","RealmProvider","children","useState","app","setApp","useEffect","Realm","id","Provider","value","UserDetail","user","Login","setUser","useContext","loginAnonymous","logIn","anonymous","onClick","StyledSandbox","SandboxHeader","header","theme","colors","grays","base","white","SandboxLink","a","blues","light1","sandboxLogoSpin","SandboxLogo","img","Sandbox","src","logo","alt","target","App","path","element","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","fontsURL","docStyles","css","meyersWebReset","styles","black","offwhite","reds","light2","light3","typography","fonts","code","ReactDOM","createRoot","document","getElementById","render","StrictMode","basename","console","log"],"mappings":"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","file":"static/js/main.b011da4b.chunk.js","sourcesContent":["import React from 'react';\nimport { keyframes } from '@emotion/react';\nimport styled from '@emotion/styled';\nimport { MongoDBLogoMark } from '@leafygreen-ui/logo';\nimport Button from '@leafygreen-ui/button';\nimport { H1 } from '@leafygreen-ui/typography';\n\nconst StyledHeader = styled.div`\n  text-align: center;\n`;\n\nconst StyledMain = styled.div`\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n  gap: 12px;\n  justify-content: center;\n`;\n\nconst leafAnimation = keyframes`\n  from {\n    transform: rotate(-5deg);\n  }\n  to {\n    transform: rotate(5deg);\n  }\n`;\n\nconst StyledLogo = styled(MongoDBLogoMark)`\n  display: inline-block;\n  margin: 24px;\n  animation: ${leafAnimation} 3s infinite alternate-reverse ease-in-out;\n  transform-origin: 50% 100%;\n`;\n\nfunction Home() {\n  return (\n    <>\n      <StyledHeader>\n        <H1>Amsterdam Billiards League Site</H1>\n      </StyledHeader>\n      <StyledMain>\n        <StyledLogo height={196} />\n        <Button variant=\"primary\" href=\"https://mongodb.design\" rel=\"noopener noreferrer\">\n          Read the Leafygreen Docs\n        </Button>\n      </StyledMain>\n    </>\n  );\n}\n\nexport default Home;\n","import React, { createContext, useContext, useEffect, useState } from 'react';\nimport * as Realm from 'realm-web';\n\nconst RealmContext = createContext<{ app?: Realm.App }>({});\n\ninterface RealmProviderProps {\n  children: React.ReactNode;\n}\n\nexport const RealmProvider = ({ children }: RealmProviderProps) => {\n  const [app, setApp] = useState<Realm.App>();\n\n  useEffect(() => {\n    setApp(new Realm.App({ id: 'amsterdam-ussnf' }));\n  }, []);\n\n  return <RealmContext.Provider value={{ app }}>{children}</RealmContext.Provider>;\n};\n\nexport const useRealm = () => useContext(RealmContext);\n","import React from 'react';\nimport * as Realm from 'realm-web';\n\nimport { useRealm } from '../../realm';\n\nexport const UserDetail = ({ user }: { user: Realm.User }) => {\n  return (\n    <div>\n      <h1>Logged in with anonymous id: {user.id}</h1>\n    </div>\n  );\n};\n\n// Create a component that lets an anonymous user log in\ntype LoginProps = {\n  setUser: (user: Realm.User) => void;\n};\n\nexport const Login = ({ setUser }: LoginProps) => {\n  const { app } = useRealm();\n  if (!app) {\n    return null;\n  }\n\n  const loginAnonymous = async () => {\n    const user: Realm.User = await app.logIn(Realm.Credentials.anonymous()) as any;\n    setUser(user);\n  };\n\n  return <button onClick={loginAnonymous}>Log In</button>;\n};\n","export default __webpack_public_path__ + \"static/media/logo.6ce24c58.svg\";","import React, { useState } from 'react';\nimport { keyframes } from '@emotion/react';\nimport styled from '@emotion/styled';\nimport * as Realm from 'realm-web';\n\nimport { Login, UserDetail } from './realm';\n\nimport logo from './logo.svg';\n\nconst StyledSandbox = styled.div`\n  text-align: center;\n`;\n\nconst SandboxHeader = styled.header`\n  background-color: ${({ theme }) => theme.colors.grays.base};\n  min-height: 100vh;\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n  justify-content: center;\n  font-size: calc(10px + 2vmin);\n  color: ${({ theme }) => theme.colors.white};\n`;\n\nconst SandboxLink = styled.a`\n  color: ${({ theme }) => theme.colors.blues.light1};\n`;\n\nconst sandboxLogoSpin = keyframes`\n  from {\n    transform: rotate(0deg);\n  }\n  to {\n    transform: rotate(360deg);\n  }\n`;\n\nconst SandboxLogo = styled.img`\n  height: 40vmin;\n  pointer-events: none;\n  @media (prefers-reduced-motion: no-preference) {\n    animation: ${sandboxLogoSpin} infinite 20s linear;\n  }\n`;\n\nfunction Sandbox() {\n  const [user, setUser] = useState<Realm.User>();\n  return (\n    <StyledSandbox>\n      <SandboxHeader>\n        <SandboxLogo src={logo} alt=\"logo\" />\n        <p>\n          Edit <code>src/sandbox/sandbox.tsx</code> and save to reload.\n        </p>\n        <SandboxLink href=\"https://reactjs.org\" target=\"_blank\" rel=\"noopener noreferrer\">\n          Learn React\n        </SandboxLink>\n        {user ? <UserDetail user={user} /> : <Login setUser={setUser} />}\n      </SandboxHeader>\n    </StyledSandbox>\n  );\n}\n\nexport default Sandbox;\n","import React from 'react';\nimport { Routes, Route } from 'react-router-dom';\n\nimport Home from './home';\nimport Sandbox from './sandbox';\n\nfunction App() {\n  return (\n    <Routes>\n      <Route path=\"/\" element={<Home />} />\n      <Route path=\"sandbox\" element={<Sandbox />} />\n    </Routes>\n  );\n}\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import { css } from '@emotion/react'\n\nconst CDN = 'https://d2va9gm4j17fy9.cloudfront.net';\nconst fontsURL = `${CDN}/fonts`;\n\nconst docStyles = css`\n  @font-face {\n    font-family: 'Akzidenz';\n    font-weight: normal;\n    src: url('${fontsURL}/akzidgrostdreg.eot');\n    /* IE9 Compat Modes */\n    src: url('${fontsURL}/akzidgrostdreg.eot?#iefix')\n        format('embedded-opentype'),\n      /* Pretty Modern Browsers */ url('${fontsURL}/akzidgrostdreg.ttf')\n        format('truetype'),\n      /* Safari, Android, iOS */ url('${fontsURL}/akzidgrostdreg.svg#Akzidenz')\n        format('svg');\n    /* Legacy iOS */\n  }\n\n  @font-face {\n    font-family: 'Akzidenz';\n    font-weight: 600;\n    src: url('${fontsURL}/akzidgrostdmed.eot');\n    /* IE9 Compat Modes */\n    src: url('${fontsURL}/akzidgrostdmed.eot?#iefix')\n        format('embedded-opentype'),\n      /* IE6-IE8 */ url('${fontsURL}/akzidgrostdmed.woff') format('woff'),\n      /* Pretty Modern Browsers */ url('${fontsURL}/akzidgrostdmed.ttf')\n        format('truetype'),\n      /* Safari, Android, iOS */ url('${fontsURL}/akzidgrostdmed.svg#Akzidenz')\n        format('svg');\n    /* Legacy iOS */\n  }\n\n  @font-face {\n    font-family: 'Akzidenz';\n    font-weight: bold;\n    src: url('${fontsURL}/akzidgrostdmed.eot');\n    /* IE9 Compat Modes */\n    src: url('${fontsURL}/akzidgrostdmed.eot?#iefix')\n        format('embedded-opentype'),\n      /* IE6-IE8 */ url('${fontsURL}/akzidgrostdmed.woff') format('woff'),\n      /* Pretty Modern Browsers */ url('${fontsURL}/akzidgrostdmed.ttf')\n        format('truetype'),\n      /* Safari, Android, iOS */ url('${fontsURL}/akzidgrostdmed.svg#Akzidenz')\n        format('svg');\n    /* Legacy iOS */\n  }\n\n  html {\n    font-family: 'Akzidenz', 'Helvetica Neue', Helvetica, Arial, sans-serif;\n    font-weight: normal;\n    font-style: normal;\n  }\n\n  body {\n    margin: 0;\n  }\n\n  *,\n  *:before,\n  *:after {\n    box-sizing: border-box;\n  }\n`\n\n\nconst meyersWebReset = css`\n/* http://meyerweb.com/eric/tools/css/reset/\n   v2.0 | 20110126\n   License: none (public domain)\n*/\nhtml, body, div, span, applet, object, iframe,\nh1, h2, h3, h4, h5, h6, p, blockquote, pre,\na, abbr, acronym, address, big, cite, code,\ndel, dfn, em, img, ins, kbd, q, s, samp,\nsmall, strike, strong, sub, sup, tt, var,\nb, u, i, center,\ndl, dt, dd, ol, ul, li,\nfieldset, form, label, legend,\ntable, caption, tbody, tfoot, thead, tr, th, td,\narticle, aside, canvas, details, embed,\nfigure, figcaption, footer, header, hgroup,\nmenu, nav, output, ruby, section, summary,\ntime, mark, audio, video {\n\tmargin: 0;\n\tpadding: 0;\n\tborder: 0;\n\tfont-size: 100%;\n\tfont: inherit;\n\tvertical-align: baseline;\n}\n/* HTML5 display-role reset for older browsers */\narticle, aside, details, figcaption, figure,\nfooter, header, hgroup, menu, nav, section {\n\tdisplay: block;\n}\nbody {\n\tline-height: 1;\n}\nol, ul {\n\tlist-style: none;\n}\nblockquote, q {\n\tquotes: none;\n}\nblockquote:before, blockquote:after,\nq:before, q:after {\n\tcontent: '';\n\tcontent: none;\n}\ntable {\n\tborder-collapse: collapse;\n\tborder-spacing: 0;\n}\n`;\n\n\nfunction styles() {\n  return [\n    meyersWebReset,\n    docStyles,\n  ]\n}\n\nexport default styles;\n","const theme = {\n  colors: {\n    black: '#000000',\n    white: '#ffffff',\n    offwhite: '#fffed1',\n    grays: {\n      base: '#282c34',\n    },\n    reds: {\n      base: '#4d0a05',\n      light1: '#8a1a10',\n      light2: '#b42619',\n      light3: '#df3121',\n    },\n    blues: {\n      light1: '#61dafb',\n    },\n  },\n  typography: {\n    fonts: {\n      code: `source-code-pro, Menlo, Monaco, Consolas, 'Courier New', monospace`,\n    },\n  },\n};\n\nexport type Theme = typeof theme;\nexport default theme;\n","import React from 'react';\nimport { Global, ThemeProvider } from '@emotion/react';\nimport LeafygreenProvider from '@leafygreen-ui/leafygreen-provider';\nimport ReactDOM from 'react-dom/client';\nimport { BrowserRouter } from 'react-router-dom';\n\nimport App from './app';\nimport { RealmProvider } from './realm';\nimport reportWebVitals from './reportWebVitals';\nimport styles from './styles';\nimport theme from './theme';\n\nconst root = ReactDOM.createRoot(document.getElementById('root') as HTMLElement);\nroot.render(\n  <React.StrictMode>\n    <BrowserRouter basename=\"/amsterdam\">\n      <RealmProvider>\n        <LeafygreenProvider>\n          <ThemeProvider theme={theme}>\n            <Global styles={styles} />\n            <App />\n          </ThemeProvider>\n        </LeafygreenProvider>\n      </RealmProvider>\n    </BrowserRouter>\n  </React.StrictMode>,\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals(console.log);\n"],"sourceRoot":""}