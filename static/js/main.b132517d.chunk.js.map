{"version":3,"sources":["realm/use_realm.tsx","realm/use_atlas.tsx","app/auth/login.tsx","app/auth/protected_route.tsx","app/logo.tsx","app/header.tsx","app/header_mobile.tsx","app/home/home.tsx","app/players/players.tsx","app/sandbox/realm.tsx","app/sandbox/logo.svg","app/sandbox/sandbox.tsx","components/page_content.tsx","types/amsterdam.ts","types/season.ts","app/seasons/season_admin.tsx","app/seasons/match_table.tsx","types/player_match.ts","app/seasons/player_results.tsx","app/seasons/team_results.tsx","app/seasons/season_standings.tsx","app/seasons/season_dashboard.tsx","app/seasons/new_season_form.tsx","app/seasons/seasons_dashboard.tsx","app/seasons/index.tsx","app/standings/standings.tsx","app/team/match.tsx","app/team/team.tsx","app/app.tsx","reportWebVitals.ts","styles.ts","theme.ts","index.tsx"],"names":["RealmContext","createContext","RealmProvider","children","app","Realm","id","useState","currentUser","user","setUser","login","email","password","logIn","emailPassword","console","error","loginAnonymous","anonymous","logout","logOut","Provider","value","useRealm","realm","useContext","Error","AtlasContext","AtlasProvider","data","setData","useEffect","mongoClient","atlasData","useAtlas","atlas","players","db","collection","seasons","teams","teamMatches","playerMatches","StyledLogin","styled","div","LoginContainer","LoginAnonContainer","LoginPage","username","setUsername","setPassword","from","window","location","state","pathname","to","replace","style","marginBottom","label","placeholder","onChange","e","target","type","marginTop","variant","onClick","ProtectedRoute","useLocation","leafAnimation","keyframes","StyledLogo","MongoDBLogoMark","Logo","height","StyledHeader","NavLinks","ul","UserInfo","Header","margin","textDecoration","textAlign","providerType","profile","header","menuOpen","setMenuOpen","flex","align","justify","open","trigger","size","glyph","href","description","StyledMain","StyledOrderedList","ol","StyledUnorderedList","HomePage","rel","PlayersPage","selectedSeason","setSelectedSeason","teamResults","setTeamResults","playerResults","setPlayerResults","Promise","all","find","season_xref","xref","then","Object","values","reduce","acc","teamMatch","leftTeam","name","totalGames","wins","losses","total","totalMatches","weeklyWins","weeklyLosses","rightTeam","games_won","matches_won","win","loss","pm","playerMatch","log","width","val","season","map","UserDetail","Login","StyledSandbox","SandboxHeader","theme","colors","grays","base","white","SandboxLink","a","blues","light1","sandboxLogoSpin","SandboxLogo","img","Sandbox","src","logo","alt","Container","PageContent","dayOfWeek","v","charAt","toUpperCase","substring","isSeasonTerm","NightContainer","NightControl","NightHeader","TeamInputs","SeasonAdmin","saveDivisions","saveTeams","navTo","useNavigate","divisions","tot","divs","length","divisionsOpen","setDivisionsOpen","divisionsErrMsg","setDivisionsErrMsg","nights","night","existingDivisions","setDivisions","teamsOepn","setTeamsOpen","teamsErrMsg","setTeamsErrMsg","teamsByDivision","setTeamsByDivision","entries","inner","division","existingTeams","filter","t","division_name","title","isOpen","idx","i","primaryButton","text","errorMessage","divisionName","team","flatMap","divisionTeams","parseInt","StyledRow","Row","backgroundColor","lg","green","light2","red","Match","selfTeamXref","columns","datum","self","p","handicap","opp","_id","PlayerResults","playerStatsByWeek","useMemo","week_num","gamesWon","gamesLost","doubles","gamePct","playerStats","statsByWeek","stats","forEach","weeklyStats","isDouble","sort","p1","p2","pr","toFixed","Matches","TeamResults","setOpen","teamMatchesById","playerMatchesById","match_id","teamMatchId","m1","m2","seq","display","justifyContent","alignItems","schedule","teamMatchup","selectedTeamXref","newTeamMatchup","matchDescription","Leagues","Divisions","Division","SeasonPage","useTheme","teamsByXref","seasonResults","outer","gamesTotal","matchStats","teamRecords","rank","pct","records","r1","r2","tr","modalTeam","setModalTeam","modalTeamMatches","setModalTeamMatches","modalPlayerMatches","setModalPlayerMatches","some","ts","border","color","blue","loadPlayerMatches","loadTeams","loadTeamMatches","useParams","year","term","s","setTeams","setTeamMatches","setPlayerMatches","path","element","NewSeasonForm","saveSeason","yearInput","setYearInput","termInput","setTermInput","typeInput","setTypeInput","xrefInput","setXrefInput","setName","monday","setMonday","tuesday","setTuesday","wednesday","setWednesday","thursday","setThursday","friday","setFriday","saturday","setSaturday","sunday","setSunday","numWeeksInput","setNumWeeksInput","errMsg","setErrMsg","checked","stopPropagation","numWeeks","push","num_weeks","StyledPage","CardList","CardTitle","modalOpen","setModalOpen","minWidth","Seasons","setSeasons","insertOne","insertedId","seasonXref","updateOne","$set","modifiedCount","insertMany","StandingsPage","standings","results","s1","s2","StyledMatch","Card","bg","first","Player","matchup","StyledSelects","MatchRound","TeamPage","selectedTeam","setSelectedTeam","setTeamMatchesById","setPlayerMatchesById","disabled","match11","match12","match21","match22","tb","matchup11","newPlayerMatchup","matchup12","matchup21","matchup22","matchupTb","undefined","player","App","setPlayers","isMobile","useMediaQuery","query","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","fontsURL","docStyles","css","meyersWebReset","styles","black","offwhite","reds","light3","palette","typography","fonts","code","ReactDOM","createRoot","document","getElementById","render","StrictMode","basename"],"mappings":"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","file":"static/js/main.b132517d.chunk.js","sourcesContent":["import React, { createContext, useContext, useState } from 'react';\nimport * as Realm from 'realm-web';\n\ninterface RealmProps {\n  login: (email: string, password: string) => Promise<Realm.User | null>;\n  loginAnonymous: () => Promise<Realm.User | null>;\n  logout: () => Promise<void>;\n  user: Realm.User | null;\n}\n\nconst RealmContext = createContext<RealmProps | null>(null);\n\ninterface RealmProviderProps {\n  children: React.ReactNode;\n}\n\nexport const RealmProvider = ({ children }: RealmProviderProps) => {\n  const app = new Realm.App({ id: 'amsterdam-ussnf' });\n  // const app = new Realm.App({ id: 'amsterdam-wmrtx', baseUrl: 'http://localhost:8080' });\n\n  const [user, setUser] = useState<Realm.User | null>(app.currentUser);\n\n  const login = async (email: string, password: string) => {\n    try {\n      await app.logIn(Realm.Credentials.emailPassword(email, password));\n\n      setUser(app.currentUser);\n      return app.currentUser;\n    } catch (e) {\n      console.error('failed to login', e);\n      setUser(null);\n      return null;\n    }\n  };\n\n  const loginAnonymous = async () => {\n    try {\n      await app.logIn(Realm.Credentials.anonymous());\n\n      setUser(app.currentUser);\n      return app.currentUser;\n    } catch (e) {\n      console.error('failed to login', e);\n      setUser(null);\n      return null;\n    }\n  };\n\n  const logout = async () => {\n    try {\n      if (app.currentUser) {\n        await app.currentUser.logOut();\n      }\n    } catch (e) {\n      console.error('failed to logout', e);\n    } finally {\n      setUser(null);\n    }\n  };\n\n  return <RealmContext.Provider value={{ login, loginAnonymous, logout, user }}>{children}</RealmContext.Provider>;\n};\n\nexport const useRealm = () => {\n  const realm = useContext(RealmContext);\n  if (realm === null) {\n    throw new Error('useRealm() called outside of a RealmProvider');\n  }\n  return realm;\n};\n","import React, { createContext, useContext, useEffect, useState } from 'react';\n\nimport { Player, PlayerMatch, Season, Team, TeamMatch } from '../types';\n\nimport { useRealm } from './use_realm';\n\ninterface AtlasProps {\n  data: ReturnType<typeof atlasData> | null;\n}\n\nconst AtlasContext = createContext<AtlasProps | null>(null);\n\ninterface AtlasProviderProps {\n  children: React.ReactNode;\n}\n\nexport const AtlasProvider = ({ children }: AtlasProviderProps) => {\n  const { user } = useRealm();\n\n  const [data, setData] = useState<ReturnType<Realm.User['mongoClient']> | null>(null);\n\n  useEffect(() => {\n    if (user === null) {\n      return;\n    }\n    setData(user.mongoClient('data'));\n  }, [user]);\n\n  return <AtlasContext.Provider value={{ data: atlasData(data) }}>{children}</AtlasContext.Provider>;\n};\n\nexport const useAtlas = () => {\n  const atlas = useContext(AtlasContext);\n  if (atlas === null) {\n    throw new Error('useAtlas() called outside of a AtlasProvider');\n  }\n  return atlas;\n};\n\nfunction atlasData(data: ReturnType<Realm.User['mongoClient']> | null) {\n  if (!data) {\n    return null;\n  }\n  return {\n    players: () => data.db('amsterdam').collection<Player>('players'),\n    seasons: () => data.db('amsterdam').collection<Season>('seasons'),\n    teams: () => data.db('amsterdam').collection<Team>('teams'),\n    teamMatches: () => data.db('amsterdam').collection<TeamMatch>('team_matches'),\n    playerMatches: () => data.db('amsterdam').collection<PlayerMatch>('player_matches'),\n  };\n}\n","import React, { useState } from 'react';\nimport styled from '@emotion/styled';\nimport Button from '@leafygreen-ui/button';\nimport TextInput from '@leafygreen-ui/text-input';\nimport { Body } from '@leafygreen-ui/typography';\nimport { Navigate } from 'react-router-dom';\n\nimport { useRealm } from '../../realm';\n\nconst StyledLogin = styled.div`\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n`;\n\nconst LoginContainer = styled.div`\n  min-width: 360px;\n  padding: 1rem;\n  border: 1px solid;\n`;\n\nconst LoginAnonContainer = styled.div`\n  min-width: 360px;\n  padding: 0 1rem 1rem 1rem;\n  margin-top: 0.5rem;\n`;\n\nfunction LoginPage() {\n  const [username, setUsername] = useState('');\n  const [password, setPassword] = useState('');\n\n  const { login, loginAnonymous, user } = useRealm();\n\n  let from = (window.location as any).state?.from?.pathname || '/';\n\n  if (user) {\n    return <Navigate to={from} replace />;\n  }\n\n  return (\n    <StyledLogin>\n      <LoginContainer>\n        <Body style={{ marginBottom: '1rem' }}>Please log in using your credentials</Body>\n        <TextInput\n          label=\"Username\"\n          placeholder=\"your.email@example.com\"\n          onChange={e => {\n            setUsername(e.target.value);\n          }}\n          value={username}\n        />\n        <TextInput\n          label=\"Password\"\n          type=\"password\"\n          onChange={e => {\n            setPassword(e.target.value);\n          }}\n          value={password}\n        />\n        <Button style={{ marginTop: '1rem' }} variant=\"primary\" onClick={() => login(username, password)}>\n          Login\n        </Button>\n      </LoginContainer>\n      <LoginAnonContainer>\n        <Body style={{ marginBottom: '0.5rem' }}>Or log in as a guest</Body>\n        <Button variant=\"primaryOutline\" onClick={() => loginAnonymous()}>\n          Login Anonymously\n        </Button>\n      </LoginAnonContainer>\n    </StyledLogin>\n  );\n}\n\nexport default LoginPage;\n","import React from 'react';\nimport { useLocation, Navigate } from 'react-router-dom';\n\nimport { useRealm } from '../../realm';\n\ninterface Props {\n  children: JSX.Element;\n}\n\nfunction ProtectedRoute({ children }: Props) {\n  let { user } = useRealm();\n  let location = useLocation();\n\n  if (!user) {\n    return <Navigate to=\"/login\" state={{ from: location }} replace />;\n  }\n\n  return children;\n}\n\nexport default ProtectedRoute;\n","import React from 'react';\nimport { keyframes } from '@emotion/react';\nimport styled from '@emotion/styled';\nimport { MongoDBLogoMark } from '@leafygreen-ui/logo';\n\nconst leafAnimation = keyframes`\n  from {\n    transform: rotate(-5deg);\n  }\n  to {\n    transform: rotate(5deg);\n  }\n`;\n\nconst StyledLogo = styled(MongoDBLogoMark)`\n  display: inline-block;\n  margin: 24px;\n  animation: ${leafAnimation} 3s infinite alternate-reverse ease-in-out;\n  transform-origin: 50% 100%;\n`;\n\nfunction Logo() {\n  return <StyledLogo style={{ marginTop: 0, marginBottom: 0 }} height={48} />;\n}\n\nexport default Logo;\n","import React from 'react';\nimport { Link } from 'react-router-dom';\nimport styled from '@emotion/styled';\nimport Button from '@leafygreen-ui/button';\nimport { Body, H1 } from '@leafygreen-ui/typography';\n\nimport { useRealm } from '../realm';\n\nimport Logo from './logo';\n\nconst StyledHeader = styled.div`\n  display: grid;\n  grid-template-columns: 1fr auto 1fr;\n  grid-column-gap: 5px;\n  justify-items: center;\n  margin-top: 0.5rem;\n`;\n\nconst NavLinks = styled.ul`\n  margin-right: auto;\n  text-align: left;\n  display: flex;\n`;\n\nconst UserInfo = styled.div`\n  margin-left: auto;\n  text-align: right;\n  padding-right: 0.5rem;\n`;\n\nfunction Header() {\n  const { logout, user } = useRealm();\n\n  return (\n    <StyledHeader>\n      <NavLinks>\n        <Link style={{ margin: '1rem', textDecoration: 'none' }} to=\"/\">\n          Standings\n        </Link>\n        <Link style={{ margin: '1rem', textDecoration: 'none' }} to=\"/team\">\n          Team Results\n        </Link>\n        <Link style={{ margin: '1rem', textDecoration: 'none' }} to=\"/players\">\n          Individual Results\n        </Link>\n      </NavLinks>\n      <span style={{ textAlign: 'center' }}>\n        <H1>Amsterdam Billiards</H1>\n        <Logo />\n      </span>\n      {user && (\n        <UserInfo>\n          <Button variant=\"primaryOutline\" onClick={logout}>\n            Logout\n          </Button>\n          <Body>{user.providerType === 'anon-user' ? 'Guest' : user.profile.email || user.id}</Body>\n        </UserInfo>\n      )}\n    </StyledHeader>\n  );\n}\n\nexport default Header;\n","import React, { useState } from 'react';\nimport styled from '@emotion/styled';\nimport Icon from '@leafygreen-ui/icon';\nimport IconButton from '@leafygreen-ui/icon-button';\nimport { Menu, MenuSeparator, MenuItem } from '@leafygreen-ui/menu';\nimport { H1 } from '@leafygreen-ui/typography';\n\nimport { useRealm } from '../realm';\n\nimport Logo from './logo';\n\nconst StyledHeader = styled.header`\n  margin-top: 0.5rem;\n  display: flex;\n  justify-items: space-between;\n  align-items: center;\n`;\n\nfunction Header() {\n  const [menuOpen, setMenuOpen] = useState(false);\n  const { logout, user } = useRealm();\n\n  return (\n    <StyledHeader>\n      <Logo />\n      <H1 style={{ flex: 1 }}>Amsterdam Billiards</H1>\n      <Menu\n        align=\"bottom\"\n        justify=\"end\"\n        open={menuOpen}\n        trigger={\n          <IconButton size=\"xlarge\" aria-label=\"User Menu\" onClick={() => setMenuOpen(!menuOpen)}>\n            <Icon glyph=\"Ellipsis\" />\n          </IconButton>\n        }\n      >\n        <MenuItem href=\"/amsterdam\">Standings</MenuItem>\n        <MenuItem href=\"/amsterdam/team\">Team Results</MenuItem>\n        <MenuItem href=\"/amsterdam/players\">Individual Results</MenuItem>\n        <MenuSeparator />\n        {!user && <MenuItem href=\"/amsterdam/login\">Login</MenuItem>}\n        {user && (\n          <MenuItem\n            onClick={logout}\n            description={user.providerType === 'anon-user' ? 'As guest' : user.profile.email || user.id}\n          >\n            Logout\n          </MenuItem>\n        )}\n      </Menu>\n    </StyledHeader>\n  );\n}\n\nexport default Header;\n","import React, { useState } from 'react';\nimport styled from '@emotion/styled';\nimport Button from '@leafygreen-ui/button';\nimport Card from '@leafygreen-ui/card';\nimport { Body, H2, H3 } from '@leafygreen-ui/typography';\n\nimport { Season } from '../../types';\n\nconst StyledMain = styled.div`\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n  gap: 12px;\n  justify-content: center;\n`;\n\nconst StyledOrderedList = styled.ol`\n  list-style: auto;\n`;\n\nconst StyledUnorderedList = styled.ol`\n  list-style: disc;\n  margin-left: 1rem;\n`;\n\nfunction HomePage() {\n  return (\n    <StyledMain>\n      <H2>Welcome to Amsterdam Billiards Information</H2>\n      <Card>\n        <Button href=\"http://amsterdambilliards.com/\" target=\"_blank\" rel=\"noopener noreferrer\">\n          Official Amsterdam Billiards & Bar website\n        </Button>\n        <Button href=\"/amsterdam/seasons/2022/summer/team_8ball\">Team 8-Ball League Site</Button>\n      </Card>\n      <H3>Why You Should Join an Amsterdam Billiards League:</H3>\n      <StyledOrderedList>\n        <li>\n          <Body>The leagues are for players of all levels, including beginners and Pros</Body>\n        </li>\n        <li>\n          <Body>You'll have fun</Body>\n        </li>\n        <li>\n          <Body>You'll improve your pool game</Body>\n        </li>\n        <li>\n          <Body>It's a great way to meet other pool players</Body>\n        </li>\n        <li>\n          <Body>The leagues are co-ed</Body>\n        </li>\n        <li>\n          <Body>They're inexpensive</Body>\n        </li>\n        <li>\n          <Body>The prizes are great</Body>\n        </li>\n        <li>\n          <Body>\n            They're easy to join (just sign up in the club at the front desk or by clicking 'Register Now!' on this\n            page)\n          </Body>\n        </li>\n        <li>\n          <Body>You get a lot of free stuff:</Body>\n          <StyledUnorderedList>\n            <li>\n              <Body>Play pool for free for a week</Body>\n            </li>\n            <li>\n              <Body>3 hours of free play every week while the league lasts</Body>\n            </li>\n            <li>\n              <Body>Get a dollar off all drinks while you're playing in the leagues</Body>\n            </li>\n            <li>\n              <Body>Mid-Season league party</Body>\n            </li>\n            <li>\n              <Body>League Finals & Registration signup party</Body>\n            </li>\n          </StyledUnorderedList>\n        </li>\n      </StyledOrderedList>\n      <Button href=\"https://amsterdambilliards.com/leagues/\" target=\"_blank\" rel=\"noopener noreferrer\">\n        Register Now!\n      </Button>\n    </StyledMain>\n  );\n}\n\nexport default HomePage;\n","import React, { useEffect, useState } from 'react';\nimport styled from '@emotion/styled';\nimport { Option, Select } from '@leafygreen-ui/select';\n// import { Table, TableHeader, Row, Cell } from '@leafygreen-ui/table';\n\nimport { useAtlas } from '../../realm';\nimport { Player, Season, Team } from '../../types';\n\ninterface WinLossRecord {\n  wins: number;\n  losses: number;\n  total: number;\n}\n\ninterface PlayerResult {\n  key: string;\n  name: string;\n  teamName: string;\n  handicap: number;\n  doubles: number;\n  games: WinLossRecord;\n  matches: WinLossRecord;\n}\n\ninterface TeamWeekly {\n  name: string;\n  totalGames: WinLossRecord;\n  totalMatches: WinLossRecord;\n  weeklyWins: number;\n  weeklyLosses: number;\n}\n\nconst StyledMain = styled.div`\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n  gap: 12px;\n  justify-content: center;\n`;\n\ninterface Props {\n  seasons: Season[];\n  players: Player[];\n  teams: Team[];\n}\n\nfunction PlayersPage({ seasons }: Props) {\n  const { data } = useAtlas();\n\n  const [selectedSeason, setSelectedSeason] = useState<Season>();\n\n  const [teamResults, setTeamResults] = useState<TeamWeekly[]>([]);\n  const [playerResults, setPlayerResults] = useState<PlayerResult[]>([]);\n  useEffect(() => {\n    if (!data) {\n      return;\n    }\n\n    Promise.all([\n      data.teamMatches().find({ season_xref: selectedSeason?.xref }),\n      data.playerMatches().find({ season_xref: selectedSeason?.xref }),\n    ]).then(([teamMatches, playerMatches]) => {\n      setTeamResults(\n        Object.values(\n          Object.values(\n            teamMatches.reduce<Record<string, TeamWeekly>>((acc, teamMatch) => {\n              const leftTeam: TeamWeekly = acc[teamMatch.teams[0].name] || {\n                name: teamMatch.teams[0].name,\n                totalGames: { wins: 0, losses: 0, total: 0 },\n                totalMatches: { wins: 0, losses: 0, total: 0 },\n                weeklyWins: 0,\n                weeklyLosses: 0,\n              };\n              const rightTeam: TeamWeekly = acc[teamMatch.teams[1].name] || {\n                name: teamMatch.teams[1].name,\n                totalGames: { wins: 0, losses: 0, total: 0 },\n                totalMatches: { wins: 0, losses: 0, total: 0 },\n                weeklyWins: 0,\n                weeklyLosses: 0,\n              };\n              return {\n                ...acc,\n                [teamMatch.teams[0].name]: {\n                  ...leftTeam,\n                  totalGames: {\n                    wins: leftTeam.totalGames.wins + teamMatch.teams[0].games_won,\n                    losses: leftTeam.totalGames.losses + teamMatch.teams[1].games_won,\n                    total: leftTeam.totalGames.total + teamMatch.teams[0].games_won + teamMatch.teams[1].games_won,\n                  },\n                  totalMatches: {\n                    wins: leftTeam.totalMatches.wins + teamMatch.teams[0].matches_won,\n                    losses: leftTeam.totalMatches.losses + teamMatch.teams[1].matches_won,\n                    total:\n                      leftTeam.totalMatches.total + teamMatch.teams[0].matches_won + teamMatch.teams[1].matches_won,\n                  },\n                  weeklyWins: leftTeam.weeklyWins + (teamMatch.teams[0].win ? 1 : 0),\n                  weeklyLosses: leftTeam.weeklyWins + (teamMatch.teams[0].loss ? 1 : 0),\n                },\n                [teamMatch.teams[1].name]: {\n                  ...rightTeam,\n                  totalGames: {\n                    wins: rightTeam.totalGames.wins + teamMatch.teams[1].games_won,\n                    losses: rightTeam.totalGames.losses + teamMatch.teams[0].games_won,\n                    total: rightTeam.totalGames.total + teamMatch.teams[1].games_won + teamMatch.teams[0].games_won,\n                  },\n                  totalMatches: {\n                    wins: rightTeam.totalMatches.wins + teamMatch.teams[1].matches_won,\n                    losses: rightTeam.totalMatches.losses + teamMatch.teams[0].matches_won,\n                    total:\n                      rightTeam.totalMatches.total + teamMatch.teams[1].matches_won + teamMatch.teams[0].matches_won,\n                  },\n                  weeklyWins: rightTeam.weeklyWins + (teamMatch.teams[1].win ? 1 : 0),\n                  weeklyLosses: rightTeam.weeklyWins + (teamMatch.teams[1].loss ? 1 : 0),\n                },\n              };\n            }, {}),\n          ),\n        ),\n      );\n\n      const pm = playerMatches.reduce(\n        (acc, playerMatch) => ({\n          ...acc,\n        }),\n        {},\n      );\n      console.log(pm);\n    });\n  }, [data, selectedSeason?.xref]);\n\n  if (!data) {\n    console.log(teamResults, playerResults, setPlayerResults);\n    return null;\n  }\n\n  return (\n    <StyledMain>\n      <Select\n        style={{ width: '360px' }}\n        label=\"Choose a season:\"\n        placeholder=\"Select...\"\n        value={selectedSeason?.name || ''}\n        onChange={val => setSelectedSeason(seasons.find(season => season.name === val))}\n      >\n        {seasons.map(({ xref, name }) => (\n          <Option key={xref} value={name}>\n            {name}\n          </Option>\n        ))}\n      </Select>\n      {selectedSeason && <>player data</>}\n    </StyledMain>\n  );\n}\n\nexport default PlayersPage;\n","import React from 'react';\nimport * as Realm from 'realm-web';\n\nimport { useRealm } from '../../realm';\n\nexport const UserDetail = ({ user }: { user: Realm.User }) => {\n  return (\n    <div>\n      <h1>Logged in with anonymous id: {user.id}</h1>\n    </div>\n  );\n};\n\nexport const Login = () => {\n  const { loginAnonymous } = useRealm();\n  return <button onClick={loginAnonymous}>Log In</button>;\n};\n","export default __webpack_public_path__ + \"static/media/logo.6ce24c58.svg\";","import React from 'react';\nimport { keyframes } from '@emotion/react';\nimport styled from '@emotion/styled';\n\nimport { useRealm } from '../../realm';\n\nimport { Login, UserDetail } from './realm';\n\nimport logo from './logo.svg';\n\nconst StyledSandbox = styled.div`\n  text-align: center;\n`;\n\nconst SandboxHeader = styled.header`\n  background-color: ${({ theme }) => theme.colors.grays.base};\n  min-height: 100vh;\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n  justify-content: center;\n  font-size: calc(10px + 2vmin);\n  color: ${({ theme }) => theme.colors.white};\n`;\n\nconst SandboxLink = styled.a`\n  color: ${({ theme }) => theme.colors.blues.light1};\n`;\n\nconst sandboxLogoSpin = keyframes`\n  from {\n    transform: rotate(0deg);\n  }\n  to {\n    transform: rotate(360deg);\n  }\n`;\n\nconst SandboxLogo = styled.img`\n  height: 40vmin;\n  pointer-events: none;\n  @media (prefers-reduced-motion: no-preference) {\n    animation: ${sandboxLogoSpin} infinite 20s linear;\n  }\n`;\n\nfunction Sandbox() {\n  const { user } = useRealm();\n  return (\n    <StyledSandbox>\n      <SandboxHeader>\n        <SandboxLogo src={logo} alt=\"logo\" />\n        <p>\n          Edit <code>src/sandbox/sandbox.tsx</code> and save to reload.\n        </p>\n        <SandboxLink href=\"https://reactjs.org\" target=\"_blank\" rel=\"noopener noreferrer\">\n          Learn React\n        </SandboxLink>\n        {user ? <UserDetail user={user} /> : <Login />}\n      </SandboxHeader>\n    </StyledSandbox>\n  );\n}\n\nexport default Sandbox;\n","import React from 'react';\nimport styled from '@emotion/styled';\n\ninterface Props {\n  children?: React.ReactNode;\n}\n\nconst Container = styled.div`\n  margin: 0 auto;\n  max-width: 62%;\n  @media (max-width: 720px) {\n    max-width: 100%;\n  }\n`;\n\nfunction PageContent({ children }: Props) {\n  return <Container>{children}</Container>;\n}\n\nexport default PageContent;\n","export interface AmsterdamKey {\n  xref: number;\n  name: string;\n}\n\nexport type DayOfWeek = 'monday' | 'tuesday' | 'wednesday' | 'thursday' | 'friday' | 'saturday' | 'sunday';\n\nexport const isDayOfWeek = (v: string): v is DayOfWeek => {\n  switch (v) {\n    case 'monday':\n    case 'tuesday':\n    case 'wednesday':\n    case 'thursday':\n    case 'friday':\n    case 'saturday':\n    case 'sunday':\n      return true;\n  }\n  return false;\n};\n\nexport const dayOfWeek = (v: DayOfWeek): string => {\n  return v.charAt(0).toUpperCase() + v.substring(1);\n};\n","import { DayOfWeek } from './amsterdam';\n\nexport type SeasonTerm = 'winter' | 'spring' | 'summer' | 'fall';\n\nexport const isSeasonTerm = (v: string): v is SeasonTerm => {\n  switch (v) {\n    case 'winter':\n    case 'spring':\n    case 'summer':\n    case 'fall':\n      return true;\n  }\n  return false;\n};\n\nexport type LeagueType = 'team_8ball';\n\nexport const isLeagueType = (v: string): v is LeagueType => {\n  switch (v) {\n    case 'team_8ball':\n      return true;\n  }\n  return false;\n};\n\nexport interface Season {\n  _id: string;\n  year: number;\n  term: SeasonTerm;\n  type: LeagueType;\n  xref: number;\n  name: string;\n  num_weeks: number;\n  nights: DayOfWeek[];\n  divisions: Partial<Record<DayOfWeek, string[]>>;\n}\n","import React, { useEffect, useState } from 'react';\nimport { useNavigate } from 'react-router-dom';\nimport styled from '@emotion/styled';\nimport Button from '@leafygreen-ui/button';\nimport ExpandableCard from '@leafygreen-ui/expandable-card';\nimport FormFooter from '@leafygreen-ui/form-footer';\nimport TextInput from '@leafygreen-ui/text-input';\nimport { Subtitle } from '@leafygreen-ui/typography';\n\nimport { dayOfWeek, DayOfWeek, Team, Season } from '../../types';\n\nconst NightContainer = styled.div`\n  display: flex;\n  flex-wrap: wrap;\n  justify-content: center;\n`;\n\nconst NightControl = styled.div`\n  display: flex;\n  flex-direction: column;\n  :not(:first-of-type) {\n    margin-left: 2rem;\n  }\n`;\n\nconst NightHeader = styled.div`\n  display: flex;\n  justify-content: space-between;\n  margin-bottom: 1rem;\n`;\n\nconst TeamInputs = styled.div`\n  display: flex;\n`;\n\ninterface Props {\n  season: Season;\n  teams: Team[];\n  saveDivisions: (divisions: Season['divisions']) => Promise<void>;\n  saveTeams: (teams: Omit<Team, '_id' | 'season_xref' | 'schedule'>[]) => Promise<void>;\n}\n\nfunction SeasonAdmin({ season, teams, saveDivisions, saveTeams }: Props) {\n  const navTo = useNavigate();\n\n  const [divisionsOpen, setDivisionsOpen] = useState(\n    !Object.values(season.divisions).reduce((tot, divs) => (tot += divs.length), 0),\n  );\n  const [divisionsErrMsg, setDivisionsErrMsg] = useState('');\n  const [divisions, setDivisions] = useState<Partial<Record<DayOfWeek, string[]>>>(\n    season.nights.reduce((acc, night) => {\n      const existingDivisions = season.divisions[night] || [];\n      return {\n        ...acc,\n        [night]: existingDivisions.length > 0 ? existingDivisions : [''],\n      };\n    }, {}),\n  );\n\n  const [teamsOepn, setTeamsOpen] = useState(\n    !!Object.values(season.divisions).reduce((tot, divs) => (tot += divs.length), 0),\n  );\n  const [teamsErrMsg, setTeamsErrMsg] = useState('');\n  const [teamsByDivision, setTeamsByDivision] = useState<\n    Partial<Record<DayOfWeek, Record<string, { xref: string; name: string }[]>>>\n  >({});\n  useEffect(() => {\n    setTeamsByDivision(\n      Object.entries(divisions).reduce(\n        (acc, [night, divisions]) => ({\n          ...acc,\n          [night]: divisions.reduce((inner, division) => {\n            const existingTeams = teams\n              .filter(t => t.division_name === division)\n              .map(t => ({ xref: t.xref + '', name: t.name }));\n            return {\n              ...inner,\n              [division]: existingTeams.length > 0 ? existingTeams : [{ xref: '', name: '' }],\n            };\n          }, {}),\n        }),\n        {},\n      ),\n    );\n  }, [season, teams, divisions]);\n\n  return (\n    <>\n      <Button variant=\"primaryOutline\" onClick={() => navTo('..')}>\n        Back to Dashboard\n      </Button>\n      <ExpandableCard\n        title=\"Admin: Divisions\"\n        description=\"Make sure the league divisions are correct\"\n        isOpen={divisionsOpen}\n        onClick={() => setDivisionsOpen(!divisionsOpen)}\n      >\n        <NightContainer>\n          {season.nights.map(night => (\n            <NightControl key={night}>\n              <NightHeader>\n                <Subtitle>{dayOfWeek(night)}</Subtitle>\n                <Button\n                  size=\"xsmall\"\n                  onClick={() => setDivisions({ ...divisions, [night]: [...(divisions[night] || []), ''] })}\n                >\n                  +\n                </Button>\n              </NightHeader>\n              {(divisions[night] || []).map((val, idx) => (\n                <TextInput\n                  style={{ marginBottom: '0.5rem' }}\n                  key={val + idx}\n                  label={`Division #${idx}`}\n                  value={val}\n                  onChange={e =>\n                    setDivisions({\n                      ...divisions,\n                      [night]: (divisions[night] || []).map((v, i) => {\n                        if (i === idx) {\n                          return e.target.value;\n                        }\n                        return v;\n                      }),\n                    })\n                  }\n                />\n              ))}\n            </NightControl>\n          ))}\n        </NightContainer>\n        <FormFooter\n          primaryButton={{\n            text: 'Save',\n            onClick: async e => {\n              try {\n                saveDivisions(divisions);\n                setDivisionsOpen(false);\n                setTeamsOpen(true);\n                setDivisionsErrMsg('');\n              } catch ({ error }) {\n                setDivisionsErrMsg(`failed to save divisions: ${error}`);\n              }\n            },\n          }}\n          errorMessage={divisionsErrMsg}\n        />\n      </ExpandableCard>\n      <ExpandableCard\n        title=\"Admin: Teams\"\n        description=\"Make sure the league teams are correct\"\n        isOpen={teamsOepn}\n        onClick={() => setTeamsOpen(!teamsOepn)}\n      >\n        {Object.entries(teamsByDivision).map(([night, divisions]) => (\n          <NightContainer key={night}>\n            {Object.entries(divisions).map(([divisionName, teams]) => (\n              <NightControl key={divisionName}>\n                <NightHeader>\n                  <Subtitle>{divisionName}</Subtitle>\n                  <Button\n                    size=\"xsmall\"\n                    onClick={() =>\n                      setTeamsByDivision({\n                        ...teamsByDivision,\n                        [night]: {\n                          ...(teamsByDivision[night as DayOfWeek] || {}),\n                          [divisionName]: [\n                            ...((teamsByDivision[night as DayOfWeek] || {})[divisionName] || []),\n                            { xref: '', name: '' },\n                          ],\n                        },\n                      })\n                    }\n                  >\n                    +\n                  </Button>\n                </NightHeader>\n                {teams.map((team, idx) => (\n                  <TeamInputs key={idx}>\n                    <TextInput\n                      label={`Team #${idx} Key`}\n                      value={team.xref}\n                      onChange={e =>\n                        setTeamsByDivision({\n                          ...teamsByDivision,\n                          [night]: {\n                            ...(teamsByDivision[night as DayOfWeek] || {}),\n                            [divisionName]: ((teamsByDivision[night as DayOfWeek] || {})[divisionName] || []).map(\n                              (v, i) => {\n                                if (i === idx) {\n                                  return { ...v, xref: e.target.value };\n                                }\n                                return v;\n                              },\n                            ),\n                          },\n                        })\n                      }\n                    />\n                    <TextInput\n                      label={`Team #${idx} Name`}\n                      value={team.name}\n                      onChange={e =>\n                        setTeamsByDivision({\n                          ...teamsByDivision,\n                          [night]: {\n                            ...(teamsByDivision[night as DayOfWeek] || {}),\n                            [divisionName]: ((teamsByDivision[night as DayOfWeek] || {})[divisionName] || []).map(\n                              (v, i) => {\n                                if (i === idx) {\n                                  return { ...v, name: e.target.value };\n                                }\n                                return v;\n                              },\n                            ),\n                          },\n                        })\n                      }\n                    />\n                  </TeamInputs>\n                ))}\n              </NightControl>\n            ))}\n          </NightContainer>\n        ))}\n        <FormFooter\n          primaryButton={{\n            text: 'Save',\n            onClick: async e => {\n              try {\n                await saveTeams(\n                  Object.entries(teamsByDivision)\n                    .flatMap(([night, divisionTeams]) =>\n                      Object.entries(divisionTeams).flatMap(([divisionName, teams]) => {\n                        return teams.map(team => ({\n                          xref: parseInt(team.xref, 10),\n                          name: team.name,\n                          night: night as DayOfWeek,\n                          division_name: divisionName,\n                        }));\n                      }),\n                    )\n                    .filter(team => !!team.xref),\n                );\n                setTeamsOpen(false);\n                setTeamsErrMsg('');\n              } catch ({ error }) {\n                setTeamsErrMsg(`failed to save teams: ${error}`);\n              }\n            },\n          }}\n          errorMessage={teamsErrMsg}\n        />\n      </ExpandableCard>\n    </>\n  );\n}\n\nexport default SeasonAdmin;\n","import React from 'react';\nimport styled from '@emotion/styled';\nimport { Table, TableHeader, Row, Cell } from '@leafygreen-ui/table';\n\nimport { emptyPlayerResult, PlayerMatch } from '../../types';\n\nconst StyledRow = styled(Row)<{ win?: boolean; loss?: boolean }>`\n  ${({ theme, win, loss }) =>\n    win\n      ? {\n          backgroundColor: theme.colors.lg.green.light2,\n        }\n      : loss\n      ? {\n          backgroundColor: theme.colors.lg.red.light2,\n        }\n      : {}}\n`;\n\ninterface Props {\n  playerMatches: PlayerMatch[];\n  selfTeamXref: number;\n}\n\nfunction Match({ playerMatches, selfTeamXref }: Props) {\n  return (\n    <Table\n      data={playerMatches}\n      columns={[\n        <TableHeader label=\"Player\" />,\n        <TableHeader label=\"HCP\" />,\n        <TableHeader label=\"Games\" />,\n        <TableHeader label=\"Opponent\" />,\n        <TableHeader label=\"HCP\" />,\n        <TableHeader label=\"Games\" />,\n      ]}\n    >\n      {({ datum: pm }) => {\n        const self = pm.players.find(p => p.team.xref === selfTeamXref) || emptyPlayerResult();\n        const opp = pm.players.find(p => p.team.xref !== selfTeamXref) || emptyPlayerResult();\n        return (\n          <StyledRow key={pm._id} win={self.win} loss={self.loss}>\n            <Cell>{self.name}</Cell>\n            <Cell>{self.handicap}</Cell>\n            <Cell>{self.games_won}</Cell>\n            <Cell>{opp.name}</Cell>\n            <Cell>{opp.handicap}</Cell>\n            <Cell>{opp.games_won}</Cell>\n          </StyledRow>\n        );\n      }}\n    </Table>\n  );\n}\n\nexport default Match;\n","import { AmsterdamKey } from './amsterdam';\n\nexport type PlayerMatchType = 'R1' | 'R2' | 'TB';\n\nexport interface PlayerMatch {\n  _id: string;\n  match_id: string;\n  season_xref: number;\n  week_num: number;\n  date: Date;\n  type: PlayerMatchType;\n  seq: number;\n  players: PlayerResult[];\n  forfeit?: boolean;\n}\n\nexport interface PlayerResult extends AmsterdamKey {\n  team: AmsterdamKey;\n  handicap: number;\n  games_won: number;\n  win?: boolean;\n  loss?: boolean;\n}\n\nexport const emptyPlayerResult = (): PlayerResult => ({\n  xref: 0,\n  name: '',\n  team: { xref: 0, name: '' },\n  handicap: 0,\n  games_won: 0,\n});\n\nexport interface PlayerMatchup {\n  self: PlayerResult;\n  opp: PlayerResult;\n}\n","import React, { useMemo } from 'react';\nimport { Table, TableHeader, Row, Cell } from '@leafygreen-ui/table';\n\nimport { emptyPlayerResult, PlayerMatch, PlayerResult } from '../../types';\n\ninterface Props {\n  playerMatches: PlayerMatch[];\n  selfTeamXref: number;\n}\n\ninterface Stats extends Pick<PlayerResult, 'xref' | 'name' | 'handicap'> {\n  doubles: number;\n  wins: number;\n  losses: number;\n  gamesWon: number;\n  gamesLost: number;\n  gamePct: number;\n}\n\nconst emptyStats = (): Stats => ({\n  xref: 0,\n  name: '',\n  handicap: 0,\n  doubles: 0,\n  wins: 0,\n  losses: 0,\n  gamesWon: 0,\n  gamesLost: 0,\n  gamePct: 0,\n});\n\nfunction PlayerResults({ playerMatches, selfTeamXref }: Props) {\n  const playerStatsByWeek = useMemo(\n    () =>\n      playerMatches.reduce<Record<number, Record<number, Stats[]>>>((acc, playerMatch) => {\n        const self = playerMatch.players.find(p => p.team.xref === selfTeamXref) || emptyPlayerResult();\n        const opp = playerMatch.players.find(p => p.team.xref !== selfTeamXref) || emptyPlayerResult();\n        return {\n          ...acc,\n          [self.xref]: {\n            ...(acc[self.xref] || {}),\n            [playerMatch.week_num]: [\n              ...((acc[self.xref] || {})[playerMatch.week_num] || []),\n              {\n                xref: self.xref,\n                name: self.name,\n                handicap: self.handicap,\n                wins: self.win ? 1 : 0,\n                losses: self.loss ? 1 : 0,\n                gamesWon: self.games_won,\n                gamesLost: opp.games_won,\n                doubles: 0,\n                gamePct: 0,\n              },\n            ],\n          },\n        };\n      }, {}),\n    [playerMatches, selfTeamXref],\n  );\n\n  const playerStats = useMemo(() => {\n    const playerStats = Object.entries(playerStatsByWeek).map(([xref, statsByWeek]) => {\n      const stats = emptyStats();\n      stats.xref = parseInt(xref, 10);\n\n      Object.values(statsByWeek).forEach(weeklyStats => {\n        const isDouble = weeklyStats.length > 1;\n        for (var i = 0; i < weeklyStats.length; i++) {\n          const { name, handicap, wins, losses, gamesWon, gamesLost } = weeklyStats[i];\n          stats.name = name;\n          stats.handicap = handicap;\n          stats.wins += wins;\n          stats.losses += losses;\n          stats.gamesWon += gamesWon;\n          stats.gamesLost += gamesLost;\n          stats.doubles = stats.doubles + (isDouble ? 1 : 0);\n        }\n      });\n\n      stats.gamePct = stats.gamesWon / (stats.gamesWon + stats.gamesLost);\n      return stats;\n    });\n    playerStats.sort((p1, p2) => p2.gamePct - p1.gamePct);\n    return playerStats;\n  }, [playerStatsByWeek]);\n\n  return (\n    <Table\n      data={playerStats}\n      columns={[\n        <TableHeader label=\"Name\" />,\n        <TableHeader label=\"HCP\" />,\n        <TableHeader label=\"DB's\" />,\n        <TableHeader label=\"W\" />,\n        <TableHeader label=\"L\" />,\n        <TableHeader label=\"GF\" />,\n        <TableHeader label=\"GA\" />,\n        <TableHeader label=\"PCT\" />,\n      ]}\n    >\n      {({ datum: pr }) => (\n        <Row key={pr.xref}>\n          <Cell>{pr.name}</Cell>\n          <Cell>{pr.handicap}</Cell>\n          <Cell>{pr.doubles}</Cell>\n          <Cell>{pr.wins}</Cell>\n          <Cell>{pr.losses}</Cell>\n          <Cell>{pr.gamesWon}</Cell>\n          <Cell>{pr.gamesLost}</Cell>\n          <Cell>{pr.gamePct.toFixed(3)}</Cell>\n        </Row>\n      )}\n    </Table>\n  );\n}\n\nexport default PlayerResults;\n","import React, { useMemo } from 'react';\nimport { Link } from 'react-router-dom';\nimport styled from '@emotion/styled';\nimport ExpandableCard from '@leafygreen-ui/expandable-card';\nimport Modal from '@leafygreen-ui/modal';\nimport { H2, H3 } from '@leafygreen-ui/typography';\n\nimport { PlayerMatch, Team, TeamMatch, TeamMatchup, TeamResult } from '../../types';\n\nimport MatchTable from './match_table';\nimport PlayerResults from './player_results';\n\nconst emptyTeamResult = (): TeamResult => ({ xref: 0, name: '', games_won: 0, matches_won: 0 });\n\nconst Matches = styled.div`\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n  gap: 12px;\n  justify-content: center;\n  max-width: 720px;\n`;\n\ninterface Props {\n  open: boolean;\n  playerMatches: PlayerMatch[];\n  team?: Team;\n  teamMatches: TeamMatch[];\n  setOpen: (open: boolean) => void;\n}\n\nfunction TeamResults({ open, playerMatches, setOpen, team, teamMatches }: Props) {\n  const teamMatchesById = useMemo(\n    () =>\n      teamMatches.reduce<Record<string, TeamMatch>>((acc, teamMatch) => ({ ...acc, [teamMatch._id]: teamMatch }), {}),\n    [teamMatches],\n  );\n\n  const playerMatchesById = useMemo(() => {\n    const playerMatchesById = playerMatches.reduce<Record<string, PlayerMatch[]>>(\n      (acc, playerMatch) => ({\n        ...acc,\n        [playerMatch.match_id]: [...(acc[playerMatch.match_id] || []), playerMatch],\n      }),\n      {},\n    );\n    Object.entries(playerMatchesById).forEach(([teamMatchId, playerMatches]) => {\n      playerMatches.sort((m1, m2) => m1.seq - m2.seq);\n      playerMatchesById[teamMatchId] = playerMatches;\n    });\n    return playerMatchesById;\n  }, [playerMatches]);\n\n  if (!team) {\n    return null;\n  }\n\n  return (\n    <Modal open={open} setOpen={setOpen}>\n      <>\n        <div style={{ display: 'flex', justifyContent: 'space-between', alignItems: 'center' }}>\n          <H2>{team.name}</H2>\n          <Link to={team.name}>Detailed View</Link>\n        </div>\n        <H3 style={{ marginTop: '1rem' }}>Player Results</H3>\n        <PlayerResults playerMatches={playerMatches} selfTeamXref={team.xref} />\n        <H3 style={{ marginTop: '1rem' }}>Team Results</H3>\n        <Matches>\n          {team.schedule.map(({ display, match_id, opp }) => {\n            const teamMatchup = newTeamMatchup(team.xref, teamMatchesById[match_id || ''] || { teams: [] });\n            return (\n              <ExpandableCard\n                key={display}\n                title={`${display}: vs. ${opp.name}`}\n                description={!match_id ? '' : matchDescription(teamMatchup)}\n              >\n                {!match_id && <>this match hasn't happened yet, do you want a scouting report?</>}\n                {match_id && (\n                  <MatchTable playerMatches={playerMatchesById[match_id || ''] || []} selfTeamXref={team.xref} />\n                )}\n              </ExpandableCard>\n            );\n          })}\n        </Matches>\n      </>\n    </Modal>\n  );\n}\n\nexport default TeamResults;\n\nfunction matchDescription({ self, opp }: TeamMatchup) {\n  return `${self.win ? '✅ Win' : '💩 Loss'}: ${self.matches_won}-${opp.matches_won}, ${self.games_won}-${\n    opp.games_won\n  }`;\n}\n\nfunction newTeamMatchup(selectedTeamXref: number, teamMatch: Pick<TeamMatch, 'teams'>): TeamMatchup {\n  const self = teamMatch.teams.find(t => t.xref === selectedTeamXref) || emptyTeamResult();\n  const opp = teamMatch.teams.find(t => t.xref !== selectedTeamXref) || emptyTeamResult();\n  return { self, opp };\n}\n","import React, { useEffect, useMemo, useState } from 'react';\nimport { useTheme } from '@emotion/react';\nimport styled from '@emotion/styled';\nimport Button from '@leafygreen-ui/button';\nimport Modal from '@leafygreen-ui/modal';\nimport { Table, TableHeader, Row, Cell } from '@leafygreen-ui/table';\nimport { Body, H2, H3 } from '@leafygreen-ui/typography';\n\nimport { dayOfWeek, PlayerMatch, Season, Team, TeamMatch, TeamRecord } from '../../types';\n\nimport TeamResults from './team_results';\n\nconst Leagues = styled.div`\n  display: flex;\n  flex-wrap: wrap;\n  justify-content: center;\n`;\n\nconst Divisions = styled.div`\n  display: flex;\n  flex-direction: column;\n  margin: 0 1rem;\n`;\n\nconst Division = styled.div`\n  display: flex;\n  flex-direction: column;\n  margin-bottom: 1rem;\n`;\n\ninterface Props {\n  season: Season;\n  playerMatches: PlayerMatch[];\n  teams: Team[];\n  teamMatches: TeamMatch[];\n}\n\ninterface MatchStats {\n  wins: number;\n  losses: number;\n  gamesWon: number;\n  gamesTotal: number;\n}\n\nconst emptyMatchStats = () => ({ wins: 0, losses: 0, gamesWon: 0, gamesTotal: 0 });\n\nfunction SeasonPage({ playerMatches, season, teams, teamMatches }: Props) {\n  const theme = useTheme();\n\n  const teamsByXref = useMemo(\n    () => teams.reduce<Record<number, Team>>((acc, team) => ({ ...acc, [team.xref]: team }), {}),\n    [teams],\n  );\n\n  const seasonResults = useMemo(\n    () =>\n      teamMatches.reduce<Record<number, MatchStats>>((outer, teamMatch) => {\n        var gamesTotal = 0;\n        const matchStats = teamMatch.teams.reduce<Record<number, MatchStats>>(\n          (inner, team) => {\n            gamesTotal += team.games_won;\n            return {\n              ...inner,\n              [team.xref]: {\n                gamesWon: inner[team.xref].gamesWon + team.games_won,\n                wins: inner[team.xref].wins + (team.win ? 1 : 0),\n                losses: inner[team.xref].losses + (team.loss ? 1 : 0),\n                gamesTotal: inner[team.xref].gamesTotal,\n              },\n            };\n          },\n          {\n            [teamMatch.teams[0].xref]: outer[teamMatch.teams[0].xref] || emptyMatchStats(),\n            [teamMatch.teams[1].xref]: outer[teamMatch.teams[1].xref] || emptyMatchStats(),\n          },\n        );\n        Object.values(matchStats).forEach(stats => {\n          stats.gamesTotal += gamesTotal;\n        });\n        return {\n          ...outer,\n          ...matchStats,\n        };\n      }, {}),\n    [teamMatches],\n  );\n\n  const teamsByDivision = useMemo(() => {\n    const teamRecords = teams.reduce<Record<string, TeamRecord[]>>((acc, team) => {\n      const teamResults = seasonResults[team.xref] || emptyMatchStats();\n      return {\n        ...acc,\n        [team.division_name]: [\n          ...(acc[team.division_name] || []),\n          {\n            xref: team.xref,\n            name: team.name,\n            rank: 0,\n            wins: teamResults.wins,\n            losses: teamResults.losses,\n            pct: teamResults.gamesWon / teamResults.gamesTotal,\n          },\n        ],\n      };\n    }, {});\n    Object.entries(teamRecords).forEach(([divisionName, records]) => {\n      records.sort((r1, r2) =>\n        r1.wins === r2.wins ? (r1.losses === r2.losses ? r2.pct - r1.pct : r1.losses - r2.losses) : r2.wins - r1.wins,\n      );\n      teamRecords[divisionName] = records.map((tr, i) => ({ ...tr, rank: i + 1 }));\n    });\n    return teamRecords;\n  }, [teams]);\n\n  const [modalTeam, setModalTeam] = useState(0);\n  const [modalTeamMatches, setModalTeamMatches] = useState<TeamMatch[]>([]);\n  const [modalPlayerMatches, setModalPlayerMatches] = useState<PlayerMatch[]>([]);\n  useEffect(() => {\n    setModalTeamMatches(teamMatches.filter(teamMatch => !!teamMatch.teams.some(t => t.xref === modalTeam)));\n    setModalPlayerMatches(\n      playerMatches.filter(playerMatch => playerMatch.players.some(p => p.team.xref === modalTeam)),\n    );\n  }, [modalTeam]);\n\n  return (\n    <>\n      <Leagues>\n        {season.nights.map(night => (\n          <Divisions key={night}>\n            <H2 style={{ marginBottom: '1rem' }}>{dayOfWeek(night)}</H2>\n            {season.divisions[night]!.map(division => (\n              <Division key={division}>\n                {teamsByDivision[division] && (\n                  <>\n                    <H3>{division}</H3>\n                    <Table\n                      data={teamsByDivision[division]}\n                      columns={[\n                        <TableHeader label=\"Place\" />,\n                        <TableHeader label=\"Team Name\" />,\n                        <TableHeader label=\"W's\" />,\n                        <TableHeader label=\"L's\" />,\n                        <TableHeader label=\"PCT.\" />,\n                      ]}\n                    >\n                      {({ datum: ts }) => (\n                        <Row key={ts.xref}>\n                          <Cell>{ts.rank}</Cell>\n                          <Cell>\n                            <Button\n                              style={{ backgroundColor: '#ffffff', border: 0, color: theme.colors.lg.blue.base }}\n                              onClick={() => setModalTeam(ts.xref)}\n                            >\n                              {ts.name}\n                            </Button>\n                          </Cell>\n                          <Cell>{ts.wins}</Cell>\n                          <Cell>{ts.losses}</Cell>\n                          <Cell>{ts.pct.toFixed(3)}</Cell>\n                        </Row>\n                      )}\n                    </Table>\n                  </>\n                )}\n              </Division>\n            ))}\n          </Divisions>\n        ))}\n      </Leagues>\n      <TeamResults\n        open={!!modalTeam}\n        playerMatches={modalPlayerMatches}\n        team={teamsByXref[modalTeam]}\n        teamMatches={modalTeamMatches}\n        setOpen={open => {\n          if (!open) {\n            setModalTeam(0);\n          }\n        }}\n      />\n    </>\n  );\n}\n\nexport default SeasonPage;\n","import React, { useEffect, useMemo, useState } from 'react';\nimport { useParams } from 'react-router-dom';\nimport { Routes, Route } from 'react-router-dom';\nimport Banner from '@leafygreen-ui/banner';\n\nimport { PageContent } from '../../components';\nimport { PlayerMatch, Season, Team, TeamMatch } from '../../types';\n\nimport Admin from './season_admin';\nimport Standings from './season_standings';\n\ninterface Props {\n  seasons: Season[];\n  loadPlayerMatches: (seasonXref: number) => Promise<PlayerMatch[]>;\n  loadTeams: (seasonXref: number) => Promise<Team[]>;\n  loadTeamMatches: (seasonXref: number) => Promise<TeamMatch[]>;\n  saveDivisions: (seasonXref: number, divisions: Season['divisions']) => Promise<void>;\n  saveTeams: (seasonXref: number, teams: Omit<Team, '_id' | 'season_xref' | 'schedule'>[]) => Promise<void>;\n}\n\nfunction SeasonPage({ seasons, loadPlayerMatches, loadTeams, loadTeamMatches, saveDivisions, saveTeams }: Props) {\n  const { year, term, type } = useParams();\n\n  const season = useMemo(() => {\n    return seasons.find(s => s.year + '' === year && s.term === term && s.type === type);\n  }, [seasons, year, term, type]);\n\n  const [teams, setTeams] = useState<Team[]>([]);\n  useEffect(() => {\n    if (!season) {\n      return;\n    }\n    loadTeams(season.xref).then(setTeams);\n  }, [loadTeams, season]);\n\n  const [teamMatches, setTeamMatches] = useState<TeamMatch[]>([]);\n  useEffect(() => {\n    if (!season) {\n      return;\n    }\n    loadTeamMatches(season.xref).then(setTeamMatches);\n  }, [loadTeamMatches, season]);\n\n  const [playerMatches, setPlayerMatches] = useState<PlayerMatch[]>([]);\n  useEffect(() => {\n    if (!season) {\n      return;\n    }\n    loadPlayerMatches(season.xref).then(setPlayerMatches);\n  }, [loadPlayerMatches, season]);\n\n  if (!season) {\n    return (\n      <PageContent>\n        <Banner variant=\"danger\">The specified season does not exist, please check your URL.</Banner>\n      </PageContent>\n    );\n  }\n  return (\n    <Routes>\n      <Route\n        path=\"/\"\n        element={<Standings season={season} playerMatches={playerMatches} teams={teams} teamMatches={teamMatches} />}\n      />\n      <Route\n        path=\"admin\"\n        element={\n          <Admin\n            season={season}\n            teams={teams}\n            saveDivisions={divisions => saveDivisions(season.xref, divisions)}\n            saveTeams={teams => saveTeams(season.xref, teams)}\n          />\n        }\n      />\n    </Routes>\n  );\n}\n\nexport default SeasonPage;\n","import React, { useState } from 'react';\nimport Checkbox from '@leafygreen-ui/checkbox';\nimport FormFooter from '@leafygreen-ui/form-footer';\nimport { Option, Select } from '@leafygreen-ui/select';\nimport TextInput from '@leafygreen-ui/text-input';\nimport { Body } from '@leafygreen-ui/typography';\n\nimport { isLeagueType, isSeasonTerm, DayOfWeek, LeagueType, Season, SeasonTerm } from '../../types';\n\ninterface Props {\n  saveSeason: (season: Omit<Season, '_id'>) => Promise<void>;\n}\n\nfunction NewSeasonForm({ saveSeason }: Props) {\n  const [yearInput, setYearInput] = useState('');\n  const [termInput, setTermInput] = useState('');\n  const [typeInput, setTypeInput] = useState('');\n  const [xrefInput, setXrefInput] = useState('');\n  const [name, setName] = useState('');\n  const [monday, setMonday] = useState(false);\n  const [tuesday, setTuesday] = useState(false);\n  const [wednesday, setWednesday] = useState(false);\n  const [thursday, setThursday] = useState(false);\n  const [friday, setFriday] = useState(false);\n  const [saturday, setSaturday] = useState(false);\n  const [sunday, setSunday] = useState(false);\n  const [numWeeksInput, setNumWeeksInput] = useState('');\n  const [errMsg, setErrMsg] = useState('');\n  return (\n    <>\n      <Select label=\"Year\" placeholder=\"Choose a year...\" value={yearInput} onChange={setYearInput}>\n        <Option value=\"2022\">2022</Option>\n      </Select>\n      <Select label=\"Term\" placeholder=\"Choose a term...\" value={termInput} onChange={setTermInput}>\n        <Option value=\"winter\">Winter</Option>\n        <Option value=\"spring\">Spring</Option>\n        <Option value=\"summer\">Summer</Option>\n        <Option value=\"fall\">Fall</Option>\n      </Select>\n      <Select label=\"League type\" placeholder=\"Choose a league...\" value={typeInput} onChange={setTypeInput}>\n        <Option value=\"team_8ball\">Team 8 Ball</Option>\n      </Select>\n      <TextInput\n        label=\"Amsterdam Key\"\n        description=\"Enter the Amsterdam site season id\"\n        onChange={e => setXrefInput(e.target.value)}\n        value={xrefInput}\n      />\n      <TextInput\n        label=\"Name\"\n        description=\"Enter the season name\"\n        onChange={e => setName(e.target.value)}\n        value={name}\n      />\n      <div>\n        <Body>Select the nights the league plays on</Body>\n        <div>\n          <Checkbox label=\"Monday\" checked={monday} onChange={e => setMonday(e.target.checked)} />\n          <Checkbox label=\"Tuesday\" checked={tuesday} onChange={e => setTuesday(e.target.checked)} />\n          <Checkbox label=\"Wednesday\" checked={wednesday} onChange={e => setWednesday(e.target.checked)} />\n          <Checkbox label=\"Thursday\" checked={thursday} onChange={e => setThursday(e.target.checked)} />\n          <Checkbox label=\"Friday\" checked={friday} onChange={e => setFriday(e.target.checked)} />\n          <Checkbox label=\"Saturday\" checked={saturday} onChange={e => setSaturday(e.target.checked)} />\n          <Checkbox label=\"Sunday\" checked={sunday} onChange={e => setSunday(e.target.checked)} />\n        </div>\n      </div>\n      <TextInput\n        label=\"Season length\"\n        description=\"Enter the number of weeks of the regular season\"\n        onChange={e => setNumWeeksInput(e.target.value)}\n        value={numWeeksInput}\n      />\n      <FormFooter\n        primaryButton={{\n          text: 'Save',\n          onClick: async e => {\n            e.stopPropagation();\n\n            var year = 0;\n            try {\n              year = parseInt(yearInput, 10);\n            } catch (e) {\n              setErrMsg(`invalid year value: ${e}`);\n              return;\n            }\n\n            var term: SeasonTerm = 'winter';\n            if (isSeasonTerm(termInput)) {\n              term = termInput;\n            } else {\n              setErrMsg(`invalid season term: ${termInput}`);\n              return;\n            }\n\n            var type: LeagueType = 'team_8ball';\n            if (isLeagueType(typeInput)) {\n              term = termInput;\n            } else {\n              setErrMsg(`invalid league type: ${termInput}`);\n              return;\n            }\n\n            var xref = 0;\n            try {\n              xref = parseInt(xrefInput, 10);\n            } catch (e) {\n              setErrMsg(`invalid amsterdam key: ${e}`);\n              return;\n            }\n\n            var numWeeks = 0;\n            try {\n              numWeeks = parseInt(numWeeksInput, 10);\n            } catch (e) {\n              setErrMsg(`invalid amsterdam key: ${e}`);\n              return;\n            }\n\n            const nights: DayOfWeek[] = [];\n            if (monday) {\n              nights.push('monday');\n            }\n            if (tuesday) {\n              nights.push('tuesday');\n            }\n            if (wednesday) {\n              nights.push('wednesday');\n            }\n            if (thursday) {\n              nights.push('thursday');\n            }\n            if (friday) {\n              nights.push('friday');\n            }\n            if (saturday) {\n              nights.push('saturday');\n            }\n            if (sunday) {\n              nights.push('sunday');\n            }\n\n            try {\n              await saveSeason({\n                year,\n                term,\n                type,\n                xref,\n                name,\n                num_weeks: numWeeks,\n                nights,\n                divisions: nights.reduce((acc, night) => ({ ...acc, [night]: [] }), {}),\n              });\n            } catch ({ error }) {\n              setErrMsg(`failed to save season: ${error}`);\n            }\n          },\n        }}\n        errorMessage={errMsg}\n      />\n    </>\n  );\n}\n\nexport default NewSeasonForm;\n","import React, { useState } from 'react';\nimport { useNavigate } from 'react-router-dom';\nimport styled from '@emotion/styled';\nimport Button from '@leafygreen-ui/button';\nimport Card from '@leafygreen-ui/card';\nimport Icon from '@leafygreen-ui/icon';\nimport { Menu, MenuItem } from '@leafygreen-ui/menu';\nimport Modal from '@leafygreen-ui/modal';\nimport { H2, Subtitle } from '@leafygreen-ui/typography';\n\nimport { useAtlas } from '../../realm';\nimport { Season } from '../../types';\n\nimport NewSeasonForm from './new_season_form';\n\nconst StyledPage = styled.div``;\n\nconst CardList = styled.div`\n  display: flex;\n  flex-wrap: wrap;\n`;\n\nconst CardTitle = styled.div`\n  display: flex;\n  justify-content: space-between;\n`;\n\ninterface Props {\n  seasons: Season[];\n  saveSeason: (season: Omit<Season, '_id'>) => Promise<void>;\n}\n\nfunction HomePage({ seasons, saveSeason }: Props) {\n  const navTo = useNavigate();\n  const { data } = useAtlas();\n\n  const [modalOpen, setModalOpen] = useState(false);\n\n  if (!data) {\n    return null;\n  }\n\n  return (\n    <StyledPage>\n      <H2>Pick a season:</H2>\n      <CardList>\n        {seasons.map(season => (\n          <Card\n            style={{ minWidth: '360px' }}\n            key={season.xref}\n            onClick={() => navTo(`${season.year}/${season.term}/${season.type}`)}\n          >\n            <CardTitle>\n              <Subtitle>{season.name}</Subtitle>\n              <Menu\n                align=\"bottom\"\n                justify=\"start\"\n                trigger={\n                  <Button type=\"button\" size=\"xsmall\" onClick={e => e.stopPropagation()} name=\"options\">\n                    <Icon glyph=\"Ellipsis\" />\n                  </Button>\n                }\n              >\n                <MenuItem>Delete season</MenuItem>\n              </Menu>\n            </CardTitle>\n          </Card>\n        ))}\n        <Card style={{ minWidth: '180px' }} onClick={() => setModalOpen(true)}>\n          Create a new season...\n        </Card>\n      </CardList>\n      <Modal open={modalOpen} setOpen={setModalOpen}>\n        <NewSeasonForm saveSeason={s => saveSeason(s).then(() => setModalOpen(false))} />\n      </Modal>\n    </StyledPage>\n  );\n}\n\nexport default HomePage;\n","import React, { useEffect, useState } from 'react';\nimport { Routes, Route } from 'react-router-dom';\n\nimport { useAtlas } from '../../realm';\nimport { Season, Team } from '../../types';\n\nimport SeasonDashboard from './season_dashboard';\nimport SeasonsDashboard from './seasons_dashboard';\n\nfunction Seasons() {\n  const { data } = useAtlas();\n\n  const [seasons, setSeasons] = useState<Season[]>([]);\n  useEffect(() => {\n    if (!data) {\n      return;\n    }\n    data.seasons().find().then(setSeasons);\n  }, [data]);\n\n  if (!data) {\n    return null; // unreachable in a protected route\n  }\n\n  const loadPlayerMatches = (seasonXref: number) => data.playerMatches().find({ season_xref: seasonXref });\n\n  const loadTeams = (seasonXref: number) => data.teams().find({ season_xref: seasonXref });\n\n  const loadTeamMatches = (seasonXref: number) => data.teamMatches().find({ season_xref: seasonXref });\n\n  const saveDivisions = (seasonXref: number, divisions: Season['divisions']) =>\n    data\n      .seasons()\n      .updateOne({ xref: seasonXref }, { $set: { divisions } })\n      .then(({ modifiedCount }) => {\n        if (modifiedCount !== 1) {\n          throw new Error('failed to update season ' + seasonXref);\n        }\n        setSeasons(\n          seasons.map(season => {\n            if (season.xref !== seasonXref) {\n              return season;\n            }\n            return { ...season, divisions };\n          }),\n        );\n      });\n\n  const saveSeason = (season: Omit<Season, '_id'>) =>\n    data\n      .seasons()\n      .insertOne(season)\n      .then(({ insertedId }) => setSeasons([...seasons, { ...season, _id: insertedId }]));\n\n  const saveTeams = (seasonXref: number, teams: Omit<Team, '_id' | 'season_xref' | 'schedule'>[]) =>\n    data\n      .teams()\n      .insertMany(teams.map(team => ({ ...team, season_xref: seasonXref, schedule: [] })))\n      .then(() => {});\n\n  return (\n    <Routes>\n      <Route path=\"/\" element={<SeasonsDashboard seasons={seasons} saveSeason={saveSeason} />} />\n      <Route\n        path=\":year/:term/:type/*\"\n        element={\n          <SeasonDashboard\n            seasons={seasons}\n            loadPlayerMatches={loadPlayerMatches}\n            loadTeams={loadTeams}\n            loadTeamMatches={loadTeamMatches}\n            saveDivisions={saveDivisions}\n            saveTeams={saveTeams}\n          />\n        }\n      />\n    </Routes>\n  );\n}\n\nexport default Seasons;\n","import React, { useEffect, useState } from 'react';\nimport styled from '@emotion/styled';\nimport { Option, Select } from '@leafygreen-ui/select';\nimport { Table, TableHeader, Row, Cell } from '@leafygreen-ui/table';\nimport { H2, H3 } from '@leafygreen-ui/typography';\n\nimport { useAtlas } from '../../realm';\nimport { Season, Team, TeamRecord } from '../../types';\n\nconst StyledMain = styled.div`\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n  gap: 12px;\n  justify-content: center;\n`;\n\nconst Leagues = styled.div`\n  display: flex;\n  flex-wrap: wrap;\n  justify-content: center;\n`;\n\nconst Divisions = styled.div`\n  display: flex;\n  flex-direction: column;\n  margin: 0 1rem;\n`;\n\nconst Division = styled.div`\n  display: flex;\n  flex-direction: column;\n  margin-bottom: 1rem;\n`;\n\ninterface Props {\n  seasons: Season[];\n}\n\ninterface MatchStats {\n  wins: number;\n  losses: number;\n  gamesWon: number;\n  gamesTotal: 0;\n}\n\nfunction StandingsPage({ seasons }: Props) {\n  const { data } = useAtlas();\n\n  const [selectedSeason, setSelectedSeason] = useState<Season>();\n\n  const [teamsByDivision, setTeamsByDivision] = useState<Record<string, TeamRecord[]>>({});\n  useEffect(() => {\n    if (!data || !selectedSeason) {\n      return;\n    }\n    Promise.all([\n      data.teamMatches().find({ season_xref: selectedSeason.xref }),\n      data.teams().find({ season_xref: selectedSeason.xref }),\n    ]).then(([teamMatches, teams]) => {\n      const teamResults = teamMatches.reduce<Record<number, MatchStats>>((acc, teamMatch) => {\n        const leftTeam = acc[teamMatch.teams[0].xref] || { wins: 0, losses: 0, gamesWon: 0, gamesTotal: 0 };\n        // teamMatch.left_team.win ? leftTeam.wins++ : leftTeam.losses++;\n        leftTeam.gamesWon += teamMatch.teams[0].games_won;\n        leftTeam.gamesTotal += teamMatch.teams[0].games_won + teamMatch.teams[1].games_won;\n\n        const rightTeam = acc[teamMatch.teams[1].xref] || { wins: 0, losses: 0, gamesWon: 0, gamesTotal: 0 };\n        // teamMatch.right_team.win ? rightTeam.wins++ : rightTeam.losses++;\n        rightTeam.gamesWon += teamMatch.teams[1].games_won;\n        rightTeam.gamesTotal += teamMatch.teams[1].games_won + teamMatch.teams[0].games_won;\n\n        if (teamMatch.teams[0].win) {\n          leftTeam.wins++;\n          rightTeam.losses++;\n        } else if (teamMatch.teams[1].win) {\n          leftTeam.losses++;\n          rightTeam.wins++;\n        }\n\n        return {\n          ...acc,\n          [teamMatch.teams[0].xref]: leftTeam,\n          [teamMatch.teams[1].xref]: rightTeam,\n        };\n      }, {});\n\n      const teamsByDivision = teams.reduce<Record<string, Team[]>>(\n        (acc, team) => ({\n          ...acc,\n          [team.division_name]: [...(acc[team.division_name] || []), team],\n        }),\n        {},\n      );\n\n      setTeamsByDivision(\n        Object.entries(teamsByDivision).reduce((acc, [division, teams]) => {\n          const standings = teams.map(team => {\n            const results = teamResults[team.xref];\n            return {\n              ...team,\n              rank: 0,\n              wins: results.wins,\n              losses: results.losses,\n              pct: results.gamesWon / results.gamesTotal,\n            };\n          });\n\n          standings.sort((s1, s2) =>\n            s1.wins === s2.wins\n              ? s1.losses === s2.losses\n                ? s2.pct - s1.pct\n                : s1.losses - s2.losses\n              : s2.wins - s1.wins,\n          );\n\n          return {\n            ...acc,\n            [division]: standings.map((s, i) => ({ ...s, rank: i + 1 })),\n          };\n        }, {}),\n      );\n    });\n  }, [data, selectedSeason]);\n\n  if (!data) {\n    return null;\n  }\n\n  return (\n    <StyledMain>\n      <Select\n        style={{ width: '360px' }}\n        label=\"Choose a season:\"\n        placeholder=\"Select...\"\n        value={selectedSeason?.name || ''}\n        onChange={val => setSelectedSeason(seasons.find(season => season.name === val))}\n      >\n        {seasons.map(({ xref, name }) => (\n          <Option key={xref} value={name}>\n            {name}\n          </Option>\n        ))}\n      </Select>\n      {selectedSeason && (\n        <Leagues>\n          {selectedSeason.nights.map(night => (\n            <Divisions key={night}>\n              <H2 style={{ marginBottom: '1rem' }}>{night}</H2>\n              {selectedSeason.divisions[night]!.map(division => (\n                <Division key={division}>\n                  {teamsByDivision[division] && (\n                    <>\n                      <H3>{division}</H3>\n                      <Table\n                        data={teamsByDivision[division]}\n                        columns={[\n                          <TableHeader label=\"Place\" />,\n                          <TableHeader label=\"Team Name\" />,\n                          <TableHeader label=\"W's\" />,\n                          <TableHeader label=\"L's\" />,\n                          <TableHeader label=\"PCT.\" />,\n                        ]}\n                      >\n                        {({ datum: ts }) => (\n                          <Row key={ts.xref}>\n                            <Cell>{ts.rank}</Cell>\n                            <Cell>{ts.name}</Cell>\n                            <Cell>{ts.wins}</Cell>\n                            <Cell>{ts.losses}</Cell>\n                            <Cell>{ts.pct.toFixed(3)}</Cell>\n                          </Row>\n                        )}\n                      </Table>\n                    </>\n                  )}\n                </Division>\n              ))}\n            </Divisions>\n          ))}\n        </Leagues>\n      )}\n    </StyledMain>\n  );\n}\n\nexport default StandingsPage;\n","import React from 'react';\nimport { useTheme } from '@emotion/react';\nimport styled from '@emotion/styled';\nimport Card from '@leafygreen-ui/card';\nimport { Body, Subtitle } from '@leafygreen-ui/typography';\n\nimport { PlayerMatchup, PlayerResult } from '../../types';\n\nconst StyledMatch = styled<any>(Card)`\n  width: 328px;\n  display: flex;\n  justify-content: space-between;\n  background-color: ${({ bg }) => bg};\n  ${({ first }) => !first && { marginTop: '1rem' }}\n`;\n\nconst Player = styled.div`\n  display: flex;\n  flex-direction: column;\n`;\n\ninterface Props {\n  matchup: PlayerMatchup;\n  first?: boolean;\n}\n\nfunction Match({ first, matchup }: Props) {\n  const theme = useTheme();\n  return (\n    <StyledMatch first={first} bg={matchup.self.win ? theme.colors.lg.green.light2 : theme.colors.lg.red.light2}>\n      <Player>\n        <Subtitle>{matchup.self.name}</Subtitle>\n        <Body>{`Handicap: ${matchup.self.handicap}`}</Body>\n        <Body>{`Games Won: ${matchup.self.games_won}`}</Body>\n      </Player>\n      <Player>\n        <Subtitle>{matchup.opp.name}</Subtitle>\n        <Body>{`Handicap: ${matchup.opp.handicap}`}</Body>\n        <Body>{`Games Won: ${matchup.opp.games_won}`}</Body>\n      </Player>\n    </StyledMatch>\n  );\n}\n\nexport default Match;\n","import React, { useEffect, useMemo, useState } from 'react';\nimport styled from '@emotion/styled';\nimport ExpandableCard from '@leafygreen-ui/expandable-card';\nimport { Option, Select } from '@leafygreen-ui/select';\n\nimport { useAtlas } from '../../realm';\nimport { PlayerMatch, PlayerMatchup, Season, Team, TeamMatch, TeamMatchup } from '../../types';\n\nimport Match from './match';\n\nconst StyledMain = styled.div`\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n  gap: 12px;\n  justify-content: center;\n`;\n\nconst StyledSelects = styled.div`\n  display: flex;\n  flex-wrap: wrap;\n  justify-content: center;\n`;\n\nconst Matches = styled.div`\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n  gap: 12px;\n  justify-content: center;\n  max-width: 720px;\n`;\n\nconst MatchRound = styled.div`\n  display: flex;\n  flex-wrap: wrap;\n  justify-content: center;\n  gap: 12px;\n`;\n\ninterface Props {\n  seasons: Season[];\n  teams: Team[];\n}\n\nfunction TeamPage({ seasons, teams }: Props) {\n  const { data } = useAtlas();\n\n  const [selectedSeason, setSelectedSeason] = useState<Season>();\n  const [selectedTeam, setSelectedTeam] = useState<Team>();\n\n  const team = useMemo(() => teams.find(t => t.name === selectedTeam?.name), [selectedTeam, teams]);\n\n  const [teamMatchesById, setTeamMatchesById] = useState<Record<string, TeamMatch>>({});\n  const [playerMatchesById, setPlayerMatchesById] = useState<Record<string, PlayerMatch[]>>({});\n  useEffect(() => {\n    if (!data) {\n      return;\n    }\n\n    Promise.all([\n      data.teamMatches().find({\n        season_xref: selectedSeason?.xref,\n        'teams.xref': selectedTeam?.xref,\n      }),\n      data.playerMatches().find({\n        season_xref: selectedSeason?.xref,\n        'players.team.xref': selectedTeam?.xref,\n      }),\n    ]).then(([teamMatches, playerMatches]) => {\n      setTeamMatchesById(\n        teamMatches.reduce<Record<number, TeamMatch>>((acc, teamMatch) => ({ ...acc, [teamMatch._id]: teamMatch }), {}),\n      );\n\n      const playerMatchesById = playerMatches.reduce<Record<string, PlayerMatch[]>>(\n        (acc, playerMatch) => ({\n          ...acc,\n          [playerMatch.match_id]: [...(acc[playerMatch.match_id] || []), playerMatch],\n        }),\n        {},\n      );\n      Object.entries(playerMatchesById).forEach(([teamMatchId, playerMatches]) => {\n        playerMatches.sort((m1, m2) => m1.seq - m2.seq);\n        playerMatchesById[teamMatchId] = playerMatches;\n      });\n      setPlayerMatchesById(playerMatchesById);\n    });\n  }, [data, selectedSeason?.xref, selectedTeam?.xref, team?.night]);\n\n  if (!data) {\n    return null;\n  }\n\n  return (\n    <StyledMain>\n      <StyledSelects>\n        <Select\n          style={{ width: '360px' }}\n          label=\"Choose a season:\"\n          placeholder=\"Select...\"\n          onChange={val => setSelectedSeason(seasons.find(s => s.name === val))}\n        >\n          {seasons.map(({ xref, name }) => (\n            <Option key={xref} value={name}>\n              {name}\n            </Option>\n          ))}\n        </Select>\n        <Select\n          style={{ width: '360px' }}\n          label=\"Choose a team:\"\n          placeholder=\"Select...\"\n          disabled={!selectedSeason}\n          onChange={val => setSelectedTeam(teams.find(t => t.name === val))}\n        >\n          {teams\n            .filter(team => team.season_xref === selectedSeason?.xref)\n            .map(({ xref, name }) => (\n              <Option key={xref} value={name}>\n                {name}\n              </Option>\n            ))}\n        </Select>\n      </StyledSelects>\n      {selectedTeam && (\n        <Matches>\n          {(team?.schedule || []).map(({ display, match_id, opp }) => {\n            const teamMatchup = newTeamMatchup(teamMatchesById[match_id || ''] || { teams: [] }, selectedTeam?.xref);\n\n            const [match11, match12, match21, match22, ...tb] = playerMatchesById[match_id || ''] || [];\n\n            const matchup11 = newPlayerMatchup(match11 || { players: [] }, selectedTeam?.xref);\n            const matchup12 = newPlayerMatchup(match12 || { players: [] }, selectedTeam?.xref);\n            const matchup21 = newPlayerMatchup(match21 || { players: [] }, selectedTeam?.xref);\n            const matchup22 = newPlayerMatchup(match22 || { players: [] }, selectedTeam?.xref);\n            const matchupTb = !tb.length ? undefined : newPlayerMatchup(tb[0], selectedTeam?.xref);\n\n            return (\n              <ExpandableCard\n                key={display}\n                title={`${display}: vs. ${opp.name}`}\n                description={!match_id ? '' : matchDescription(teamMatchup)}\n              >\n                {!match_id && <>this match hasn't happened yet, do you want a scouting report?</>}\n                {match_id && (\n                  <>\n                    <MatchRound>\n                      <Match matchup={matchup11} />\n                      <Match matchup={matchup12} />\n                    </MatchRound>\n                    <MatchRound>\n                      <Match matchup={matchup21} />\n                      <Match matchup={matchup22} />\n                    </MatchRound>\n                    {(matchupTb && <Match matchup={matchupTb} />) || null}\n                  </>\n                )}\n              </ExpandableCard>\n            );\n          })}\n        </Matches>\n      )}\n    </StyledMain>\n  );\n}\n\nexport default TeamPage;\n\nfunction matchDescription({ self, opp }: TeamMatchup) {\n  return `${self.win ? 'W' : 'L'}: ${self.games_won} - ${opp.games_won} (${self.matches_won} - ${opp.matches_won})`;\n}\n\nfunction newTeamMatchup(teamMatch: Pick<TeamMatch, 'teams'>, selectedTeamXref?: number) {\n  return teamMatch.teams.reduce<TeamMatchup>(\n    (acc, team) => {\n      if (selectedTeamXref === team.xref) {\n        return { ...acc, self: team };\n      }\n      return { ...acc, opp: team };\n    },\n    {\n      self: { xref: 0, name: '', games_won: 0, matches_won: 0 },\n      opp: { xref: 0, name: '', games_won: 0, matches_won: 0 },\n    },\n  );\n}\n\nfunction newPlayerMatchup(playerMatch: Pick<PlayerMatch, 'players'>, selectedTeamXref?: number) {\n  return playerMatch.players.reduce<PlayerMatchup>(\n    (acc, player) => {\n      if (selectedTeamXref === player.team.xref) {\n        return { ...acc, self: player };\n      }\n      return { ...acc, opp: player };\n    },\n    {\n      self: { xref: 0, name: '', team: { xref: 0, name: '' }, handicap: 0, games_won: 0 },\n      opp: { xref: 0, name: '', team: { xref: 0, name: '' }, handicap: 0, games_won: 0 },\n    },\n  );\n}\n","import React, { useEffect, useState } from 'react';\nimport { Routes, Route } from 'react-router-dom';\nimport { useMediaQuery } from 'react-responsive';\n\nimport { useAtlas } from '../realm';\nimport { Player, Season, Team } from '../types';\n\nimport { LoginPage, ProtectedRoute } from './auth';\nimport Header from './header';\nimport MobileHeader from './header_mobile';\nimport HomePage from './home';\nimport PlayersPage from './players';\nimport Sandbox from './sandbox';\nimport SeasonsPage from './seasons';\nimport StandingsPage from './standings';\nimport TeamPage from './team';\n\nfunction App() {\n  const { data } = useAtlas();\n\n  const [seasons, setSeasons] = useState<Season[]>([]);\n  useEffect(() => {\n    if (!data) {\n      return;\n    }\n    data.seasons().find().then(setSeasons);\n  }, [data]);\n\n  const [teams, setTeams] = useState<Team[]>([]);\n  useEffect(() => {\n    if (!data) {\n      return;\n    }\n    data.teams().find().then(setTeams);\n  }, [data]);\n\n  const [players, setPlayers] = useState<Player[]>([]);\n  useEffect(() => {\n    if (!data) {\n      return;\n    }\n    data.players().find().then(setPlayers);\n  }, [data]);\n\n  const isMobile = useMediaQuery({ query: '(max-width: 720px)' });\n\n  return (\n    <>\n      {isMobile ? <MobileHeader /> : <Header />}\n      <Routes>\n        <Route\n          path=\"/\"\n          element={\n            <ProtectedRoute>\n              <HomePage />\n            </ProtectedRoute>\n          }\n        />\n        <Route\n          path=\"seasons/*\"\n          element={\n            <ProtectedRoute>\n              <SeasonsPage />\n            </ProtectedRoute>\n          }\n        />\n        <Route\n          path=\"/standings\"\n          element={\n            <ProtectedRoute>\n              <StandingsPage seasons={seasons} />\n            </ProtectedRoute>\n          }\n        />\n        <Route\n          path=\"team\"\n          element={\n            <ProtectedRoute>\n              <TeamPage seasons={seasons} teams={teams} />\n            </ProtectedRoute>\n          }\n        />\n        <Route\n          path=\"players\"\n          element={\n            <ProtectedRoute>\n              <PlayersPage seasons={seasons} teams={teams} players={players} />\n            </ProtectedRoute>\n          }\n        />\n        <Route path=\"login\" element={<LoginPage />} />\n        <Route path=\"sandbox\" element={<Sandbox />} />\n      </Routes>\n    </>\n  );\n}\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import { css } from '@emotion/react'\n\nconst CDN = 'https://d2va9gm4j17fy9.cloudfront.net';\nconst fontsURL = `${CDN}/fonts`;\n\nconst docStyles = css`\n  @font-face {\n    font-family: 'Akzidenz';\n    font-weight: normal;\n    src: url('${fontsURL}/akzidgrostdreg.eot');\n    /* IE9 Compat Modes */\n    src: url('${fontsURL}/akzidgrostdreg.eot?#iefix')\n        format('embedded-opentype'),\n      /* Pretty Modern Browsers */ url('${fontsURL}/akzidgrostdreg.ttf')\n        format('truetype'),\n      /* Safari, Android, iOS */ url('${fontsURL}/akzidgrostdreg.svg#Akzidenz')\n        format('svg');\n    /* Legacy iOS */\n  }\n\n  @font-face {\n    font-family: 'Akzidenz';\n    font-weight: 600;\n    src: url('${fontsURL}/akzidgrostdmed.eot');\n    /* IE9 Compat Modes */\n    src: url('${fontsURL}/akzidgrostdmed.eot?#iefix')\n        format('embedded-opentype'),\n      /* IE6-IE8 */ url('${fontsURL}/akzidgrostdmed.woff') format('woff'),\n      /* Pretty Modern Browsers */ url('${fontsURL}/akzidgrostdmed.ttf')\n        format('truetype'),\n      /* Safari, Android, iOS */ url('${fontsURL}/akzidgrostdmed.svg#Akzidenz')\n        format('svg');\n    /* Legacy iOS */\n  }\n\n  @font-face {\n    font-family: 'Akzidenz';\n    font-weight: bold;\n    src: url('${fontsURL}/akzidgrostdmed.eot');\n    /* IE9 Compat Modes */\n    src: url('${fontsURL}/akzidgrostdmed.eot?#iefix')\n        format('embedded-opentype'),\n      /* IE6-IE8 */ url('${fontsURL}/akzidgrostdmed.woff') format('woff'),\n      /* Pretty Modern Browsers */ url('${fontsURL}/akzidgrostdmed.ttf')\n        format('truetype'),\n      /* Safari, Android, iOS */ url('${fontsURL}/akzidgrostdmed.svg#Akzidenz')\n        format('svg');\n    /* Legacy iOS */\n  }\n\n  html {\n    font-family: 'Akzidenz', 'Helvetica Neue', Helvetica, Arial, sans-serif;\n    font-weight: normal;\n    font-style: normal;\n  }\n\n  body {\n    margin: 0;\n  }\n\n  *,\n  *:before,\n  *:after {\n    box-sizing: border-box;\n  }\n`\n\n\nconst meyersWebReset = css`\n/* http://meyerweb.com/eric/tools/css/reset/\n   v2.0 | 20110126\n   License: none (public domain)\n*/\nhtml, body, div, span, applet, object, iframe,\nh1, h2, h3, h4, h5, h6, p, blockquote, pre,\na, abbr, acronym, address, big, cite, code,\ndel, dfn, em, img, ins, kbd, q, s, samp,\nsmall, strike, strong, sub, sup, tt, var,\nb, u, i, center,\ndl, dt, dd, ol, ul, li,\nfieldset, form, label, legend,\ntable, caption, tbody, tfoot, thead, tr, th, td,\narticle, aside, canvas, details, embed,\nfigure, figcaption, footer, header, hgroup,\nmenu, nav, output, ruby, section, summary,\ntime, mark, audio, video {\n\tmargin: 0;\n\tpadding: 0;\n\tborder: 0;\n\tfont-size: 100%;\n\tfont: inherit;\n\tvertical-align: baseline;\n}\n/* HTML5 display-role reset for older browsers */\narticle, aside, details, figcaption, figure,\nfooter, header, hgroup, menu, nav, section {\n\tdisplay: block;\n}\nbody {\n\tline-height: 1;\n}\nol, ul {\n\tlist-style: none;\n}\nblockquote, q {\n\tquotes: none;\n}\nblockquote:before, blockquote:after,\nq:before, q:after {\n\tcontent: '';\n\tcontent: none;\n}\ntable {\n\tborder-collapse: collapse;\n\tborder-spacing: 0;\n}\n`;\n\n\nfunction styles() {\n  return [\n    meyersWebReset,\n    docStyles,\n  ]\n}\n\nexport default styles;\n","import { palette } from '@leafygreen-ui/palette';\n\nconst theme = {\n  colors: {\n    black: '#000000',\n    white: '#ffffff',\n    offwhite: '#fffed1',\n    grays: {\n      base: '#282c34',\n    },\n    reds: {\n      base: '#4d0a05',\n      light1: '#8a1a10',\n      light2: '#b42619',\n      light3: '#df3121',\n    },\n    blues: {\n      light1: '#61dafb',\n    },\n    lg: palette,\n  },\n  typography: {\n    fonts: {\n      code: `source-code-pro, Menlo, Monaco, Consolas, 'Courier New', monospace`,\n    },\n  },\n};\n\nexport type Theme = typeof theme;\nexport default theme;\n","import React from 'react';\nimport { Global, ThemeProvider } from '@emotion/react';\nimport LeafygreenProvider from '@leafygreen-ui/leafygreen-provider';\nimport ReactDOM from 'react-dom/client';\nimport { BrowserRouter } from 'react-router-dom';\n\nimport App from './app';\nimport { AtlasProvider, RealmProvider } from './realm';\nimport reportWebVitals from './reportWebVitals';\nimport styles from './styles';\nimport theme from './theme';\n\nconst root = ReactDOM.createRoot(document.getElementById('root') as HTMLElement);\nroot.render(\n  <React.StrictMode>\n    <BrowserRouter basename=\"/amsterdam\">\n      <RealmProvider>\n        <AtlasProvider>\n          <LeafygreenProvider>\n            <ThemeProvider theme={theme}>\n              <Global styles={styles} />\n              <App />\n            </ThemeProvider>\n          </LeafygreenProvider>\n        </AtlasProvider>\n      </RealmProvider>\n    </BrowserRouter>\n  </React.StrictMode>,\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n// reportWebVitals(console.log);\n"],"sourceRoot":""}