{"version":3,"sources":["realm/use_realm.tsx","realm/use_atlas.tsx","app/auth/login.tsx","app/auth/protected_route.tsx","app/logo.tsx","app/header.tsx","app/header_mobile.tsx","app/home/standings.tsx","app/home/home.tsx","app/players/players.tsx","app/sandbox/realm.tsx","app/sandbox/logo.svg","app/sandbox/sandbox.tsx","app/team/match.tsx","app/team/team.tsx","app/app.tsx","reportWebVitals.ts","styles.ts","theme.ts","index.tsx"],"names":["RealmContext","createContext","RealmProvider","children","app","Realm","id","useState","currentUser","user","setUser","login","email","password","logIn","emailPassword","console","error","loginAnonymous","log","anonymous","logout","logOut","Provider","value","useRealm","realm","useContext","Error","AtlasContext","AtlasProvider","data","setData","useEffect","profile","mongoClient","atlasData","useAtlas","atlas","players","db","collection","schedule","seasons","teams","teamMatches","playerMatches","StyledLogin","styled","div","LoginContainer","LoginAnonContainer","LoginPage","username","setUsername","setPassword","from","window","location","state","pathname","to","replace","style","marginBottom","label","placeholder","onChange","e","target","type","marginTop","variant","onClick","ProtectedRoute","useLocation","leafAnimation","keyframes","StyledLogo","MongoDBLogoMark","Logo","height","StyledHeader","NavLinks","ul","UserInfo","Header","margin","textDecoration","textAlign","providerType","header","menuOpen","setMenuOpen","flex","align","justify","open","trigger","size","glyph","href","description","Leagues","Divisions","Division","Standings","season","teamsByDivision","setTeamsByDivision","Promise","all","find","season_code","code","then","teamResults","reduce","acc","teamMatch","leftTeam","left_team","wins","losses","gamesWon","gamesTotal","games_won","right_team","rightTeam","win","team","division_name","Object","entries","division","standings","map","results","key","rank","pct","sort","s1","s2","s","i","leagues","league","divisions","columns","ts","datum","name","toFixed","StyledMain","HomePage","selectedSeason","setSelectedSeason","width","val","PlayersPage","UserDetail","Login","StyledSandbox","SandboxHeader","theme","colors","grays","base","white","SandboxLink","a","blues","light1","sandboxLogoSpin","SandboxLogo","img","Sandbox","src","logo","alt","rel","StyledMatch","Card","backgroundColor","lg","green","light2","loss","red","Player","Match","self","opp","handicap","StyledSelects","Matches","MatchRound","TeamPage","selectedTeam","setSelectedTeam","useMemo","t","setSchedule","day","$or","weeks","teamMatchesByWeek","week_num","playerMatchesByWeek","playerMatch","week","matches","fifth_set","seq","is_forfeit","left_player","right_player","m1","m2","w1","w2","disabled","filter","week_name","isFutureMatch","length","match11","match12","match21","match22","tb","title","matches_won","match","App","setSeasons","setTeams","setPlayers","isMobile","useMediaQuery","query","path","element","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","fontsURL","docStyles","css","meyersWebReset","styles","black","offwhite","reds","light3","palette","typography","fonts","ReactDOM","createRoot","document","getElementById","render","StrictMode","basename"],"mappings":"iRAUMA,EAAeC,wBAAiC,MAMzCC,EAAgB,SAAC,GAAsC,IAApCC,EAAmC,EAAnCA,SACxBC,EAAM,IAAIC,IAAU,CAAEC,GAAI,oBAEhC,EAAwBC,mBAA4BH,EAAII,aAAxD,mBAAOC,EAAP,KAAaC,EAAb,KAEMC,EAAK,iDAAG,WAAOC,EAAeC,GAAtB,oGAEJT,EAAIU,MAAMT,IAAkBU,cAAcH,EAAOC,IAF7C,cAIVH,EAAQN,EAAII,aAJF,kBAKHJ,EAAII,aALD,uCAOVQ,QAAQC,MAAM,kBAAd,MACAP,EAAQ,MARE,kBASH,MATG,yDAAH,wDAaLQ,EAAc,iDAAG,wGAEnBF,QAAQG,IAAI,0BAFO,SAGbf,EAAIU,MAAMT,IAAkBe,aAHf,cAKnBV,EAAQN,EAAII,aALO,kBAMZJ,EAAII,aANQ,uCAQnBQ,QAAQC,MAAM,kBAAd,MACAP,EAAQ,MATW,kBAUZ,MAVY,yDAAH,qDAcdW,EAAM,iDAAG,qGAEPjB,EAAII,YAFG,gCAGHJ,EAAII,YAAYc,SAHb,sDAMXN,QAAQC,MAAM,mBAAd,MANW,uBAQXP,EAAQ,MARG,0EAAH,qDAYZ,OAAO,cAACV,EAAauB,SAAd,CAAuBC,MAAO,CAAEb,QAAOO,iBAAgBG,SAAQZ,QAA/D,SAAwEN,KAGpEsB,EAAW,WACtB,IAAMC,EAAQC,qBAAW3B,GACzB,GAAc,OAAV0B,EACF,MAAM,IAAIE,MAAM,gDAElB,OAAOF,GC1DHG,EAAe5B,wBAAiC,MAMzC6B,EAAgB,SAAC,GAAsC,IAApC3B,EAAmC,EAAnCA,SACtBM,EAASgB,IAAThB,KAER,EAAwBF,mBAAuD,MAA/E,mBAAOwB,EAAP,KAAaC,EAAb,KAYA,OAVAC,qBAAU,WACRjB,QAAQG,IAAI,iCACC,OAATV,IAGJO,QAAQG,IAAIV,GACZO,QAAQG,IAAIV,EAAKyB,SACjBF,EAAQvB,EAAK0B,YAAY,YACxB,CAAC1B,IAEG,cAACoB,EAAaN,SAAd,CAAuBC,MAAO,CAAEO,KAAMK,EAAUL,IAAhD,SAA0D5B,KAGtDkC,EAAW,WACtB,IAAMC,EAAQX,qBAAWE,GACzB,GAAc,OAAVS,EACF,MAAM,IAAIV,MAAM,gDAElB,OAAOU,GAGT,SAASF,EAAUL,GACjB,OAAKA,EAGE,CACLQ,QAAS,kBAAMR,EAAKS,GAAG,aAAaC,WAAmB,YACvDC,SAAU,kBAAMX,EAAKS,GAAG,aAAaC,WAA0B,aAC/DE,QAAS,kBAAMZ,EAAKS,GAAG,aAAaC,WAAmB,YACvDG,MAAO,kBAAMb,EAAKS,GAAG,aAAaC,WAAiB,UACnDI,YAAa,kBAAMd,EAAKS,GAAG,aAAaC,WAAsB,iBAC9DK,cAAe,kBAAMf,EAAKS,GAAG,aAAaC,WAAwB,oBAR3D,K,mDCnCLM,EAAcC,IAAOC,IAAV,iGAMXC,EAAiBF,IAAOC,IAAV,yFAMdE,EAAqBH,IAAOC,IAAV,sGAoDTG,MA9Cf,WAAsB,IAAD,IACnB,EAAgC7C,mBAAS,IAAzC,mBAAO8C,EAAP,KAAiBC,EAAjB,KACA,EAAgC/C,mBAAS,IAAzC,mBAAOM,EAAP,KAAiB0C,EAAjB,KAEA,EAAwC9B,IAAhCd,EAAR,EAAQA,MAAOO,EAAf,EAAeA,eAAgBT,EAA/B,EAA+BA,KAE3B+C,GAAO,UAACC,OAAOC,SAAiBC,aAAzB,mBAAgCH,YAAhC,eAAsCI,WAAY,IAE7D,OAAInD,EACK,cAAC,IAAD,CAAUoD,GAAIL,EAAMM,SAAO,IAIlC,eAACf,EAAD,WACE,eAACG,EAAD,WACE,cAAC,IAAD,CAAMa,MAAO,CAAEC,aAAc,QAA7B,kDACA,cAAC,IAAD,CACEC,MAAM,WACNC,YAAY,yBACZC,SAAU,SAAAC,GACRd,EAAYc,EAAEC,OAAO7C,QAEvBA,MAAO6B,IAET,cAAC,IAAD,CACEY,MAAM,WACNK,KAAK,WACLH,SAAU,SAAAC,GACRb,EAAYa,EAAEC,OAAO7C,QAEvBA,MAAOX,IAET,cAAC,IAAD,CAAQkD,MAAO,CAAEQ,UAAW,QAAUC,QAAQ,UAAUC,QAAS,kBAAM9D,EAAM0C,EAAUxC,IAAvF,sBAIF,eAACsC,EAAD,WACE,cAAC,IAAD,CAAMY,MAAO,CAAEC,aAAc,UAA7B,kCACA,cAAC,IAAD,CAAQQ,QAAQ,iBAAiBC,QAAS,kBAAMvD,KAAhD,sCC7COwD,I,IAAAA,EAXf,YAA8C,IAApBvE,EAAmB,EAAnBA,SAClBM,EAASgB,IAAThB,KACFiD,EAAWiB,cAEf,OAAKlE,EAIEN,EAHE,cAAC,IAAD,CAAU0D,GAAG,SAASF,MAAO,CAAEH,KAAME,GAAYI,SAAO,K,SCT7Dc,EAAgBC,oBAAH,qHASbC,EAAa9B,YAAO+B,IAAP/B,CAAH,kKAGD4B,GAQAI,I,MAAAA,EAJf,WACE,OAAO,cAACF,EAAD,CAAYf,MAAO,CAAEQ,UAAW,EAAGP,aAAc,GAAKiB,OAAQ,MCZjEC,EAAelC,IAAOC,IAAV,gKAQZkC,EAAWnC,IAAOoC,GAAV,0FAMRC,EAAWrC,IAAOC,IAAV,kGAsCCqC,I,EAAAA,EAhCf,WACE,MAAyB7D,IAAjBJ,EAAR,EAAQA,OAAQZ,EAAhB,EAAgBA,KAEhB,OACE,eAACyE,EAAD,WACE,eAACC,EAAD,WACE,cAAC,IAAD,CAAMpB,MAAO,CAAEwB,OAAQ,OAAQC,eAAgB,QAAU3B,GAAG,IAA5D,uBAGA,cAAC,IAAD,CAAME,MAAO,CAAEwB,OAAQ,OAAQC,eAAgB,QAAU3B,GAAG,QAA5D,0BAGA,cAAC,IAAD,CAAME,MAAO,CAAEwB,OAAQ,OAAQC,eAAgB,QAAU3B,GAAG,WAA5D,mCAIF,uBAAME,MAAO,CAAE0B,UAAW,UAA1B,UACE,cAAC,IAAD,kCACA,cAAC,EAAD,OAEDhF,GACC,eAAC4E,EAAD,WACE,cAAC,IAAD,CAAQb,QAAQ,iBAAiBC,QAASpD,EAA1C,oBAGA,cAAC,IAAD,UAA6B,cAAtBZ,EAAKiF,aAA+B,QAAUjF,EAAKyB,QAAQtB,OAASH,EAAKH,Y,yBC5CpF4E,GAAelC,IAAO2C,OAAV,8HA2CHL,I,SAAAA,GApCf,WACE,MAAgC/E,oBAAS,GAAzC,mBAAOqF,EAAP,KAAiBC,EAAjB,KACA,EAAyBpE,IAAjBJ,EAAR,EAAQA,OAAQZ,EAAhB,EAAgBA,KAEhB,OACE,eAAC,GAAD,WACE,cAAC,EAAD,IACA,cAAC,IAAD,CAAIsD,MAAO,CAAE+B,KAAM,GAAnB,iCACA,eAAC,KAAD,CACEC,MAAM,SACNC,QAAQ,MACRC,KAAML,EACNM,QACE,cAAC,IAAD,CAAYC,KAAK,SAAS,aAAW,YAAY1B,QAAS,kBAAMoB,GAAaD,IAA7E,SACE,cAAC,IAAD,CAAMQ,MAAM,eANlB,UAUE,cAAC,KAAD,CAAUC,KAAK,aAAf,uBACA,cAAC,KAAD,CAAUA,KAAK,kBAAf,0BACA,cAAC,KAAD,CAAUA,KAAK,qBAAf,gCACA,cAAC,KAAD,KACE5F,GAAQ,cAAC,KAAD,CAAU4F,KAAK,mBAAf,mBACT5F,GACC,cAAC,KAAD,CACEgE,QAASpD,EACTiF,YAAmC,cAAtB7F,EAAKiF,aAA+B,WAAajF,EAAKyB,QAAQtB,OAASH,EAAKH,GAF3F,2B,4CClCJiG,GAAUvD,IAAOC,IAAV,gGAMPuD,GAAYxD,IAAOC,IAAV,8FAMTwD,GAAWzD,IAAOC,IAAV,mGAyICyD,I,GAAAA,GAxHf,YAAuC,IAAlBC,EAAiB,EAAjBA,OACX5E,EAASM,IAATN,KAER,EAA8CxB,mBAAyC,IAAvF,mBAAOqG,EAAP,KAAwBC,EAAxB,KAyEA,OAxEA5E,qBAAU,WACHF,GAAS4E,GAGdG,QAAQC,IAAI,CACVhF,EAAKc,cAAcmE,KAAK,CAAEC,YAAaN,EAAOO,OAC9CnF,EAAKa,QAAQoE,KAAK,CAAE,cAAeL,EAAOO,SACzCC,MAAK,YAA2B,IAAD,mBAAxBtE,EAAwB,KAAXD,EAAW,KAC1BwE,EAAcvE,EAAYwE,QAAmC,SAACC,EAAKC,GAAe,IAAD,EAC/EC,EAAWF,EAAIC,EAAUE,UAAUP,OAAS,CAAEQ,KAAM,EAAGC,OAAQ,EAAGC,SAAU,EAAGC,WAAY,GAEjGL,EAASI,UAAYL,EAAUE,UAAUK,UACzCN,EAASK,YAAcN,EAAUE,UAAUK,UAAYP,EAAUQ,WAAWD,UAE5E,IAAME,EAAYV,EAAIC,EAAUQ,WAAWb,OAAS,CAAEQ,KAAM,EAAGC,OAAQ,EAAGC,SAAU,EAAGC,WAAY,GAanG,OAXAG,EAAUJ,UAAYL,EAAUQ,WAAWD,UAC3CE,EAAUH,YAAcN,EAAUQ,WAAWD,UAAYP,EAAUE,UAAUK,UAEzEP,EAAUE,UAAUQ,KACtBT,EAASE,OACTM,EAAUL,UACDJ,EAAUQ,WAAWE,MAC9BT,EAASG,SACTK,EAAUN,QAGL,6BACFJ,GADL,wBAEGC,EAAUE,UAAUP,KAAOM,GAF9B,eAGGD,EAAUQ,WAAWb,KAAOc,GAH/B,MAKC,IAEGpB,EAAkBhE,EAAMyE,QAC5B,SAACC,EAAKY,GAAN,oBAAC,gBACIZ,GADL,mBAEGY,EAAKC,cAFR,uBAE6Bb,EAAIY,EAAKC,gBAAkB,IAFxD,CAE6DD,QAE7D,IAGFrB,EACEuB,OAAOC,QAAQzB,GAAiBS,QAAO,SAACC,EAAD,GAA6B,IAAD,mBAArBgB,EAAqB,KAC3DC,EAD2D,KACzCC,KAAI,SAAAN,GAC1B,IAAMO,EAAUrB,EAAYc,EAAKQ,KACjC,OAAO,6BACFR,GADL,IAEES,KAAM,EACNjB,KAAMe,EAAQf,KACdC,OAAQc,EAAQd,OAChBiB,IAAKH,EAAQb,SAAWa,EAAQZ,gBAYpC,OARAU,EAAUM,MAAK,SAACC,EAAIC,GAAL,OACbD,EAAGpB,OAASqB,EAAGrB,KACXoB,EAAGnB,SAAWoB,EAAGpB,OACfoB,EAAGH,IAAME,EAAGF,IACZE,EAAGnB,OAASoB,EAAGpB,OACjBoB,EAAGrB,KAAOoB,EAAGpB,QAGZ,6BACFJ,GADL,mBAEGgB,EAAWC,EAAUC,KAAI,SAACQ,EAAGC,GAAJ,oBAAC,gBAAeD,GAAhB,IAAmBL,KAAMM,EAAI,WAExD,UAGN,CAAClH,EAAM4E,IAEL5E,EAKH,cAACwE,GAAD,UACGI,EAAOuC,QAAQV,KAAI,SAAAW,GAAM,OACxB,eAAC3C,GAAD,WACE,cAAC,IAAD,CAAIzC,MAAO,CAAEC,aAAc,QAA3B,SAAsCmF,IACrCxC,EAAOyC,UAAUD,GAAQX,KAAI,SAAAF,GAAQ,OACpC,cAAC7B,GAAD,UACGG,EAAgB0B,IACf,qCACE,cAAC,IAAD,UAAKA,IACL,cAAC,KAAD,CACEvG,KAAM6E,EAAgB0B,GACtBe,QAAS,CACP,cAAC,KAAD,CAAapF,MAAM,UACnB,cAAC,KAAD,CAAaA,MAAM,cACnB,cAAC,KAAD,CAAaA,MAAM,QACnB,cAAC,KAAD,CAAaA,MAAM,QACnB,cAAC,KAAD,CAAaA,MAAM,UAPvB,SAUG,gBAAUqF,EAAV,EAAGC,MAAH,OACC,eAAC,KAAD,WACE,cAAC,KAAD,UAAOD,EAAGX,OACV,cAAC,KAAD,UAAOW,EAAGE,OACV,cAAC,KAAD,UAAOF,EAAG5B,OACV,cAAC,KAAD,UAAO4B,EAAG3B,SACV,cAAC,KAAD,UAAO2B,EAAGV,IAAIa,QAAQ,OALdH,EAAGZ,YAfRJ,QAHHa,QANb,MC1GLO,GAAa1G,IAAOC,IAAV,6IAmCD0G,I,GAAAA,GAvBf,YAAuC,IAAnBhH,EAAkB,EAAlBA,QAClB,EAA4CpC,qBAA5C,mBAAOqJ,EAAP,KAAuBC,EAAvB,KAEA,OACE,eAACH,GAAD,WACE,cAAC,KAAD,CACE3F,MAAO,CAAE+F,MAAO,SAChB7F,MAAM,mBACNC,YAAY,YACZ1C,OAAqB,OAAdoI,QAAc,IAAdA,OAAA,EAAAA,EAAgBJ,OAAQ,GAC/BrF,SAAU,SAAA4F,GAAG,OAAIF,EAAkBlH,EAAQqE,MAAK,SAAAL,GAAM,OAAIA,EAAO6C,OAASO,OAL5E,SAOGpH,EAAQ6F,KAAI,gBAAGtB,EAAH,EAAGA,KAAMsC,EAAT,EAASA,KAAT,OACX,cAAC,KAAD,CAAmBhI,MAAOgI,EAA1B,SACGA,GADUtC,QAKhB0C,GAAkB,cAAC,GAAD,CAAWjD,OAAQiD,QChCtCF,GAAa1G,IAAOC,IAAV,6IAqCD+G,I,eAAAA,GAvBf,YAA0C,IAAnBrH,EAAkB,EAAlBA,QACrB,EAA4CpC,qBAA5C,mBAAOqJ,EAAP,KAAuBC,EAAvB,KAEA,OACE,eAAC,GAAD,WACE,cAAC,KAAD,CACE9F,MAAO,CAAE+F,MAAO,SAChB7F,MAAM,mBACNC,YAAY,YACZ1C,OAAqB,OAAdoI,QAAc,IAAdA,OAAA,EAAAA,EAAgBJ,OAAQ,GAC/BrF,SAAU,SAAA4F,GAAG,OAAIF,EAAkBlH,EAAQqE,MAAK,SAAAL,GAAM,OAAIA,EAAO6C,OAASO,OAL5E,SAOGpH,EAAQ6F,KAAI,gBAAGtB,EAAH,EAAGA,KAAMsC,EAAT,EAASA,KAAT,OACX,cAAC,KAAD,CAAmBhI,MAAOgI,EAA1B,SACGA,GADUtC,QAKhB0C,GAAkB,uDCjCZK,GAAa,SAAC,GAAoC,IAAlCxJ,EAAiC,EAAjCA,KAC3B,OACE,8BACE,+DAAkCA,EAAKH,SAKhC4J,GAAQ,WACnB,IAAQhJ,EAAmBO,IAAnBP,eACR,OAAO,wBAAQuD,QAASvD,EAAjB,qBCfM,OAA0B,iCCUnCiJ,GAAgBnH,IAAOC,IAAV,qDAIbmH,GAAgBpH,IAAO2C,OAAV,gOACG,qBAAG0E,MAAkBC,OAAOC,MAAMC,QAO7C,qBAAGH,MAAkBC,OAAOG,SAGjCC,GAAc1H,IAAO2H,EAAV,6CACN,qBAAGN,MAAkBC,OAAOM,MAAMC,UAGvCC,GAAkBjG,oBAAH,wHASfkG,GAAc/H,IAAOgI,IAAV,2KAIAF,IAsBFG,I,MAAAA,GAlBf,WACE,IAAQxK,EAASgB,IAAThB,KACR,OACE,cAAC0J,GAAD,UACE,eAACC,GAAD,WACE,cAACW,GAAD,CAAaG,IAAKC,GAAMC,IAAI,SAC5B,sCACO,2DADP,0BAGA,cAACV,GAAD,CAAarE,KAAK,sBAAsBhC,OAAO,SAASgH,IAAI,sBAA5D,yBAGC5K,EAAO,cAAC,GAAD,CAAYA,KAAMA,IAAW,cAAC,GAAD,U,6BCnDvC6K,GAActI,YAAYuI,KAAZvI,CAAH,kHAIb,gBAAGqH,EAAH,EAAGA,MAAH,SAAUpC,KACH,CACLuD,gBAAiBnB,EAAMC,OAAOmB,GAAGC,MAAMC,WAEzC,gBAAGtB,EAAH,EAAGA,MAAH,SAAUuB,MACF,CACNJ,gBAAiBnB,EAAMC,OAAOmB,GAAGI,IAAIF,WAIrCG,GAAS9I,IAAOC,IAAV,2EA4BG8I,I,YAAAA,GAjBf,YAAsC,IAArBC,EAAoB,EAApBA,KAAMC,EAAc,EAAdA,IACrB,OACE,eAACX,GAAD,CAAarD,IAAK+D,EAAK/D,IAAK2D,KAAMI,EAAKJ,KAAvC,UACE,eAACE,GAAD,WACE,cAAC,IAAD,UAAWE,EAAKxC,OAChB,cAAC,IAAD,8BAAoBwC,EAAKE,YACzB,cAAC,IAAD,+BAAqBF,EAAKlE,gBAE5B,eAACgE,GAAD,WACE,cAAC,IAAD,UAAWG,EAAIzC,OACf,cAAC,IAAD,8BAAoByC,EAAIC,YACxB,cAAC,IAAD,+BAAqBD,EAAInE,oBCjC3B4B,GAAa1G,IAAOC,IAAV,6IAQVkJ,GAAgBnJ,IAAOC,IAAV,gGAMbmJ,GAAUpJ,IAAOC,IAAV,kKASPoJ,GAAarJ,IAAOC,IAAV,kKAgMDqJ,OA5Kf,YAA8C,IAA1B3J,EAAyB,EAAzBA,QAASC,EAAgB,EAAhBA,MACnBb,EAASM,IAATN,KAER,EAA4CxB,qBAA5C,mBAAOqJ,EAAP,KAAuBC,EAAvB,KACA,EAAwCtJ,qBAAxC,mBAAOgM,EAAP,KAAqBC,EAArB,KAEMtE,EAAOuE,mBAAQ,kBAAM7J,EAAMoE,MAAK,SAAA0F,GAAC,OAAIA,EAAElD,QAAF,OAAW+C,QAAX,IAAWA,OAAX,EAAWA,EAAc/C,WAAO,CAAC+C,EAAc3J,IAE1F,EAAgCrC,mBAAyB,IAAzD,mBAAOmC,EAAP,KAAiBiK,EAAjB,KA0DA,OAzDA1K,qBAAU,WACHF,GAIL+E,QAAQC,IAAI,CACVhF,EAAKW,WAAWsE,KAAK,CAAE,qBAAe4C,QAAf,IAAeA,OAAf,EAAeA,EAAgB1C,KAAM,oBAAcgB,QAAd,IAAcA,OAAd,EAAcA,EAAMvB,OAAOiG,MACvF7K,EAAKc,cAAcmE,KAAK,CACtBC,YAAW,OAAE2C,QAAF,IAAEA,OAAF,EAAEA,EAAgB1C,KAC7B2F,IAAK,CAAC,CAAE,wBAAkBN,QAAlB,IAAkBA,OAAlB,EAAkBA,EAAc7D,KAAO,CAAE,yBAAmB6D,QAAnB,IAAmBA,OAAnB,EAAmBA,EAAc7D,QAEpF3G,EAAKe,gBAAgBkE,KAAK,CACxBC,YAAW,OAAE2C,QAAF,IAAEA,OAAF,EAAEA,EAAgB1C,KAC7B2F,IAAK,CAAC,CAAE,+BAAyBN,QAAzB,IAAyBA,OAAzB,EAAyBA,EAAc7D,KAAO,CAAE,gCAA0B6D,QAA1B,IAA0BA,OAA1B,EAA0BA,EAAc7D,UAEjGvB,MAAK,YAA0C,IAAD,mBAAvC2F,EAAuC,KAAhCjK,EAAgC,KAAnBC,EAAmB,KACzCiK,EAAoBlK,EAAYwE,QACpC,SAACC,EAAKC,GAAN,oBAAC,gBAAyBD,GAA1B,mBAAgCC,EAAUyF,SAAWzF,MACrD,IAGI0F,EAAsBnK,EAAcuE,QACxC,SAACC,EAAK4F,GAAN,oBAAC,gBAA2B5F,GAA5B,mBAAkC4F,EAAYF,SAA9C,uBAA8D1F,EAAI4F,EAAYF,WAAa,IAA3F,CAAgGE,QAChG,IAGFP,EACEG,EACGtE,KAAI,SAAA2E,GACH,IAAM5F,EAAYwF,EAAkBI,EAAKH,UACzC,IAAKzF,EACH,OAAO,6BAAK4F,GAAZ,IAAkBC,QAAS,KAG7B,IAAQC,EAAqC9F,EAArC8F,UAAW5F,EAA0BF,EAA1BE,UAAWM,EAAeR,EAAfQ,WACxBjF,EAAgBmK,EAAoBE,EAAKH,WAAa,GAC5D,OAAO,6BACFG,GADL,IAEEE,YACA5F,YACAM,aACAqF,QAAStK,EACN0F,KAAI,kBAA2D,CAC9D8E,IADG,EAAGA,IAENhJ,KAFG,EAAQA,KAGXiJ,WAHG,EAAcA,WAIjBC,YAJG,EAA0BA,YAK7BC,aALG,EAAuCA,iBAO3C5E,MAAK,SAAC6E,EAAIC,GAAL,OAAYD,EAAGJ,IAAMK,EAAGL,YAGnCzE,MAAK,SAAC+E,EAAIC,GAAL,OAAYD,EAAGZ,SAAWa,EAAGb,kBAGxC,CAACjL,EAAD,OAAO6H,QAAP,IAAOA,OAAP,EAAOA,EAAgB1C,KAAvB,OAA6BqF,QAA7B,IAA6BA,OAA7B,EAA6BA,EAAc7D,IAA3C,OAAgDR,QAAhD,IAAgDA,OAAhD,EAAgDA,EAAMvB,OAAOiG,MAE3D7K,EAKH,eAAC,GAAD,WACE,eAACoK,GAAD,WACE,cAAC,KAAD,CACEpI,MAAO,CAAE+F,MAAO,SAChB7F,MAAM,mBACNC,YAAY,YACZC,SAAU,SAAA4F,GAAG,OAAIF,EAAkBlH,EAAQqE,MAAK,SAAAgC,GAAC,OAAIA,EAAEQ,OAASO,OAJlE,SAMGpH,EAAQ6F,KAAI,gBAAGtB,EAAH,EAAGA,KAAMsC,EAAT,EAASA,KAAT,OACX,cAAC,KAAD,CAAmBhI,MAAOgI,EAA1B,SACGA,GADUtC,QAKjB,cAAC,KAAD,CACEnD,MAAO,CAAE+F,MAAO,SAChB7F,MAAM,iBACNC,YAAY,YACZ4J,UAAWlE,EACXzF,SAAU,SAAA4F,GAAG,OAAIyC,EAAgB5J,EAAMoE,MAAK,SAAA0F,GAAC,OAAIA,EAAElD,OAASO,OAL9D,SAOGnH,EACEmL,QAAO,SAAA7F,GAAI,OAAIA,EAAKvB,OAAO6C,QAAZ,OAAqBI,QAArB,IAAqBA,OAArB,EAAqBA,EAAgBJ,SACpDhB,KAAI,gBAAGE,EAAH,EAAGA,IAAKc,EAAR,EAAQA,KAAR,OACH,cAAC,KAAD,CAAkBhI,MAAOgI,EAAzB,SACGA,GADUd,WAMpB6D,GACC,cAACH,GAAD,UACG1J,EAAS8F,KAAI,YAAoD,IAAjDwF,EAAgD,EAAhDA,UAAWvG,EAAqC,EAArCA,UAAWM,EAA0B,EAA1BA,WAAYqF,EAAc,EAAdA,QAC3CpB,GAAmB,OAAZO,QAAY,IAAZA,OAAA,EAAAA,EAAc7D,QAAd,OAAsBjB,QAAtB,IAAsBA,OAAtB,EAAsBA,EAAWP,MAAO,OAAS,QAExD+G,EAAmC,IAAnBb,EAAQc,OAC9B,eAAoDd,GAA7Ce,EAAP,KAAgBC,EAAhB,KAAyBC,EAAzB,KAAkCC,EAAlC,KAA8CC,EAA9C,WAEA,OACE,eAAC,KAAD,CACEC,MAAK,UAAKR,EAAL,iBACM,SAAThC,GAA4B,OAAVjE,QAAU,IAAVA,OAAA,EAAAA,EAAYyB,OAAQ,WAAqB,OAAT/B,QAAS,IAATA,OAAA,EAAAA,EAAW+B,OAAQ,WAEvElD,YACE,OAACmB,QAAD,IAACA,KAAWK,WAAa,OAACC,QAAD,IAACA,KAAYD,UAEzB,SAATkE,EAAA,UACY,OAATvE,QAAS,IAATA,KAAWQ,IAAM,IAAM,IAD1B,oBACkCR,QADlC,IACkCA,OADlC,EACkCA,EAAWK,UAD7C,qBAC4DC,QAD5D,IAC4DA,OAD5D,EAC4DA,EAAYD,UADxE,oBAEEL,QAFF,IAEEA,OAFF,EAEEA,EAAWgH,YAFb,qBAGM1G,QAHN,IAGMA,OAHN,EAGMA,EAAY0G,YAHlB,eAIa,OAAV1G,QAAU,IAAVA,KAAYE,IAAM,IAAM,IAJ3B,oBAImCF,QAJnC,IAImCA,OAJnC,EAImCA,EAAYD,UAJ/C,qBAI8DL,QAJ9D,IAI8DA,OAJ9D,EAI8DA,EAAWK,UAJzE,oBAKEC,QALF,IAKEA,OALF,EAKEA,EAAY0G,YALd,qBAMMhH,QANN,IAMMA,OANN,EAMMA,EAAWgH,YANjB,KADA,GANR,UAgBGR,GAAiB,uGAChBA,GACA,qCACE,eAAC5B,GAAD,WACE,cAAC,GAAD,CACEqC,MAAOP,EACPnC,KAAe,SAATA,EAAkBmC,EAAQX,YAAcW,EAAQV,aACtDxB,IAAc,SAATD,EAAkBmC,EAAQV,aAAeU,EAAQX,cAExD,cAAC,GAAD,CACEkB,MAAON,EACPpC,KAAe,SAATA,EAAkBoC,EAAQZ,YAAcY,EAAQX,aACtDxB,IAAc,SAATD,EAAkBoC,EAAQX,aAAeW,EAAQZ,iBAG1D,eAACnB,GAAD,WACE,cAAC,GAAD,CACEqC,MAAOL,EACPrC,KAAe,SAATA,EAAkBqC,EAAQb,YAAca,EAAQZ,aACtDxB,IAAc,SAATD,EAAkBqC,EAAQZ,aAAeY,EAAQb,cAExD,cAAC,GAAD,CACEkB,MAAOJ,EACPtC,KAAe,SAATA,EAAkBsC,EAAQd,YAAcc,EAAQb,aACtDxB,IAAc,SAATD,EAAkBsC,EAAQb,aAAea,EAAQd,iBAGxDe,EAAGL,QACH,cAAC,GAAD,CACEQ,MAAOH,EAAG,GACVvC,KAAe,SAATA,EAAkBuC,EAAG,GAAGf,YAAce,EAAG,GAAGd,aAClDxB,IAAc,SAATD,EAAkBuC,EAAG,GAAGd,aAAec,EAAG,GAAGf,eAGpD,mBA7FX,MC1CImB,I,MAAAA,GA/Df,WACE,IAAQ5M,EAASM,IAATN,KAER,EAA8BxB,mBAAmB,IAAjD,mBAAOoC,EAAP,KAAgBiM,EAAhB,KACA3M,qBAAU,WACHF,GAGLA,EAAKY,UAAUqE,OAAOG,KAAKyH,KAC1B,CAAC7M,IAEJ,MAA0BxB,mBAAiB,IAA3C,mBAAOqC,EAAP,KAAciM,EAAd,KACA5M,qBAAU,WACHF,GAGLA,EAAKa,QAAQoE,OAAOG,KAAK0H,KACxB,CAAC9M,IAEJ,MAA8BxB,mBAAmB,IAAjD,mBAAOgC,EAAP,KAAgBuM,EAAhB,KACA7M,qBAAU,WACHF,GAGLA,EAAKQ,UAAUyE,OAAOG,KAAK2H,KAC1B,CAAC/M,IAEJ,IAAMgN,EAAWC,wBAAc,CAAEC,MAAO,uBACxC,OACE,qCACGF,EAAW,cAAC,GAAD,IAAmB,cAAC,EAAD,IAC/B,eAAC,IAAD,WACE,cAAC,IAAD,CACEG,KAAK,IACLC,QACE,cAAC,EAAD,UACE,cAAC,GAAD,CAAUxM,QAASA,QAIzB,cAAC,IAAD,CACEuM,KAAK,OACLC,QACE,cAAC,EAAD,UACE,cAAC,GAAD,CAAUxM,QAASA,EAASC,MAAOA,QAIzC,cAAC,IAAD,CACEsM,KAAK,UACLC,QACE,cAAC,EAAD,UACE,cAAC,GAAD,CAAaxM,QAASA,EAASC,MAAOA,EAAOL,QAASA,QAI5D,cAAC,IAAD,CAAO2M,KAAK,QAAQC,QAAS,cAAC,EAAD,MAC7B,cAAC,IAAD,CAAOD,KAAK,UAAUC,QAAS,cAAC,GAAD,aC1DxBC,GAZS,SAACC,GACnBA,GAAeA,aAAuBC,UACxC,8BAAqBnI,MAAK,YAAkD,IAA/CoI,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOF,GACPG,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAQN,OCNRO,GAAQ,UADF,wCACE,UAERC,GAAYC,cAAH,ktDAICF,GAEAA,GAE0BA,GAEFA,GAQxBA,GAEAA,GAEWA,GACeA,GAEFA,GAQxBA,GAEAA,GAEWA,GACeA,GAEFA,IAuBlCG,GAAiBD,cAAH,2pCA0DLE,OAPf,WACE,MAAO,CACLD,GACAF,KC7FWxF,GA3BD,CACZC,OAAQ,CACN2F,MAAO,UACPxF,MAAO,UACPyF,SAAU,UACV3F,MAAO,CACLC,KAAM,WAER2F,KAAM,CACJ3F,KAAM,UACNK,OAAQ,UACRc,OAAQ,UACRyE,OAAQ,WAEVxF,MAAO,CACLC,OAAQ,WAEVY,G,KAAI4E,GAENC,WAAY,CACVC,MAAO,CACLrJ,KAAK,wECXEsJ,IAASC,WAAWC,SAASC,eAAe,SACpDC,OACH,cAAC,IAAMC,WAAP,UACE,cAAC,IAAD,CAAeC,SAAS,aAAxB,SACE,cAAC,EAAD,UACE,cAAC,EAAD,UACE,cAAC,IAAD,UACE,eAAC,IAAD,CAAezG,MAAOA,GAAtB,UACE,cAAC,SAAD,CAAQ2F,OAAQA,KAChB,cAAC,GAAD,kBAYdZ,GAAgBpO,QAAQG,O","file":"static/js/main.4feb684e.chunk.js","sourcesContent":["import React, { createContext, useContext, useState } from 'react';\nimport * as Realm from 'realm-web';\n\ninterface RealmProps {\n  login: (email: string, password: string) => Promise<Realm.User | null>;\n  loginAnonymous: () => Promise<Realm.User | null>;\n  logout: () => Promise<void>;\n  user: Realm.User | null;\n}\n\nconst RealmContext = createContext<RealmProps | null>(null);\n\ninterface RealmProviderProps {\n  children: React.ReactNode;\n}\n\nexport const RealmProvider = ({ children }: RealmProviderProps) => {\n  const app = new Realm.App({ id: 'amsterdam-ussnf' });\n\n  const [user, setUser] = useState<Realm.User | null>(app.currentUser);\n\n  const login = async (email: string, password: string) => {\n    try {\n      await app.logIn(Realm.Credentials.emailPassword(email, password));\n\n      setUser(app.currentUser);\n      return app.currentUser;\n    } catch (e) {\n      console.error('failed to login', e);\n      setUser(null);\n      return null;\n    }\n  };\n\n  const loginAnonymous = async () => {\n    try {\n      console.log('logging in anonymously');\n      await app.logIn(Realm.Credentials.anonymous());\n\n      setUser(app.currentUser);\n      return app.currentUser;\n    } catch (e) {\n      console.error('failed to login', e);\n      setUser(null);\n      return null;\n    }\n  };\n\n  const logout = async () => {\n    try {\n      if (app.currentUser) {\n        await app.currentUser.logOut();\n      }\n    } catch (e) {\n      console.error('failed to logout', e);\n    } finally {\n      setUser(null);\n    }\n  };\n\n  return <RealmContext.Provider value={{ login, loginAnonymous, logout, user }}>{children}</RealmContext.Provider>;\n};\n\nexport const useRealm = () => {\n  const realm = useContext(RealmContext);\n  if (realm === null) {\n    throw new Error('useRealm() called outside of a RealmProvider');\n  }\n  return realm;\n};\n","import React, { createContext, useContext, useEffect, useState } from 'react';\n\nimport { Player, PlayerMatch, ScheduledWeek, Season, Team, TeamMatch } from '../types';\n\nimport { useRealm } from './use_realm';\n\ninterface AtlasProps {\n  data: ReturnType<typeof atlasData> | null;\n}\n\nconst AtlasContext = createContext<AtlasProps | null>(null);\n\ninterface AtlasProviderProps {\n  children: React.ReactNode;\n}\n\nexport const AtlasProvider = ({ children }: AtlasProviderProps) => {\n  const { user } = useRealm();\n\n  const [data, setData] = useState<ReturnType<Realm.User['mongoClient']> | null>(null);\n\n  useEffect(() => {\n    console.log('on user effect...setting data');\n    if (user === null) {\n      return;\n    }\n    console.log(user);\n    console.log(user.profile);\n    setData(user.mongoClient('data'));\n  }, [user]);\n\n  return <AtlasContext.Provider value={{ data: atlasData(data) }}>{children}</AtlasContext.Provider>;\n};\n\nexport const useAtlas = () => {\n  const atlas = useContext(AtlasContext);\n  if (atlas === null) {\n    throw new Error('useAtlas() called outside of a AtlasProvider');\n  }\n  return atlas;\n};\n\nfunction atlasData(data: ReturnType<Realm.User['mongoClient']> | null) {\n  if (!data) {\n    return null;\n  }\n  return {\n    players: () => data.db('amsterdam').collection<Player>('players'),\n    schedule: () => data.db('amsterdam').collection<ScheduledWeek>('schedule'),\n    seasons: () => data.db('amsterdam').collection<Season>('seasons'),\n    teams: () => data.db('amsterdam').collection<Team>('teams'),\n    teamMatches: () => data.db('amsterdam').collection<TeamMatch>('team_matches'),\n    playerMatches: () => data.db('amsterdam').collection<PlayerMatch>('player_matches'),\n  };\n}\n","import React, { useState } from 'react';\nimport styled from '@emotion/styled';\nimport Button from '@leafygreen-ui/button';\nimport TextInput from '@leafygreen-ui/text-input';\nimport { Body } from '@leafygreen-ui/typography';\nimport { Navigate } from 'react-router-dom';\n\nimport { useRealm } from '../../realm';\n\nconst StyledLogin = styled.div`\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n`;\n\nconst LoginContainer = styled.div`\n  min-width: 360px;\n  padding: 1rem;\n  border: 1px solid;\n`;\n\nconst LoginAnonContainer = styled.div`\n  min-width: 360px;\n  padding: 0 1rem 1rem 1rem;\n  margin-top: 0.5rem;\n`;\n\nfunction LoginPage() {\n  const [username, setUsername] = useState('');\n  const [password, setPassword] = useState('');\n\n  const { login, loginAnonymous, user } = useRealm();\n\n  let from = (window.location as any).state?.from?.pathname || '/';\n\n  if (user) {\n    return <Navigate to={from} replace />;\n  }\n\n  return (\n    <StyledLogin>\n      <LoginContainer>\n        <Body style={{ marginBottom: '1rem' }}>Please log in using your credentials</Body>\n        <TextInput\n          label=\"Username\"\n          placeholder=\"your.email@example.com\"\n          onChange={e => {\n            setUsername(e.target.value);\n          }}\n          value={username}\n        />\n        <TextInput\n          label=\"Password\"\n          type=\"password\"\n          onChange={e => {\n            setPassword(e.target.value);\n          }}\n          value={password}\n        />\n        <Button style={{ marginTop: '1rem' }} variant=\"primary\" onClick={() => login(username, password)}>\n          Login\n        </Button>\n      </LoginContainer>\n      <LoginAnonContainer>\n        <Body style={{ marginBottom: '0.5rem' }}>Or log in as a guest</Body>\n        <Button variant=\"primaryOutline\" onClick={() => loginAnonymous()}>\n          Login Anonymously\n        </Button>\n      </LoginAnonContainer>\n    </StyledLogin>\n  );\n}\n\nexport default LoginPage;\n","import React from 'react';\nimport { useLocation, Navigate } from 'react-router-dom';\n\nimport { useRealm } from '../../realm';\n\ninterface Props {\n  children: JSX.Element;\n}\n\nfunction ProtectedRoute({ children }: Props) {\n  let { user } = useRealm();\n  let location = useLocation();\n\n  if (!user) {\n    return <Navigate to=\"/login\" state={{ from: location }} replace />;\n  }\n\n  return children;\n}\n\nexport default ProtectedRoute;\n","import React from 'react';\nimport { keyframes } from '@emotion/react';\nimport styled from '@emotion/styled';\nimport { MongoDBLogoMark } from '@leafygreen-ui/logo';\n\nconst leafAnimation = keyframes`\n  from {\n    transform: rotate(-5deg);\n  }\n  to {\n    transform: rotate(5deg);\n  }\n`;\n\nconst StyledLogo = styled(MongoDBLogoMark)`\n  display: inline-block;\n  margin: 24px;\n  animation: ${leafAnimation} 3s infinite alternate-reverse ease-in-out;\n  transform-origin: 50% 100%;\n`;\n\nfunction Logo() {\n  return <StyledLogo style={{ marginTop: 0, marginBottom: 0 }} height={48} />;\n}\n\nexport default Logo;\n","import React from 'react';\nimport { Link } from 'react-router-dom';\nimport styled from '@emotion/styled';\nimport Button from '@leafygreen-ui/button';\nimport { Body, H1 } from '@leafygreen-ui/typography';\n\nimport { useRealm } from '../realm';\n\nimport Logo from './logo';\n\nconst StyledHeader = styled.div`\n  display: grid;\n  grid-template-columns: 1fr auto 1fr;\n  grid-column-gap: 5px;\n  justify-items: center;\n  margin-top: 0.5rem;\n`;\n\nconst NavLinks = styled.ul`\n  margin-right: auto;\n  text-align: left;\n  display: flex;\n`;\n\nconst UserInfo = styled.div`\n  margin-left: auto;\n  text-align: right;\n  padding-right: 0.5rem;\n`;\n\nfunction Header() {\n  const { logout, user } = useRealm();\n\n  return (\n    <StyledHeader>\n      <NavLinks>\n        <Link style={{ margin: '1rem', textDecoration: 'none' }} to=\"/\">\n          Standings\n        </Link>\n        <Link style={{ margin: '1rem', textDecoration: 'none' }} to=\"/team\">\n          Team Results\n        </Link>\n        <Link style={{ margin: '1rem', textDecoration: 'none' }} to=\"/players\">\n          Individual Results\n        </Link>\n      </NavLinks>\n      <span style={{ textAlign: 'center' }}>\n        <H1>Amsterdam Billiards</H1>\n        <Logo />\n      </span>\n      {user && (\n        <UserInfo>\n          <Button variant=\"primaryOutline\" onClick={logout}>\n            Logout\n          </Button>\n          <Body>{user.providerType === 'anon-user' ? 'Guest' : user.profile.email || user.id}</Body>\n        </UserInfo>\n      )}\n    </StyledHeader>\n  );\n}\n\nexport default Header;\n","import React, { useState } from 'react';\nimport styled from '@emotion/styled';\nimport Icon from '@leafygreen-ui/icon';\nimport IconButton from '@leafygreen-ui/icon-button';\nimport { Menu, MenuSeparator, MenuItem } from '@leafygreen-ui/menu';\nimport { H1 } from '@leafygreen-ui/typography';\n\nimport { useRealm } from '../realm';\n\nimport Logo from './logo';\n\nconst StyledHeader = styled.header`\n  margin-top: 0.5rem;\n  display: flex;\n  justify-items: space-between;\n  align-items: center;\n`;\n\nfunction Header() {\n  const [menuOpen, setMenuOpen] = useState(false);\n  const { logout, user } = useRealm();\n\n  return (\n    <StyledHeader>\n      <Logo />\n      <H1 style={{ flex: 1 }}>Amsterdam Billiards</H1>\n      <Menu\n        align=\"bottom\"\n        justify=\"end\"\n        open={menuOpen}\n        trigger={\n          <IconButton size=\"xlarge\" aria-label=\"User Menu\" onClick={() => setMenuOpen(!menuOpen)}>\n            <Icon glyph=\"Ellipsis\" />\n          </IconButton>\n        }\n      >\n        <MenuItem href=\"/amsterdam\">Standings</MenuItem>\n        <MenuItem href=\"/amsterdam/team\">Team Results</MenuItem>\n        <MenuItem href=\"/amsterdam/players\">Individual Results</MenuItem>\n        <MenuSeparator />\n        {!user && <MenuItem href=\"/amsterdam/login\">Login</MenuItem>}\n        {user && (\n          <MenuItem\n            onClick={logout}\n            description={user.providerType === 'anon-user' ? 'As guest' : user.profile.email || user.id}\n          >\n            Logout\n          </MenuItem>\n        )}\n      </Menu>\n    </StyledHeader>\n  );\n}\n\nexport default Header;\n","import React, { useEffect, useState } from 'react';\nimport styled from '@emotion/styled';\nimport { Table, TableHeader, Row, Cell } from '@leafygreen-ui/table';\nimport { H2, H3 } from '@leafygreen-ui/typography';\n\nimport { useAtlas } from '../../realm';\nimport { Season, Team, TeamStanding } from '../../types';\n\nconst Leagues = styled.div`\n  display: flex;\n  flex-wrap: wrap;\n  justify-content: center;\n`;\n\nconst Divisions = styled.div`\n  display: flex;\n  flex-direction: column;\n  margin: 0 1rem;\n`;\n\nconst Division = styled.div`\n  display: flex;\n  flex-direction: column;\n  margin-bottom: 1rem;\n`;\n\ninterface Props {\n  season: Season;\n}\n\ninterface MatchStats {\n  wins: number;\n  losses: number;\n  gamesWon: number;\n  gamesTotal: 0;\n}\n\nfunction Standings({ season }: Props) {\n  const { data } = useAtlas();\n\n  const [teamsByDivision, setTeamsByDivision] = useState<Record<string, TeamStanding[]>>({});\n  useEffect(() => {\n    if (!data || !season) {\n      return;\n    }\n    Promise.all([\n      data.teamMatches().find({ season_code: season.code }),\n      data.teams().find({ 'season.code': season.code }),\n    ]).then(([teamMatches, teams]) => {\n      const teamResults = teamMatches.reduce<Record<number, MatchStats>>((acc, teamMatch) => {\n        const leftTeam = acc[teamMatch.left_team.code] || { wins: 0, losses: 0, gamesWon: 0, gamesTotal: 0 };\n        // teamMatch.left_team.win ? leftTeam.wins++ : leftTeam.losses++;\n        leftTeam.gamesWon += teamMatch.left_team.games_won;\n        leftTeam.gamesTotal += teamMatch.left_team.games_won + teamMatch.right_team.games_won;\n\n        const rightTeam = acc[teamMatch.right_team.code] || { wins: 0, losses: 0, gamesWon: 0, gamesTotal: 0 };\n        // teamMatch.right_team.win ? rightTeam.wins++ : rightTeam.losses++;\n        rightTeam.gamesWon += teamMatch.right_team.games_won;\n        rightTeam.gamesTotal += teamMatch.right_team.games_won + teamMatch.left_team.games_won;\n\n        if (teamMatch.left_team.win) {\n          leftTeam.wins++;\n          rightTeam.losses++;\n        } else if (teamMatch.right_team.win) {\n          leftTeam.losses++;\n          rightTeam.wins++;\n        }\n\n        return {\n          ...acc,\n          [teamMatch.left_team.code]: leftTeam,\n          [teamMatch.right_team.code]: rightTeam,\n        };\n      }, {});\n\n      const teamsByDivision = teams.reduce<Record<string, Team[]>>(\n        (acc, team) => ({\n          ...acc,\n          [team.division_name]: [...(acc[team.division_name] || []), team],\n        }),\n        {},\n      );\n\n      setTeamsByDivision(\n        Object.entries(teamsByDivision).reduce((acc, [division, teams]) => {\n          const standings = teams.map(team => {\n            const results = teamResults[team.key];\n            return {\n              ...team,\n              rank: 0,\n              wins: results.wins,\n              losses: results.losses,\n              pct: results.gamesWon / results.gamesTotal,\n            };\n          });\n\n          standings.sort((s1, s2) =>\n            s1.wins === s2.wins\n              ? s1.losses === s2.losses\n                ? s2.pct - s1.pct\n                : s1.losses - s2.losses\n              : s2.wins - s1.wins,\n          );\n\n          return {\n            ...acc,\n            [division]: standings.map((s, i) => ({ ...s, rank: i + 1 })),\n          };\n        }, {}),\n      );\n    });\n  }, [data, season]);\n\n  if (!data) {\n    return null;\n  }\n\n  return (\n    <Leagues>\n      {season.leagues.map(league => (\n        <Divisions key={league}>\n          <H2 style={{ marginBottom: '1rem' }}>{league}</H2>\n          {season.divisions[league].map(division => (\n            <Division key={division}>\n              {teamsByDivision[division] && (\n                <>\n                  <H3>{division}</H3>\n                  <Table\n                    data={teamsByDivision[division]}\n                    columns={[\n                      <TableHeader label=\"Place\" />,\n                      <TableHeader label=\"Team Name\" />,\n                      <TableHeader label=\"W's\" />,\n                      <TableHeader label=\"L's\" />,\n                      <TableHeader label=\"PCT.\" />,\n                    ]}\n                  >\n                    {({ datum: ts }) => (\n                      <Row key={ts.key}>\n                        <Cell>{ts.rank}</Cell>\n                        <Cell>{ts.name}</Cell>\n                        <Cell>{ts.wins}</Cell>\n                        <Cell>{ts.losses}</Cell>\n                        <Cell>{ts.pct.toFixed(3)}</Cell>\n                      </Row>\n                    )}\n                  </Table>\n                </>\n              )}\n            </Division>\n          ))}\n        </Divisions>\n      ))}\n    </Leagues>\n  );\n}\n\nexport default Standings;\n","import React, { useState } from 'react';\nimport styled from '@emotion/styled';\nimport { Option, Select } from '@leafygreen-ui/select';\n\nimport { Season } from '../../types';\n\nimport Standings from './standings';\n\nconst StyledMain = styled.div`\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n  gap: 12px;\n  justify-content: center;\n`;\n\ninterface Props {\n  seasons: Season[];\n}\n\nfunction HomePage({ seasons }: Props) {\n  const [selectedSeason, setSelectedSeason] = useState<Season>();\n\n  return (\n    <StyledMain>\n      <Select\n        style={{ width: '360px' }}\n        label=\"Choose a season:\"\n        placeholder=\"Select...\"\n        value={selectedSeason?.name || ''}\n        onChange={val => setSelectedSeason(seasons.find(season => season.name === val))}\n      >\n        {seasons.map(({ code, name }) => (\n          <Option key={code} value={name}>\n            {name}\n          </Option>\n        ))}\n      </Select>\n      {selectedSeason && <Standings season={selectedSeason} />}\n    </StyledMain>\n  );\n}\n\nexport default HomePage;\n","import React, { useState } from 'react';\nimport styled from '@emotion/styled';\nimport { Option, Select } from '@leafygreen-ui/select';\n\nimport { Player, Season ,Team } from '../../types';\n\nconst StyledMain = styled.div`\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n  gap: 12px;\n  justify-content: center;\n`;\n\ninterface Props {\n  seasons: Season[];\n  players: Player[];\n  teams: Team[];\n}\n\nfunction PlayersPage({ seasons }: Props) {\n  const [selectedSeason, setSelectedSeason] = useState<Season>();\n\n  return (\n    <StyledMain>\n      <Select\n        style={{ width: '360px' }}\n        label=\"Choose a season:\"\n        placeholder=\"Select...\"\n        value={selectedSeason?.name || ''}\n        onChange={val => setSelectedSeason(seasons.find(season => season.name === val))}\n      >\n        {seasons.map(({ code, name }) => (\n          <Option key={code} value={name}>\n            {name}\n          </Option>\n        ))}\n      </Select>\n      {selectedSeason && <>player data</>}\n    </StyledMain>\n  );\n}\n\nexport default PlayersPage;\n","import React from 'react';\nimport * as Realm from 'realm-web';\n\nimport { useRealm } from '../../realm';\n\nexport const UserDetail = ({ user }: { user: Realm.User }) => {\n  return (\n    <div>\n      <h1>Logged in with anonymous id: {user.id}</h1>\n    </div>\n  );\n};\n\nexport const Login = () => {\n  const { loginAnonymous } = useRealm();\n  return <button onClick={loginAnonymous}>Log In</button>;\n};\n","export default __webpack_public_path__ + \"static/media/logo.6ce24c58.svg\";","import React from 'react';\nimport { keyframes } from '@emotion/react';\nimport styled from '@emotion/styled';\n\nimport { useRealm } from '../../realm';\n\nimport { Login, UserDetail } from './realm';\n\nimport logo from './logo.svg';\n\nconst StyledSandbox = styled.div`\n  text-align: center;\n`;\n\nconst SandboxHeader = styled.header`\n  background-color: ${({ theme }) => theme.colors.grays.base};\n  min-height: 100vh;\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n  justify-content: center;\n  font-size: calc(10px + 2vmin);\n  color: ${({ theme }) => theme.colors.white};\n`;\n\nconst SandboxLink = styled.a`\n  color: ${({ theme }) => theme.colors.blues.light1};\n`;\n\nconst sandboxLogoSpin = keyframes`\n  from {\n    transform: rotate(0deg);\n  }\n  to {\n    transform: rotate(360deg);\n  }\n`;\n\nconst SandboxLogo = styled.img`\n  height: 40vmin;\n  pointer-events: none;\n  @media (prefers-reduced-motion: no-preference) {\n    animation: ${sandboxLogoSpin} infinite 20s linear;\n  }\n`;\n\nfunction Sandbox() {\n  const { user } = useRealm();\n  return (\n    <StyledSandbox>\n      <SandboxHeader>\n        <SandboxLogo src={logo} alt=\"logo\" />\n        <p>\n          Edit <code>src/sandbox/sandbox.tsx</code> and save to reload.\n        </p>\n        <SandboxLink href=\"https://reactjs.org\" target=\"_blank\" rel=\"noopener noreferrer\">\n          Learn React\n        </SandboxLink>\n        {user ? <UserDetail user={user} /> : <Login />}\n      </SandboxHeader>\n    </StyledSandbox>\n  );\n}\n\nexport default Sandbox;\n","import React from 'react';\nimport styled from '@emotion/styled';\nimport Card from '@leafygreen-ui/card';\nimport { Body, Subtitle } from '@leafygreen-ui/typography';\n\nimport { PlayerMatch, PlayerResult } from '../../types';\n\nconst StyledMatch = styled<any>(Card)`\n  width: 328px;\n  display: flex;\n  justify-content: space-between;\n  ${({ theme, win }) =>\n    win && {\n      backgroundColor: theme.colors.lg.green.light2,\n    }}\n  ${({ theme, loss }) =>\n    loss && {\n      backgroundColor: theme.colors.lg.red.light2,\n    }}\n`;\n\nconst Player = styled.div`\n  display: flex;\n  flex-direction: column;\n`;\n\ninterface Props {\n  match: Partial<Pick<PlayerMatch, 'type' | 'is_forfeit' | 'left_player' | 'right_player'>>;\n  self: PlayerResult;\n  opp: PlayerResult;\n}\n\nfunction Match({ self, opp }: Props) {\n  return (\n    <StyledMatch win={self.win} loss={self.loss}>\n      <Player>\n        <Subtitle>{self.name}</Subtitle>\n        <Body>{`Handicap: ${self.handicap}`}</Body>\n        <Body>{`Games Won: ${self.games_won}`}</Body>\n      </Player>\n      <Player>\n        <Subtitle>{opp.name}</Subtitle>\n        <Body>{`Handicap: ${opp.handicap}`}</Body>\n        <Body>{`Games Won: ${opp.games_won}`}</Body>\n      </Player>\n    </StyledMatch>\n  );\n}\n\nexport default Match;\n","import React, { useEffect, useMemo, useState } from 'react';\nimport styled from '@emotion/styled';\nimport ExpandableCard from '@leafygreen-ui/expandable-card';\nimport { Option, Select } from '@leafygreen-ui/select';\n\nimport { useAtlas } from '../../realm';\nimport { PlayerMatch, Season, ScheduledWeek, Team, TeamMatch } from '../../types';\n\nimport Match from './match';\n\nconst StyledMain = styled.div`\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n  gap: 12px;\n  justify-content: center;\n`;\n\nconst StyledSelects = styled.div`\n  display: flex;\n  flex-wrap: wrap;\n  justify-content: center;\n`;\n\nconst Matches = styled.div`\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n  gap: 12px;\n  justify-content: center;\n  max-width: 720px;\n`;\n\nconst MatchRound = styled.div`\n  display: flex;\n  flex-wrap: wrap;\n  justify-content: center;\n  gap: 12px;\n  :not(:first-child) {\n    margin-top: 1rem;\n  }\n`;\n\ninterface Props {\n  seasons: Season[];\n  teams: Team[];\n}\n\ntype WeeklyResult = ScheduledWeek &\n  Partial<Pick<TeamMatch, 'fifth_set' | 'left_team' | 'right_team'>> & {\n    matches: Pick<PlayerMatch, 'type' | 'is_forfeit' | 'left_player' | 'right_player'>[];\n  };\n\nfunction TeamPage({ seasons, teams }: Props) {\n  const { data } = useAtlas();\n\n  const [selectedSeason, setSelectedSeason] = useState<Season>();\n  const [selectedTeam, setSelectedTeam] = useState<Team>();\n\n  const team = useMemo(() => teams.find(t => t.name === selectedTeam?.name), [selectedTeam, teams]);\n\n  const [schedule, setSchedule] = useState<WeeklyResult[]>([]);\n  useEffect(() => {\n    if (!data) {\n      return;\n    }\n\n    Promise.all([\n      data.schedule().find({ 'season.code': selectedSeason?.code, 'season.day': team?.season.day }),\n      data.teamMatches().find({\n        season_code: selectedSeason?.code,\n        $or: [{ 'left_team.code': selectedTeam?.key }, { 'right_team.code': selectedTeam?.key }],\n      }),\n      data.playerMatches().find({\n        season_code: selectedSeason?.code,\n        $or: [{ 'left_player.team_code': selectedTeam?.key }, { 'right_player.team_code': selectedTeam?.key }],\n      }),\n    ]).then(([weeks, teamMatches, playerMatches]) => {\n      const teamMatchesByWeek = teamMatches.reduce<Record<number, TeamMatch>>(\n        (acc, teamMatch) => ({ ...acc, [teamMatch.week_num]: teamMatch }),\n        {},\n      );\n\n      const playerMatchesByWeek = playerMatches.reduce<Record<number, PlayerMatch[]>>(\n        (acc, playerMatch) => ({ ...acc, [playerMatch.week_num]: [...(acc[playerMatch.week_num] || []), playerMatch] }),\n        {},\n      );\n\n      setSchedule(\n        weeks\n          .map(week => {\n            const teamMatch = teamMatchesByWeek[week.week_num];\n            if (!teamMatch) {\n              return { ...week, matches: [] };\n            }\n\n            const { fifth_set, left_team, right_team } = teamMatch;\n            const playerMatches = playerMatchesByWeek[week.week_num] || [];\n            return {\n              ...week,\n              fifth_set,\n              left_team,\n              right_team,\n              matches: playerMatches\n                .map(({ seq, type, is_forfeit, left_player, right_player }) => ({\n                  seq,\n                  type,\n                  is_forfeit,\n                  left_player,\n                  right_player,\n                }))\n                .sort((m1, m2) => m1.seq - m2.seq),\n            };\n          })\n          .sort((w1, w2) => w1.week_num - w2.week_num),\n      );\n    });\n  }, [data, selectedSeason?.code, selectedTeam?.key, team?.season.day]);\n\n  if (!data) {\n    return null;\n  }\n\n  return (\n    <StyledMain>\n      <StyledSelects>\n        <Select\n          style={{ width: '360px' }}\n          label=\"Choose a season:\"\n          placeholder=\"Select...\"\n          onChange={val => setSelectedSeason(seasons.find(s => s.name === val))}\n        >\n          {seasons.map(({ code, name }) => (\n            <Option key={code} value={name}>\n              {name}\n            </Option>\n          ))}\n        </Select>\n        <Select\n          style={{ width: '360px' }}\n          label=\"Choose a team:\"\n          placeholder=\"Select...\"\n          disabled={!selectedSeason}\n          onChange={val => setSelectedTeam(teams.find(t => t.name === val))}\n        >\n          {teams\n            .filter(team => team.season.name === selectedSeason?.name)\n            .map(({ key, name }) => (\n              <Option key={key} value={name}>\n                {name}\n              </Option>\n            ))}\n        </Select>\n      </StyledSelects>\n      {selectedTeam && (\n        <Matches>\n          {schedule.map(({ week_name, left_team, right_team, matches }) => {\n            const self = selectedTeam?.key === left_team?.code ? 'left' : 'right';\n\n            const isFutureMatch = matches.length === 0;\n            const [match11, match12, match21, match22, ...tb] = matches;\n\n            return (\n              <ExpandableCard\n                title={`${week_name}: vs. ${\n                  self === 'left' ? right_team?.name || 'Unknown' : left_team?.name || 'Unknown'\n                }`}\n                description={\n                  !left_team?.games_won && !right_team?.games_won\n                    ? ''\n                    : self === 'left'\n                    ? `${left_team?.win ? 'W' : 'L'}: ${left_team?.games_won} - ${right_team?.games_won} (${\n                        left_team?.matches_won\n                      } - ${right_team?.matches_won})`\n                    : `${right_team?.win ? 'W' : 'L'}: ${right_team?.games_won} - ${left_team?.games_won} (${\n                        right_team?.matches_won\n                      } - ${left_team?.matches_won})`\n                }\n              >\n                {isFutureMatch && <>this match hasn't happened yet, do you want a scouting report?</>}\n                {!isFutureMatch && (\n                  <>\n                    <MatchRound>\n                      <Match\n                        match={match11}\n                        self={self === 'left' ? match11.left_player : match11.right_player}\n                        opp={self === 'left' ? match11.right_player : match11.left_player}\n                      />\n                      <Match\n                        match={match12}\n                        self={self === 'left' ? match12.left_player : match12.right_player}\n                        opp={self === 'left' ? match12.right_player : match12.left_player}\n                      />\n                    </MatchRound>\n                    <MatchRound>\n                      <Match\n                        match={match21}\n                        self={self === 'left' ? match21.left_player : match21.right_player}\n                        opp={self === 'left' ? match21.right_player : match21.left_player}\n                      />\n                      <Match\n                        match={match22}\n                        self={self === 'left' ? match22.left_player : match22.right_player}\n                        opp={self === 'left' ? match22.right_player : match22.left_player}\n                      />\n                    </MatchRound>\n                    {(tb.length && (\n                      <Match\n                        match={tb[0]}\n                        self={self === 'left' ? tb[0].left_player : tb[0].right_player}\n                        opp={self === 'left' ? tb[0].right_player : tb[0].left_player}\n                      />\n                    )) ||\n                      null}\n                  </>\n                )}\n              </ExpandableCard>\n            );\n          })}\n        </Matches>\n      )}\n    </StyledMain>\n  );\n}\n\nexport default TeamPage;\n","import React, { useEffect, useState } from 'react';\nimport { Routes, Route } from 'react-router-dom';\nimport { useMediaQuery } from 'react-responsive';\n\nimport { useAtlas } from '../realm';\nimport { Player, Season, Team } from '../types';\n\nimport { LoginPage, ProtectedRoute } from './auth';\nimport Header from './header';\nimport MobileHeader from './header_mobile';\nimport HomePage from './home';\nimport PlayersPage from './players';\nimport Sandbox from './sandbox';\nimport TeamPage from './team';\n\nfunction App() {\n  const { data } = useAtlas();\n\n  const [seasons, setSeasons] = useState<Season[]>([]);\n  useEffect(() => {\n    if (!data) {\n      return;\n    }\n    data.seasons().find().then(setSeasons);\n  }, [data]);\n\n  const [teams, setTeams] = useState<Team[]>([]);\n  useEffect(() => {\n    if (!data) {\n      return;\n    }\n    data.teams().find().then(setTeams);\n  }, [data]);\n\n  const [players, setPlayers] = useState<Player[]>([]);\n  useEffect(() => {\n    if (!data) {\n      return;\n    }\n    data.players().find().then(setPlayers);\n  }, [data]);\n\n  const isMobile = useMediaQuery({ query: '(max-width: 720px)' });\n  return (\n    <>\n      {isMobile ? <MobileHeader /> : <Header />}\n      <Routes>\n        <Route\n          path=\"/\"\n          element={\n            <ProtectedRoute>\n              <HomePage seasons={seasons} />\n            </ProtectedRoute>\n          }\n        />\n        <Route\n          path=\"team\"\n          element={\n            <ProtectedRoute>\n              <TeamPage seasons={seasons} teams={teams} />\n            </ProtectedRoute>\n          }\n        />\n        <Route\n          path=\"players\"\n          element={\n            <ProtectedRoute>\n              <PlayersPage seasons={seasons} teams={teams} players={players} />\n            </ProtectedRoute>\n          }\n        />\n        <Route path=\"login\" element={<LoginPage />} />\n        <Route path=\"sandbox\" element={<Sandbox />} />\n      </Routes>\n    </>\n  );\n}\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import { css } from '@emotion/react'\n\nconst CDN = 'https://d2va9gm4j17fy9.cloudfront.net';\nconst fontsURL = `${CDN}/fonts`;\n\nconst docStyles = css`\n  @font-face {\n    font-family: 'Akzidenz';\n    font-weight: normal;\n    src: url('${fontsURL}/akzidgrostdreg.eot');\n    /* IE9 Compat Modes */\n    src: url('${fontsURL}/akzidgrostdreg.eot?#iefix')\n        format('embedded-opentype'),\n      /* Pretty Modern Browsers */ url('${fontsURL}/akzidgrostdreg.ttf')\n        format('truetype'),\n      /* Safari, Android, iOS */ url('${fontsURL}/akzidgrostdreg.svg#Akzidenz')\n        format('svg');\n    /* Legacy iOS */\n  }\n\n  @font-face {\n    font-family: 'Akzidenz';\n    font-weight: 600;\n    src: url('${fontsURL}/akzidgrostdmed.eot');\n    /* IE9 Compat Modes */\n    src: url('${fontsURL}/akzidgrostdmed.eot?#iefix')\n        format('embedded-opentype'),\n      /* IE6-IE8 */ url('${fontsURL}/akzidgrostdmed.woff') format('woff'),\n      /* Pretty Modern Browsers */ url('${fontsURL}/akzidgrostdmed.ttf')\n        format('truetype'),\n      /* Safari, Android, iOS */ url('${fontsURL}/akzidgrostdmed.svg#Akzidenz')\n        format('svg');\n    /* Legacy iOS */\n  }\n\n  @font-face {\n    font-family: 'Akzidenz';\n    font-weight: bold;\n    src: url('${fontsURL}/akzidgrostdmed.eot');\n    /* IE9 Compat Modes */\n    src: url('${fontsURL}/akzidgrostdmed.eot?#iefix')\n        format('embedded-opentype'),\n      /* IE6-IE8 */ url('${fontsURL}/akzidgrostdmed.woff') format('woff'),\n      /* Pretty Modern Browsers */ url('${fontsURL}/akzidgrostdmed.ttf')\n        format('truetype'),\n      /* Safari, Android, iOS */ url('${fontsURL}/akzidgrostdmed.svg#Akzidenz')\n        format('svg');\n    /* Legacy iOS */\n  }\n\n  html {\n    font-family: 'Akzidenz', 'Helvetica Neue', Helvetica, Arial, sans-serif;\n    font-weight: normal;\n    font-style: normal;\n  }\n\n  body {\n    margin: 0;\n  }\n\n  *,\n  *:before,\n  *:after {\n    box-sizing: border-box;\n  }\n`\n\n\nconst meyersWebReset = css`\n/* http://meyerweb.com/eric/tools/css/reset/\n   v2.0 | 20110126\n   License: none (public domain)\n*/\nhtml, body, div, span, applet, object, iframe,\nh1, h2, h3, h4, h5, h6, p, blockquote, pre,\na, abbr, acronym, address, big, cite, code,\ndel, dfn, em, img, ins, kbd, q, s, samp,\nsmall, strike, strong, sub, sup, tt, var,\nb, u, i, center,\ndl, dt, dd, ol, ul, li,\nfieldset, form, label, legend,\ntable, caption, tbody, tfoot, thead, tr, th, td,\narticle, aside, canvas, details, embed,\nfigure, figcaption, footer, header, hgroup,\nmenu, nav, output, ruby, section, summary,\ntime, mark, audio, video {\n\tmargin: 0;\n\tpadding: 0;\n\tborder: 0;\n\tfont-size: 100%;\n\tfont: inherit;\n\tvertical-align: baseline;\n}\n/* HTML5 display-role reset for older browsers */\narticle, aside, details, figcaption, figure,\nfooter, header, hgroup, menu, nav, section {\n\tdisplay: block;\n}\nbody {\n\tline-height: 1;\n}\nol, ul {\n\tlist-style: none;\n}\nblockquote, q {\n\tquotes: none;\n}\nblockquote:before, blockquote:after,\nq:before, q:after {\n\tcontent: '';\n\tcontent: none;\n}\ntable {\n\tborder-collapse: collapse;\n\tborder-spacing: 0;\n}\n`;\n\n\nfunction styles() {\n  return [\n    meyersWebReset,\n    docStyles,\n  ]\n}\n\nexport default styles;\n","import { palette } from '@leafygreen-ui/palette';\n\nconst theme = {\n  colors: {\n    black: '#000000',\n    white: '#ffffff',\n    offwhite: '#fffed1',\n    grays: {\n      base: '#282c34',\n    },\n    reds: {\n      base: '#4d0a05',\n      light1: '#8a1a10',\n      light2: '#b42619',\n      light3: '#df3121',\n    },\n    blues: {\n      light1: '#61dafb',\n    },\n    lg: palette,\n  },\n  typography: {\n    fonts: {\n      code: `source-code-pro, Menlo, Monaco, Consolas, 'Courier New', monospace`,\n    },\n  },\n};\n\nexport type Theme = typeof theme;\nexport default theme;\n","import React from 'react';\nimport { Global, ThemeProvider } from '@emotion/react';\nimport LeafygreenProvider from '@leafygreen-ui/leafygreen-provider';\nimport ReactDOM from 'react-dom/client';\nimport { BrowserRouter } from 'react-router-dom';\n\nimport App from './app';\nimport { AtlasProvider, RealmProvider } from './realm';\nimport reportWebVitals from './reportWebVitals';\nimport styles from './styles';\nimport theme from './theme';\n\nconst root = ReactDOM.createRoot(document.getElementById('root') as HTMLElement);\nroot.render(\n  <React.StrictMode>\n    <BrowserRouter basename=\"/amsterdam\">\n      <RealmProvider>\n        <AtlasProvider>\n          <LeafygreenProvider>\n            <ThemeProvider theme={theme}>\n              <Global styles={styles} />\n              <App />\n            </ThemeProvider>\n          </LeafygreenProvider>\n        </AtlasProvider>\n      </RealmProvider>\n    </BrowserRouter>\n  </React.StrictMode>,\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals(console.log);\n"],"sourceRoot":""}