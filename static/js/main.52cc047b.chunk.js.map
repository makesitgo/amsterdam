{"version":3,"sources":["realm/use_realm.tsx","realm/use_atlas.tsx","app/auth/login.tsx","app/auth/protected_route.tsx","app/header.tsx","app/home/standings.tsx","app/home/home.tsx","app/sandbox/realm.tsx","app/sandbox/logo.svg","app/sandbox/sandbox.tsx","app/team/team.tsx","app/app.tsx","reportWebVitals.ts","styles.ts","theme.ts","index.tsx"],"names":["RealmContext","createContext","RealmProvider","children","app","Realm","id","useState","currentUser","user","setUser","login","email","password","logIn","emailPassword","console","error","loginAnonymous","log","anonymous","logout","logOut","Provider","value","useRealm","realm","useContext","Error","AtlasContext","AtlasProvider","data","setData","useEffect","profile","mongoClient","atlasData","useAtlas","atlas","players","db","collection","schedule","seasons","teams","teamMatches","StyledLogin","styled","div","LoginContainer","LoginAnonContainer","LoginPage","username","setUsername","setPassword","from","window","location","state","pathname","to","replace","style","marginBottom","label","placeholder","onChange","e","target","type","marginTop","variant","onClick","ProtectedRoute","useLocation","Header","header","Title","UserInfo","leafAnimation","keyframes","StyledLogo","MongoDBLogoMark","App","gridColumnStart","providerType","height","Leagues","Divisions","Division","Standings","season","teamsByDivision","setTeamsByDivision","Promise","all","find","season_code","code","then","teamResults","reduce","acc","teamMatch","leftTeam","left_team","wins","losses","gamesWon","gamesTotal","win","games_won","right_team","rightTeam","team","division_name","Object","entries","division","standings","map","results","key","rank","pct","sort","s1","s2","s","i","leagues","league","divisions","columns","ts","datum","name","toFixed","StyledMain","HomePage","selectedSeason","setSelectedSeason","width","val","UserDetail","Login","StyledSandbox","SandboxHeader","theme","colors","grays","base","white","SandboxLink","a","blues","light1","sandboxLogoSpin","SandboxLogo","img","Sandbox","src","logo","alt","href","rel","TeamPage","selectedTeam","setSelectedTeam","undefined","parseInt","filter","setSeasons","list","byKey","setTeams","path","element","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","fontsURL","docStyles","css","meyersWebReset","styles","black","offwhite","reds","light2","light3","typography","fonts","ReactDOM","createRoot","document","getElementById","render","StrictMode","basename"],"mappings":"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","file":"static/js/main.52cc047b.chunk.js","sourcesContent":["import React, { createContext, useContext, useState } from 'react';\nimport * as Realm from 'realm-web';\n\ninterface RealmProps {\n  login: (email: string, password: string) => Promise<Realm.User | null>;\n  loginAnonymous: () => Promise<Realm.User | null>;\n  logout: () => Promise<void>;\n  user: Realm.User | null;\n}\n\nconst RealmContext = createContext<RealmProps | null>(null);\n\ninterface RealmProviderProps {\n  children: React.ReactNode;\n}\n\nexport const RealmProvider = ({ children }: RealmProviderProps) => {\n  const app = new Realm.App({ id: 'amsterdam-ussnf' });\n\n  const [user, setUser] = useState<Realm.User | null>(app.currentUser);\n\n  const login = async (email: string, password: string) => {\n    try {\n      await app.logIn(Realm.Credentials.emailPassword(email, password));\n\n      setUser(app.currentUser);\n      return app.currentUser;\n    } catch (e) {\n      console.error('failed to login', e);\n      setUser(null);\n      return null;\n    }\n  };\n\n  const loginAnonymous = async () => {\n    try {\n      console.log('logging in anonymously');\n      await app.logIn(Realm.Credentials.anonymous());\n\n      setUser(app.currentUser);\n      return app.currentUser;\n    } catch (e) {\n      console.error('failed to login', e);\n      setUser(null);\n      return null;\n    }\n  };\n\n  const logout = async () => {\n    try {\n      if (app.currentUser) {\n        await app.currentUser.logOut();\n      }\n    } catch (e) {\n      console.error('failed to logout', e);\n    } finally {\n      setUser(null);\n    }\n  };\n\n  return <RealmContext.Provider value={{ login, loginAnonymous, logout, user }}>{children}</RealmContext.Provider>;\n};\n\nexport const useRealm = () => {\n  const realm = useContext(RealmContext);\n  if (realm === null) {\n    throw new Error('useRealm() called outside of a RealmProvider');\n  }\n  return realm;\n};\n","import React, { createContext, useContext, useEffect, useState } from 'react';\n\nimport { Player, ScheduledWeek, Season, Team, TeamMatch } from '../types';\n\nimport { useRealm } from './use_realm';\n\ninterface AtlasProps {\n  data: ReturnType<typeof atlasData> | null;\n}\n\nconst AtlasContext = createContext<AtlasProps | null>(null);\n\ninterface AtlasProviderProps {\n  children: React.ReactNode;\n}\n\nexport const AtlasProvider = ({ children }: AtlasProviderProps) => {\n  const { user } = useRealm();\n\n  const [data, setData] = useState<ReturnType<Realm.User['mongoClient']> | null>(null);\n\n  useEffect(() => {\n    console.log('on user effect...setting data');\n    if (user === null) {\n      return;\n    }\n    console.log(user);\n    console.log(user.profile);\n    setData(user.mongoClient('data'));\n  }, [user]);\n\n  return <AtlasContext.Provider value={{ data: atlasData(data) }}>{children}</AtlasContext.Provider>;\n};\n\nexport const useAtlas = () => {\n  const atlas = useContext(AtlasContext);\n  if (atlas === null) {\n    throw new Error('useAtlas() called outside of a AtlasProvider');\n  }\n  return atlas;\n};\n\nfunction atlasData(data: ReturnType<Realm.User['mongoClient']> | null) {\n  if (!data) {\n    return null;\n  }\n  return {\n    players: () => data.db('amsterdam').collection<Player>('players'),\n    schedule: () => data.db('amsterdam').collection<ScheduledWeek>('schedule'),\n    seasons: () => data.db('amsterdam').collection<Season>('seasons'),\n    teams: () => data.db('amsterdam').collection<Team>('teams'),\n    teamMatches: () => data.db('amsterdam').collection<TeamMatch>('team_matches'),\n  };\n}\n","import React, { useState } from 'react';\nimport styled from '@emotion/styled';\nimport Button from '@leafygreen-ui/button';\nimport TextInput from '@leafygreen-ui/text-input';\nimport { Body } from '@leafygreen-ui/typography';\nimport { Navigate } from 'react-router-dom';\n\nimport { useRealm } from '../../realm';\n\nconst StyledLogin = styled.div`\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n`;\n\nconst LoginContainer = styled.div`\n  min-width: 360px;\n  padding: 1rem;\n  border: 1px solid;\n`;\n\nconst LoginAnonContainer = styled.div`\n  min-width: 360px;\n  padding: 0 1rem 1rem 1rem;\n  margin-top: 0.5rem;\n`;\n\nfunction LoginPage() {\n  const [username, setUsername] = useState('');\n  const [password, setPassword] = useState('');\n\n  const { login, loginAnonymous, user } = useRealm();\n\n  let from = (window.location as any).state?.from?.pathname || '/';\n\n  if (user) {\n    return <Navigate to={from} replace />;\n  }\n\n  return (\n    <StyledLogin>\n      <LoginContainer>\n        <Body style={{ marginBottom: '1rem' }}>Please log in using your credentials</Body>\n        <TextInput\n          label=\"Username\"\n          placeholder=\"your.email@example.com\"\n          onChange={e => {\n            setUsername(e.target.value);\n          }}\n          value={username}\n        />\n        <TextInput\n          label=\"Password\"\n          type=\"password\"\n          onChange={e => {\n            setPassword(e.target.value);\n          }}\n          value={password}\n        />\n        <Button style={{ marginTop: '1rem' }} variant=\"primary\" onClick={() => login(username, password)}>\n          Login\n        </Button>\n      </LoginContainer>\n      <LoginAnonContainer>\n        <Body style={{ marginBottom: '0.5rem' }}>Or log in as a guest</Body>\n        <Button variant=\"primaryOutline\" onClick={() => loginAnonymous()}>\n          Login Anonymously\n        </Button>\n      </LoginAnonContainer>\n    </StyledLogin>\n  );\n}\n\nexport default LoginPage;\n","import React from 'react';\nimport { useLocation, Navigate } from 'react-router-dom';\n\nimport { useRealm } from '../../realm';\n\ninterface Props {\n  children: JSX.Element;\n}\n\nfunction ProtectedRoute({ children }: Props) {\n  let { user } = useRealm();\n  let location = useLocation();\n\n  if (!user) {\n    return <Navigate to=\"/login\" state={{ from: location }} replace />;\n  }\n\n  return children;\n}\n\nexport default ProtectedRoute;\n","import React from 'react';\nimport { keyframes } from '@emotion/react';\nimport styled from '@emotion/styled';\nimport Button from '@leafygreen-ui/button';\nimport { MongoDBLogoMark } from '@leafygreen-ui/logo';\nimport { Body, H1 } from '@leafygreen-ui/typography';\n\nimport { useRealm } from '../realm';\n\nconst Header = styled.header`\n  text-align: center;\n`;\n\nconst Title = styled.div`\n  display: grid;\n  grid-template-columns: 1fr auto 1fr;\n  grid-column-gap: 5px;\n  justify-items: center;\n`;\n\nconst UserInfo = styled.div`\n  margin-left: auto;\n  text-align: right;\n  padding-right: 0.5rem;\n`;\n\nconst leafAnimation = keyframes`\n  from {\n    transform: rotate(-5deg);\n  }\n  to {\n    transform: rotate(5deg);\n  }\n`;\n\nconst StyledLogo = styled(MongoDBLogoMark)`\n  display: inline-block;\n  margin: 24px;\n  animation: ${leafAnimation} 3s infinite alternate-reverse ease-in-out;\n  transform-origin: 50% 100%;\n`;\n\nfunction App() {\n  const { logout, user } = useRealm();\n  return (\n    <Header>\n      <Title>\n        <H1 style={{ gridColumnStart: 2 }}>Amsterdam Billiards League Site</H1>\n        {user && (\n          <UserInfo>\n            <Body>{`Logged in as ${user.providerType === 'anon-user' ? 'guest' : user.profile.email || user.id}`}</Body>\n            <Button variant=\"primaryOutline\" onClick={logout}>\n              Logout\n            </Button>\n          </UserInfo>\n        )}\n      </Title>\n      <StyledLogo height={98} />\n    </Header>\n  );\n}\n\nexport default App;\n","import React, { useEffect, useState } from 'react';\nimport styled from '@emotion/styled';\nimport { Table, TableHeader, Row, Cell } from '@leafygreen-ui/table';\nimport { H2 } from '@leafygreen-ui/typography';\n\nimport { useAtlas } from '../../realm';\nimport { Season, Team, TeamStanding } from '../../types';\n\nconst Leagues = styled.div`\n  display: flex;\n`;\n\nconst Divisions = styled.div`\n  display: flex;\n  flex-direction: column;\n`;\n\nconst Division = styled.div`\n  display: flex;\n  flex-direction: column;\n`;\n\ninterface Props {\n  season: Season;\n}\n\ninterface MatchStats {\n  wins: number;\n  losses: number;\n  gamesWon: number;\n  gamesTotal: 0;\n}\n\nfunction Standings({ season }: Props) {\n  const { data } = useAtlas();\n\n  const [teamsByDivision, setTeamsByDivision] = useState<Record<string, TeamStanding[]>>({});\n  useEffect(() => {\n    if (!data || !season) {\n      return;\n    }\n    Promise.all([\n      data.teamMatches().find({ season_code: season.code }),\n      data.teams().find({ 'season.code': season.code }),\n    ]).then(([teamMatches, teams]) => {\n      const teamResults = teamMatches.reduce<Record<number, MatchStats>>((acc, teamMatch) => {\n        const leftTeam = acc[teamMatch.left_team.code] || { wins: 0, losses: 0, gamesWon: 0, gamesTotal: 0 };\n        teamMatch.left_team.win ? leftTeam.wins++ : leftTeam.losses++;\n        leftTeam.gamesWon += teamMatch.left_team.games_won;\n        leftTeam.gamesTotal += teamMatch.left_team.games_won + teamMatch.right_team.games_won;\n\n        const rightTeam = acc[teamMatch.right_team.code] || { wins: 0, losses: 0, gamesWon: 0, gamesTotal: 0 };\n        teamMatch.right_team.win ? rightTeam.wins++ : rightTeam.losses++;\n        rightTeam.gamesWon += teamMatch.right_team.games_won;\n        rightTeam.gamesTotal += teamMatch.right_team.games_won + teamMatch.left_team.games_won;\n\n        return {\n          ...acc,\n          [teamMatch.left_team.code]: leftTeam,\n          [teamMatch.right_team.code]: rightTeam,\n        };\n      }, {});\n\n      const teamsByDivision = teams.reduce<Record<string, Team[]>>(\n        (acc, team) => ({\n          ...acc,\n          [team.division_name]: [...(acc[team.division_name] || []), team],\n        }),\n        {},\n      );\n\n      setTeamsByDivision(\n        Object.entries(teamsByDivision).reduce((acc, [division, teams]) => {\n          const standings = teams.map(team => {\n            const results = teamResults[team.key];\n            return {\n              ...team,\n              rank: 0,\n              wins: results.wins,\n              losses: results.losses,\n              pct: results.gamesWon / results.gamesTotal,\n            };\n          });\n\n          standings.sort((s1, s2) =>\n            s1.wins === s2.wins\n              ? s1.losses === s2.losses\n                ? s2.pct - s1.pct\n                : s1.losses - s2.losses\n              : s2.wins - s1.wins,\n          );\n\n          return {\n            ...acc,\n            [division]: standings.map((s, i) => ({ ...s, rank: i + 1 })),\n          };\n        }, {}),\n      );\n    });\n  }, [season]);\n\n  if (!data) {\n    return null;\n  }\n\n  return (\n    <Leagues>\n      {season.leagues.map(league => (\n        <Divisions key={league}>\n          {season.divisions[league].map(division => (\n            <Division key={division}>\n              {teamsByDivision[division] && (\n                <>\n                  <H2>{division}</H2>\n                  <Table\n                    data={teamsByDivision[division]}\n                    columns={[\n                      <TableHeader label=\"Place\" />,\n                      <TableHeader label=\"Team Name\" />,\n                      <TableHeader label=\"W's\" />,\n                      <TableHeader label=\"L's\" />,\n                      <TableHeader label=\"PCT.\" />,\n                    ]}\n                  >\n                    {({ datum: ts }) => (\n                      <Row key={ts.key}>\n                        <Cell>{ts.rank}</Cell>\n                        <Cell>{ts.name}</Cell>\n                        <Cell>{ts.wins}</Cell>\n                        <Cell>{ts.losses}</Cell>\n                        <Cell>{ts.pct.toFixed(3)}</Cell>\n                      </Row>\n                    )}\n                  </Table>\n                </>\n              )}\n            </Division>\n          ))}\n        </Divisions>\n      ))}\n    </Leagues>\n  );\n}\n\nexport default Standings;\n","import React, { useState } from 'react';\nimport styled from '@emotion/styled';\nimport { Option, Select } from '@leafygreen-ui/select';\n\nimport { Season } from '../../types';\n\nimport Standings from './standings';\n\nconst StyledMain = styled.div`\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n  gap: 12px;\n  justify-content: center;\n`;\n\ninterface Props {\n  seasons: Season[];\n}\n\nfunction HomePage({ seasons }: Props) {\n  const [selectedSeason, setSelectedSeason] = useState<Season>();\n\n  return (\n    <StyledMain>\n      <Select\n        style={{ width: '360px' }}\n        label=\"Choose a season:\"\n        placeholder=\"Select...\"\n        value={selectedSeason?.name || ''}\n        onChange={val => setSelectedSeason(seasons.find(season => season.name === val))}\n      >\n        {seasons.map(({ code, name }) => (\n          <Option key={code} value={name}>\n            {name}\n          </Option>\n        ))}\n      </Select>\n      {selectedSeason && <Standings season={selectedSeason} />}\n    </StyledMain>\n  );\n}\n\nexport default HomePage;\n","import React from 'react';\nimport * as Realm from 'realm-web';\n\nimport { useRealm } from '../../realm';\n\nexport const UserDetail = ({ user }: { user: Realm.User }) => {\n  return (\n    <div>\n      <h1>Logged in with anonymous id: {user.id}</h1>\n    </div>\n  );\n};\n\nexport const Login = () => {\n  const { loginAnonymous } = useRealm();\n  return <button onClick={loginAnonymous}>Log In</button>;\n};\n","export default __webpack_public_path__ + \"static/media/logo.6ce24c58.svg\";","import React from 'react';\nimport { keyframes } from '@emotion/react';\nimport styled from '@emotion/styled';\n\nimport { useRealm } from '../../realm';\n\nimport { Login, UserDetail } from './realm';\n\nimport logo from './logo.svg';\n\nconst StyledSandbox = styled.div`\n  text-align: center;\n`;\n\nconst SandboxHeader = styled.header`\n  background-color: ${({ theme }) => theme.colors.grays.base};\n  min-height: 100vh;\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n  justify-content: center;\n  font-size: calc(10px + 2vmin);\n  color: ${({ theme }) => theme.colors.white};\n`;\n\nconst SandboxLink = styled.a`\n  color: ${({ theme }) => theme.colors.blues.light1};\n`;\n\nconst sandboxLogoSpin = keyframes`\n  from {\n    transform: rotate(0deg);\n  }\n  to {\n    transform: rotate(360deg);\n  }\n`;\n\nconst SandboxLogo = styled.img`\n  height: 40vmin;\n  pointer-events: none;\n  @media (prefers-reduced-motion: no-preference) {\n    animation: ${sandboxLogoSpin} infinite 20s linear;\n  }\n`;\n\nfunction Sandbox() {\n  const { user } = useRealm();\n  return (\n    <StyledSandbox>\n      <SandboxHeader>\n        <SandboxLogo src={logo} alt=\"logo\" />\n        <p>\n          Edit <code>src/sandbox/sandbox.tsx</code> and save to reload.\n        </p>\n        <SandboxLink href=\"https://reactjs.org\" target=\"_blank\" rel=\"noopener noreferrer\">\n          Learn React\n        </SandboxLink>\n        {user ? <UserDetail user={user} /> : <Login />}\n      </SandboxHeader>\n    </StyledSandbox>\n  );\n}\n\nexport default Sandbox;\n","import React, { useState } from 'react';\nimport styled from '@emotion/styled';\n// import Button from '@leafygreen-ui/button';\nimport { Option, Select } from '@leafygreen-ui/select';\n\nimport { useAtlas } from '../../realm';\nimport { SeasonKey, Team } from '../../types';\n\nconst StyledMain = styled.div`\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n  gap: 12px;\n  justify-content: center;\n`;\n\ninterface Props {\n  seasons: SeasonKey[];\n  teams: Team[];\n}\n\nfunction TeamPage({ seasons, teams }: Props) {\n  const { data } = useAtlas();\n\n  const [selectedSeason, setSelectedSeason] = useState<number>();\n  const [selectedTeam, setSelectedTeam] = useState<number>();\n\n  if (!data) {\n    return null;\n  }\n\n  return (\n    <StyledMain>\n      <Select\n        style={{ width: '360px' }}\n        label=\"Choose a season:\"\n        placeholder=\"Select...\"\n        onChange={val => {\n          if (!val) {\n            setSelectedSeason(undefined);\n            setSelectedTeam(undefined);\n            return;\n          }\n          setSelectedSeason(parseInt(val, 10));\n        }}\n      >\n        {seasons.map(({ code, name }) => (\n          <Option key={code} value={'' + code}>\n            {name}\n          </Option>\n        ))}\n      </Select>\n      {selectedSeason && (\n        <Select\n          style={{ width: '360px' }}\n          label=\"Choose a team:\"\n          placeholder=\"Select...\"\n          onChange={val => {\n            if (!val) {\n              setSelectedTeam(undefined);\n              return;\n            }\n            setSelectedTeam(parseInt(val, 10));\n          }}\n        >\n          {teams\n            .filter(team => team.season.code === selectedSeason)\n            .map(({ key, name }) => (\n              <Option key={key} value={'' + key}>\n                {name}\n              </Option>\n            ))}\n        </Select>\n      )}\n      {selectedTeam && <>team data</>}\n    </StyledMain>\n  );\n}\n\nexport default TeamPage;\n","import React, { useEffect, useState } from 'react';\nimport { Routes, Route } from 'react-router-dom';\n\nimport { useAtlas } from '../realm';\nimport { /*Player, ScheduledWeek,*/ Season, Team } from '../types';\n\nimport { LoginPage, ProtectedRoute } from './auth';\nimport Header from './header';\nimport HomePage from './home';\nimport Sandbox from './sandbox';\nimport TeamPage from './team';\n\nfunction App() {\n  const { data } = useAtlas();\n\n  const [seasons, setSeasons] = useState<Season[]>([]);\n  useEffect(() => {\n    if (!data) {\n      return;\n    }\n    data.seasons().find().then(setSeasons);\n  });\n\n  // const [players, setPlayers] = useState<{ list: Player[]; byKey: Record<string, Player> }>({ list: [], byKey: {} });\n  // useEffect(() => {\n  //   if (!data) {\n  //     return;\n  //   }\n  //   data\n  //     .players()\n  //     .find()\n  //     .then(players =>\n  //       setPlayers({\n  //         list: players,\n  //         byKey: players.reduce((acc, player) => ({ ...acc, [player.key]: player }), {}),\n  //       }),\n  //     );\n  // }, [data]);\n\n  const [teams, setTeams] = useState<{ list: Team[]; byKey: Record<string, Team> }>({ list: [], byKey: {} });\n  useEffect(() => {\n    if (!data) {\n      return;\n    }\n    data\n      .teams()\n      .find()\n      .then(teams =>\n        setTeams({\n          list: teams,\n          byKey: teams.reduce((acc, team) => ({ ...acc, [team.key]: team }), {}),\n        }),\n      );\n  }, [data]);\n\n  // const [schedule, setSchedule] = useState<Record<number, Record<number, Record<string, ScheduledWeek>>>>({});\n  // useEffect(() => {\n  //   if (!data) {\n  //     return;\n  //   }\n  //   data\n  //     .schedule()\n  //     .find()\n  //     .then(weeks => {\n  //       setSchedule(\n  //         weeks.reduce<Record<number, Record<number, Record<string, ScheduledWeek>>>>(\n  //           (acc, week) => ({\n  //             ...acc,\n  //             [week.season.code]: {\n  //               ...(acc[week.season.code] || {}),\n  //               [week.week_num]: {\n  //                 ...((acc[week.season.code] || {})[week.week_num] || {}),\n  //                 [week.season.day]: week,\n  //               },\n  //             },\n  //           }),\n  //           {},\n  //         ),\n  //       );\n  //     });\n  // }, [data]);\n  return (\n    <>\n      <Header />\n      <Routes>\n        <Route\n          path=\"/\"\n          element={\n            <ProtectedRoute>\n              <HomePage seasons={seasons} />\n            </ProtectedRoute>\n          }\n        />\n        <Route\n          path=\"team\"\n          element={\n            <ProtectedRoute>\n              <TeamPage seasons={seasons} teams={teams.list} />\n            </ProtectedRoute>\n          }\n        />\n        <Route path=\"login\" element={<LoginPage />} />\n        <Route path=\"sandbox\" element={<Sandbox />} />\n      </Routes>\n    </>\n  );\n}\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import { css } from '@emotion/react'\n\nconst CDN = 'https://d2va9gm4j17fy9.cloudfront.net';\nconst fontsURL = `${CDN}/fonts`;\n\nconst docStyles = css`\n  @font-face {\n    font-family: 'Akzidenz';\n    font-weight: normal;\n    src: url('${fontsURL}/akzidgrostdreg.eot');\n    /* IE9 Compat Modes */\n    src: url('${fontsURL}/akzidgrostdreg.eot?#iefix')\n        format('embedded-opentype'),\n      /* Pretty Modern Browsers */ url('${fontsURL}/akzidgrostdreg.ttf')\n        format('truetype'),\n      /* Safari, Android, iOS */ url('${fontsURL}/akzidgrostdreg.svg#Akzidenz')\n        format('svg');\n    /* Legacy iOS */\n  }\n\n  @font-face {\n    font-family: 'Akzidenz';\n    font-weight: 600;\n    src: url('${fontsURL}/akzidgrostdmed.eot');\n    /* IE9 Compat Modes */\n    src: url('${fontsURL}/akzidgrostdmed.eot?#iefix')\n        format('embedded-opentype'),\n      /* IE6-IE8 */ url('${fontsURL}/akzidgrostdmed.woff') format('woff'),\n      /* Pretty Modern Browsers */ url('${fontsURL}/akzidgrostdmed.ttf')\n        format('truetype'),\n      /* Safari, Android, iOS */ url('${fontsURL}/akzidgrostdmed.svg#Akzidenz')\n        format('svg');\n    /* Legacy iOS */\n  }\n\n  @font-face {\n    font-family: 'Akzidenz';\n    font-weight: bold;\n    src: url('${fontsURL}/akzidgrostdmed.eot');\n    /* IE9 Compat Modes */\n    src: url('${fontsURL}/akzidgrostdmed.eot?#iefix')\n        format('embedded-opentype'),\n      /* IE6-IE8 */ url('${fontsURL}/akzidgrostdmed.woff') format('woff'),\n      /* Pretty Modern Browsers */ url('${fontsURL}/akzidgrostdmed.ttf')\n        format('truetype'),\n      /* Safari, Android, iOS */ url('${fontsURL}/akzidgrostdmed.svg#Akzidenz')\n        format('svg');\n    /* Legacy iOS */\n  }\n\n  html {\n    font-family: 'Akzidenz', 'Helvetica Neue', Helvetica, Arial, sans-serif;\n    font-weight: normal;\n    font-style: normal;\n  }\n\n  body {\n    margin: 0;\n  }\n\n  *,\n  *:before,\n  *:after {\n    box-sizing: border-box;\n  }\n`\n\n\nconst meyersWebReset = css`\n/* http://meyerweb.com/eric/tools/css/reset/\n   v2.0 | 20110126\n   License: none (public domain)\n*/\nhtml, body, div, span, applet, object, iframe,\nh1, h2, h3, h4, h5, h6, p, blockquote, pre,\na, abbr, acronym, address, big, cite, code,\ndel, dfn, em, img, ins, kbd, q, s, samp,\nsmall, strike, strong, sub, sup, tt, var,\nb, u, i, center,\ndl, dt, dd, ol, ul, li,\nfieldset, form, label, legend,\ntable, caption, tbody, tfoot, thead, tr, th, td,\narticle, aside, canvas, details, embed,\nfigure, figcaption, footer, header, hgroup,\nmenu, nav, output, ruby, section, summary,\ntime, mark, audio, video {\n\tmargin: 0;\n\tpadding: 0;\n\tborder: 0;\n\tfont-size: 100%;\n\tfont: inherit;\n\tvertical-align: baseline;\n}\n/* HTML5 display-role reset for older browsers */\narticle, aside, details, figcaption, figure,\nfooter, header, hgroup, menu, nav, section {\n\tdisplay: block;\n}\nbody {\n\tline-height: 1;\n}\nol, ul {\n\tlist-style: none;\n}\nblockquote, q {\n\tquotes: none;\n}\nblockquote:before, blockquote:after,\nq:before, q:after {\n\tcontent: '';\n\tcontent: none;\n}\ntable {\n\tborder-collapse: collapse;\n\tborder-spacing: 0;\n}\n`;\n\n\nfunction styles() {\n  return [\n    meyersWebReset,\n    docStyles,\n  ]\n}\n\nexport default styles;\n","const theme = {\n  colors: {\n    black: '#000000',\n    white: '#ffffff',\n    offwhite: '#fffed1',\n    grays: {\n      base: '#282c34',\n    },\n    reds: {\n      base: '#4d0a05',\n      light1: '#8a1a10',\n      light2: '#b42619',\n      light3: '#df3121',\n    },\n    blues: {\n      light1: '#61dafb',\n    },\n  },\n  typography: {\n    fonts: {\n      code: `source-code-pro, Menlo, Monaco, Consolas, 'Courier New', monospace`,\n    },\n  },\n};\n\nexport type Theme = typeof theme;\nexport default theme;\n","import React from 'react';\nimport { Global, ThemeProvider } from '@emotion/react';\nimport LeafygreenProvider from '@leafygreen-ui/leafygreen-provider';\nimport ReactDOM from 'react-dom/client';\nimport { BrowserRouter } from 'react-router-dom';\n\nimport App from './app';\nimport { AtlasProvider, RealmProvider } from './realm';\nimport reportWebVitals from './reportWebVitals';\nimport styles from './styles';\nimport theme from './theme';\n\nconst root = ReactDOM.createRoot(document.getElementById('root') as HTMLElement);\nroot.render(\n  <React.StrictMode>\n    <BrowserRouter basename=\"/amsterdam\">\n      <RealmProvider>\n        <AtlasProvider>\n          <LeafygreenProvider>\n            <ThemeProvider theme={theme}>\n              <Global styles={styles} />\n              <App />\n            </ThemeProvider>\n          </LeafygreenProvider>\n        </AtlasProvider>\n      </RealmProvider>\n    </BrowserRouter>\n  </React.StrictMode>,\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals(console.log);\n"],"sourceRoot":""}