{"version":3,"sources":["realm/use_realm.tsx","realm/use_atlas.tsx","app/auth/login.tsx","app/auth/protected_route.tsx","app/headers/logo.tsx","app/headers/desktop.tsx","app/headers/mobile.tsx","pages/home/home.tsx","components/page_content.tsx","components/plain_button.tsx","types/amsterdam.ts","types/season.ts","pages/seasons/admin.tsx","pages/seasons/players_dashboard.tsx","types/player_match.ts","pages/seasons/team_header.tsx","pages/seasons/match_table.tsx","pages/seasons/player_results.tsx","pages/seasons/team_view.tsx","pages/seasons/season_standings.tsx","pages/seasons/team_dashboard.tsx","pages/seasons/season_dashboard.tsx","pages/seasons/new_season_form.tsx","pages/seasons/seasons_dashboard.tsx","pages/seasons/index.tsx","app/app.tsx","reportWebVitals.ts","styles.ts","theme.ts","index.tsx"],"names":["RealmContext","createContext","RealmProvider","app","children","Realm","id","useState","currentUser","user","setUser","login","email","password","logIn","emailPassword","console","error","loginAnonymous","anonymous","logout","logOut","Provider","value","useRealm","realm","useContext","Error","AtlasContext","AtlasProvider","data","setData","useEffect","mongoClient","atlasData","useAtlas","atlas","players","db","collection","seasons","teams","teamMatches","playerMatches","StyledLogin","styled","div","LoginContainer","LoginAnonContainer","LoginPage","location","useLocation","username","setUsername","setPassword","from","state","pathname","to","replace","style","marginBottom","label","placeholder","onChange","e","target","type","marginTop","variant","onClick","ProtectedRoute","leafAnimation","keyframes","StyledLogo","MongoDBLogoMark","Logo","height","StyledHeader","NavLinks","ul","UserInfo","Header","navTo","useNavigate","margin","textDecoration","textAlign","cursor","providerType","profile","header","menuOpen","setMenuOpen","flex","align","justify","open","trigger","size","glyph","href","description","StyledMain","StyledOrderedList","ol","StyledUnorderedList","HomePage","rel","Container","PageContent","StyledButton","Button","theme","colors","white","lg","blue","base","PlainButton","rest","dayOfWeek","v","charAt","toUpperCase","substring","isSeasonTerm","NightContainer","NightControl","NightHeader","TeamInputs","SeasonAdmin","season","saveDivisions","saveTeams","Object","values","divisions","reduce","tot","divs","length","divisionsOpen","setDivisionsOpen","divisionsErrMsg","setDivisionsErrMsg","nights","acc","night","existingDivisions","setDivisions","teamsOepn","setTeamsOpen","teamsErrMsg","setTeamsErrMsg","teamsByDivision","setTeamsByDivision","entries","inner","division","existingTeams","filter","t","division_name","map","xref","name","title","isOpen","val","idx","i","primaryButton","text","errorMessage","divisionName","team","flatMap","divisionTeams","parseInt","Dashboard","StyledRow","Row","shouldForwardProp","prop","win","loss","backgroundColor","green","light2","red","PlayersDashboard","playerMatchesByXref","playersByTeamXref","teamsByXref","selectedPlayer","setSelectedPlayer","setPlayerMatches","teamXref","player","displayName","columns","pm","datum","self","find","p","handicap","games_won","opp","date","toLocaleDateString","forfeit","match_id","ModalHeader","PageHeader","TeamHeader","modalView","teamRecord","tr","wins","losses","teamRecordDisplay","gridColumn","marginLeft","Match","selfTeamXref","_id","PlayerResults","linkToPlayers","stats","useMemo","playerWeeks","totals","gamesWon","gamesLost","playerMatch","week_num","doubles","gamePct","emptyStats","n","sort","p1","p2","push","pr","toFixed","Matches","TeamView","playerMatchesByTeamXref","teamMatchesById","teamRecordsByXref","playerMatchesById","setPlayerMatchesById","forEach","matchId","m1","m2","seq","schedule","display","teamMatchup","selectedTeamXref","teamMatch","matches_won","newTeamMatchup","matchDescription","Leagues","Divisions","Division","SeasonPage","teamMatchesByXref","teamXrefsByDivision","setTeamXrefsByDivision","teamRecords","rank","pct","tr1","tr2","modalTeam","setModalTeam","isMobile","useMediaQuery","query","ts","setOpen","TeamDashboard","useParams","setTeam","setTeamRecord","loadPlayerMatches","loadTeams","loadTeamMatches","year","term","s","setTeams","setTeamsByXref","then","setTeamMatchesByXref","setTeamRecordsByXref","setTeamMatchesById","outer","teamStatsyXref","gamesTotal","matchStats","teamStats","emptyMatchStats","setPlayerMatchesByXref","setPlayerMatchesByTeamXref","setPlayersByTeamXref","pm1","pm2","getTime","playersMap","path","element","NewSeasonForm","saveSeason","yearInput","setYearInput","termInput","setTermInput","typeInput","setTypeInput","xrefInput","setXrefInput","setName","monday","setMonday","tuesday","setTuesday","wednesday","setWednesday","thursday","setThursday","friday","setFriday","saturday","setSaturday","sunday","setSunday","numWeeksInput","setNumWeeksInput","errMsg","setErrMsg","checked","stopPropagation","numWeeks","num_weeks","StyledPage","CardList","CardTitle","modalOpen","setModalOpen","minWidth","Seasons","setSeasons","insertOne","insertedId","seasonXref","season_xref","updateOne","$set","modifiedCount","insertMany","App","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","fontsURL","docStyles","css","meyersWebReset","styles","black","offwhite","grays","reds","light1","light3","blues","palette","typography","fonts","code","ReactDOM","createRoot","document","getElementById","render","StrictMode","basename"],"mappings":"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","file":"static/js/main.532c5e4b.chunk.js","sourcesContent":["import React, { createContext, useContext, useState } from 'react';\nimport * as Realm from 'realm-web';\n\ninterface RealmProps {\n  login: (email: string, password: string) => Promise<Realm.User | null>;\n  loginAnonymous: () => Promise<Realm.User | null>;\n  logout: () => Promise<void>;\n  user: Realm.User | null;\n}\n\nconst RealmContext = createContext<RealmProps | null>(null);\n\ninterface RealmProviderProps {\n  children: React.ReactNode;\n}\n\nexport const RealmProvider = ({ children }: RealmProviderProps) => {\n  let app: Realm.App;\n  if (process.env.NODE_ENV === 'development') {\n    app = new Realm.App({ id: 'amsterdam-wmrtx', baseUrl: 'http://localhost:8080' });\n  } else {\n    app = new Realm.App({ id: 'amsterdam-ussnf' });\n  }\n\n  const [user, setUser] = useState<Realm.User | null>(app.currentUser);\n\n  const login = async (email: string, password: string) => {\n    try {\n      await app.logIn(Realm.Credentials.emailPassword(email, password));\n\n      setUser(app.currentUser);\n      return app.currentUser;\n    } catch (e) {\n      console.error('failed to login', e);\n      setUser(null);\n      return null;\n    }\n  };\n\n  const loginAnonymous = async () => {\n    try {\n      await app.logIn(Realm.Credentials.anonymous());\n\n      setUser(app.currentUser);\n      return app.currentUser;\n    } catch (e) {\n      console.error('failed to login', e);\n      setUser(null);\n      return null;\n    }\n  };\n\n  const logout = async () => {\n    try {\n      if (app.currentUser) {\n        await app.currentUser.logOut();\n      }\n    } catch (e) {\n      console.error('failed to logout', e);\n    } finally {\n      setUser(null);\n    }\n  };\n\n  return <RealmContext.Provider value={{ login, loginAnonymous, logout, user }}>{children}</RealmContext.Provider>;\n};\n\nexport const useRealm = () => {\n  const realm = useContext(RealmContext);\n  if (realm === null) {\n    throw new Error('useRealm() called outside of a RealmProvider');\n  }\n  return realm;\n};\n","import React, { createContext, useContext, useEffect, useState } from 'react';\n\nimport { Player, PlayerMatch, Season, Team, TeamMatch } from '../types';\n\nimport { useRealm } from './use_realm';\n\ninterface AtlasProps {\n  data: ReturnType<typeof atlasData> | null;\n}\n\nconst AtlasContext = createContext<AtlasProps | null>(null);\n\ninterface AtlasProviderProps {\n  children: React.ReactNode;\n}\n\nexport const AtlasProvider = ({ children }: AtlasProviderProps) => {\n  const { user } = useRealm();\n\n  const [data, setData] = useState<ReturnType<Realm.User['mongoClient']> | null>(null);\n\n  useEffect(() => {\n    if (user === null) {\n      return;\n    }\n    setData(user.mongoClient('data'));\n  }, [user]);\n\n  return <AtlasContext.Provider value={{ data: atlasData(data) }}>{children}</AtlasContext.Provider>;\n};\n\nexport const useAtlas = () => {\n  const atlas = useContext(AtlasContext);\n  if (atlas === null) {\n    throw new Error('useAtlas() called outside of a AtlasProvider');\n  }\n  return atlas;\n};\n\nfunction atlasData(data: ReturnType<Realm.User['mongoClient']> | null) {\n  if (!data) {\n    return null;\n  }\n  return {\n    players: () => data.db('amsterdam').collection<Player>('players'),\n    seasons: () => data.db('amsterdam').collection<Season>('seasons'),\n    teams: () => data.db('amsterdam').collection<Team>('teams'),\n    teamMatches: () => data.db('amsterdam').collection<TeamMatch>('team_matches'),\n    playerMatches: () => data.db('amsterdam').collection<PlayerMatch>('player_matches'),\n  };\n}\n","import React, { useState } from 'react';\nimport { useLocation } from 'react-router-dom';\nimport styled from '@emotion/styled';\nimport Button from '@leafygreen-ui/button';\nimport TextInput from '@leafygreen-ui/text-input';\nimport { Body } from '@leafygreen-ui/typography';\nimport { Navigate } from 'react-router-dom';\n\nimport { useRealm } from '../../realm';\n\nconst StyledLogin = styled.div`\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n`;\n\nconst LoginContainer = styled.div`\n  min-width: 360px;\n  padding: 1rem;\n  border: 1px solid;\n`;\n\nconst LoginAnonContainer = styled.div`\n  min-width: 360px;\n  padding: 0 1rem 1rem 1rem;\n  margin-top: 0.5rem;\n`;\n\nfunction LoginPage() {\n  const location = useLocation();\n  const [username, setUsername] = useState('');\n  const [password, setPassword] = useState('');\n\n  const { login, loginAnonymous, user } = useRealm();\n\n  let from = (location as any).state?.from?.pathname || '/';\n\n  if (user) {\n    return <Navigate to={from} replace />;\n  }\n\n  return (\n    <StyledLogin>\n      <LoginContainer>\n        <Body style={{ marginBottom: '1rem' }}>Please log in using your credentials</Body>\n        <TextInput\n          label=\"Username\"\n          placeholder=\"your.email@example.com\"\n          onChange={e => {\n            setUsername(e.target.value);\n          }}\n          value={username}\n        />\n        <TextInput\n          label=\"Password\"\n          type=\"password\"\n          onChange={e => {\n            setPassword(e.target.value);\n          }}\n          value={password}\n        />\n        <Button style={{ marginTop: '1rem' }} variant=\"primary\" onClick={() => login(username, password)}>\n          Login\n        </Button>\n      </LoginContainer>\n      <LoginAnonContainer>\n        <Body style={{ marginBottom: '0.5rem' }}>Or log in as a guest</Body>\n        <Button variant=\"primaryOutline\" onClick={() => loginAnonymous()}>\n          Login Anonymously\n        </Button>\n      </LoginAnonContainer>\n    </StyledLogin>\n  );\n}\n\nexport default LoginPage;\n","import React from 'react';\nimport { useLocation, Navigate } from 'react-router-dom';\n\nimport { useRealm } from '../../realm';\n\ninterface Props {\n  children: JSX.Element;\n}\n\nfunction ProtectedRoute({ children }: Props) {\n  let { user } = useRealm();\n  let location = useLocation();\n\n  if (!user) {\n    return <Navigate to=\"/login\" state={{ from: location }} replace />;\n  }\n\n  return children;\n}\n\nexport default ProtectedRoute;\n","import React from 'react';\nimport { keyframes } from '@emotion/react';\nimport styled from '@emotion/styled';\nimport { MongoDBLogoMark } from '@leafygreen-ui/logo';\n\nconst leafAnimation = keyframes`\n  from {\n    transform: rotate(-5deg);\n  }\n  to {\n    transform: rotate(5deg);\n  }\n`;\n\nconst StyledLogo = styled(MongoDBLogoMark)`\n  display: inline-block;\n  margin: 24px;\n  animation: ${leafAnimation} 3s infinite alternate-reverse ease-in-out;\n  transform-origin: 50% 100%;\n`;\n\nfunction Logo() {\n  return <StyledLogo style={{ marginTop: 0, marginBottom: 0 }} height={48} />;\n}\n\nexport default Logo;\n","import React from 'react';\nimport { useNavigate, Link } from 'react-router-dom';\nimport styled from '@emotion/styled';\nimport Button from '@leafygreen-ui/button';\nimport { Body, H1 } from '@leafygreen-ui/typography';\n\nimport { useRealm } from '../../realm';\n\nimport Logo from './logo';\n\nconst StyledHeader = styled.div`\n  display: grid;\n  grid-template-columns: 1fr auto 1fr;\n  grid-column-gap: 5px;\n  justify-items: center;\n  margin-top: 0.5rem;\n`;\n\nconst NavLinks = styled.ul`\n  margin-right: auto;\n  text-align: left;\n  display: flex;\n`;\n\nconst UserInfo = styled.div`\n  margin-left: auto;\n  text-align: right;\n  padding-right: 0.5rem;\n`;\n\nfunction Header() {\n  const navTo = useNavigate();\n  const { logout, user } = useRealm();\n\n  return (\n    <StyledHeader>\n      <NavLinks>\n        <Link style={{ margin: '1rem', textDecoration: 'none' }} to=\"/seasons\">\n          Seasons\n        </Link>\n      </NavLinks>\n      <span style={{ textAlign: 'center', cursor: 'pointer' }} onClick={() => navTo('/')}>\n        <H1>Amsterdam Billiards</H1>\n        <Logo />\n      </span>\n      {user && (\n        <UserInfo>\n          <Button variant=\"primaryOutline\" onClick={logout}>\n            Logout\n          </Button>\n          <Body>{user.providerType === 'anon-user' ? 'Guest' : user.profile.email || user.id}</Body>\n        </UserInfo>\n      )}\n    </StyledHeader>\n  );\n}\n\nexport default Header;\n","import React, { useState } from 'react';\nimport styled from '@emotion/styled';\nimport Icon from '@leafygreen-ui/icon';\nimport IconButton from '@leafygreen-ui/icon-button';\nimport { Menu, MenuSeparator, MenuItem } from '@leafygreen-ui/menu';\nimport { H1 } from '@leafygreen-ui/typography';\n\nimport { useRealm } from '../../realm';\n\nimport Logo from './logo';\n\nconst StyledHeader = styled.header`\n  margin-top: 0.5rem;\n  display: flex;\n  justify-items: space-between;\n  align-items: center;\n`;\n\nfunction Header() {\n  const [menuOpen, setMenuOpen] = useState(false);\n  const { logout, user } = useRealm();\n\n  return (\n    <StyledHeader>\n      <Logo />\n      <H1 style={{ flex: 1 }}>Amsterdam Billiards</H1>\n      <Menu\n        align=\"bottom\"\n        justify=\"end\"\n        open={menuOpen}\n        trigger={\n          <IconButton size=\"xlarge\" aria-label=\"User Menu\" onClick={() => setMenuOpen(!menuOpen)}>\n            <Icon glyph=\"Ellipsis\" />\n          </IconButton>\n        }\n      >\n        <MenuItem href=\"/amsterdam\">Standings</MenuItem>\n        <MenuItem href=\"/amsterdam/team\">Team Results</MenuItem>\n        <MenuItem href=\"/amsterdam/players\">Individual Results</MenuItem>\n        <MenuSeparator />\n        {!user && <MenuItem href=\"/amsterdam/login\">Login</MenuItem>}\n        {user && (\n          <MenuItem\n            onClick={logout}\n            description={user.providerType === 'anon-user' ? 'As guest' : user.profile.email || user.id}\n          >\n            Logout\n          </MenuItem>\n        )}\n      </Menu>\n    </StyledHeader>\n  );\n}\n\nexport default Header;\n","import React from 'react';\nimport styled from '@emotion/styled';\nimport Button from '@leafygreen-ui/button';\nimport Card from '@leafygreen-ui/card';\nimport { Body, H2, H3 } from '@leafygreen-ui/typography';\n\nconst StyledMain = styled.div`\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n  gap: 12px;\n  justify-content: center;\n`;\n\nconst StyledOrderedList = styled.ol`\n  list-style: auto;\n`;\n\nconst StyledUnorderedList = styled.ol`\n  list-style: disc;\n  margin-left: 1rem;\n`;\n\nfunction HomePage() {\n  return (\n    <StyledMain>\n      <H2>Welcome to Amsterdam Billiards Information</H2>\n      <Card>\n        <Button href=\"http://amsterdambilliards.com/\" target=\"_blank\" rel=\"noopener noreferrer\">\n          Official Amsterdam Billiards & Bar website\n        </Button>\n        <Button href=\"/amsterdam/seasons/2022/summer/team_8ball\">Team 8-Ball League Site</Button>\n      </Card>\n      <H3>Why You Should Join an Amsterdam Billiards League:</H3>\n      <StyledOrderedList>\n        <li>\n          <Body>The leagues are for players of all levels, including beginners and Pros</Body>\n        </li>\n        <li>\n          <Body>You'll have fun</Body>\n        </li>\n        <li>\n          <Body>You'll improve your pool game</Body>\n        </li>\n        <li>\n          <Body>It's a great way to meet other pool players</Body>\n        </li>\n        <li>\n          <Body>The leagues are co-ed</Body>\n        </li>\n        <li>\n          <Body>They're inexpensive</Body>\n        </li>\n        <li>\n          <Body>The prizes are great</Body>\n        </li>\n        <li>\n          <Body>\n            They're easy to join (just sign up in the club at the front desk or by clicking 'Register Now!' on this\n            page)\n          </Body>\n        </li>\n        <li>\n          <Body>You get a lot of free stuff:</Body>\n          <StyledUnorderedList>\n            <li>\n              <Body>Play pool for free for a week</Body>\n            </li>\n            <li>\n              <Body>3 hours of free play every week while the league lasts</Body>\n            </li>\n            <li>\n              <Body>Get a dollar off all drinks while you're playing in the leagues</Body>\n            </li>\n            <li>\n              <Body>Mid-Season league party</Body>\n            </li>\n            <li>\n              <Body>League Finals & Registration signup party</Body>\n            </li>\n          </StyledUnorderedList>\n        </li>\n      </StyledOrderedList>\n      <Button href=\"https://amsterdambilliards.com/leagues/\" target=\"_blank\" rel=\"noopener noreferrer\">\n        Register Now!\n      </Button>\n    </StyledMain>\n  );\n}\n\nexport default HomePage;\n","import React from 'react';\nimport styled from '@emotion/styled';\n\ninterface Props {\n  children?: React.ReactNode;\n}\n\nconst Container = styled.div`\n  margin: 0 auto;\n  max-width: 62%;\n  @media (max-width: 720px) {\n    max-width: 100%;\n  }\n`;\n\nfunction PageContent({ children }: Props) {\n  return <Container>{children}</Container>;\n}\n\nexport default PageContent;\n","import React from 'react';\nimport styled from '@emotion/styled';\nimport Button from '@leafygreen-ui/button';\n\nconst StyledButton = styled(Button)`\n  border: 0;\n  background-color: ${({ theme }) => theme.colors.white};\n  color: ${({ theme }) => theme.colors.lg.blue.base};\n`;\n\ninterface Props {\n  children?: React.ReactNode;\n  onClick: () => void;\n}\n\nfunction PlainButton({ children, ...rest }: Props) {\n  return <StyledButton {...rest}>{children}</StyledButton>;\n}\n\nexport default PlainButton;\n","export interface AmsterdamKey {\n  xref: number;\n  name: string;\n}\n\nexport type DayOfWeek = 'monday' | 'tuesday' | 'wednesday' | 'thursday' | 'friday' | 'saturday' | 'sunday';\n\nexport const isDayOfWeek = (v: string): v is DayOfWeek => {\n  switch (v) {\n    case 'monday':\n    case 'tuesday':\n    case 'wednesday':\n    case 'thursday':\n    case 'friday':\n    case 'saturday':\n    case 'sunday':\n      return true;\n  }\n  return false;\n};\n\nexport const dayOfWeek = (v: DayOfWeek): string => {\n  return v.charAt(0).toUpperCase() + v.substring(1);\n};\n\nexport const rankPlace = (r: number): string => {\n  let suffix = 'th';\n  if (r === 1) {\n    suffix = 'st';\n  } else if (r === 2) {\n    suffix = 'nd';\n  } else if (r === 3) {\n    suffix = 'rd';\n  }\n  return r + suffix;\n};\n","import { DayOfWeek } from './amsterdam';\n\nexport type SeasonTerm = 'winter' | 'spring' | 'summer' | 'fall';\n\nexport const isSeasonTerm = (v: string): v is SeasonTerm => {\n  switch (v) {\n    case 'winter':\n    case 'spring':\n    case 'summer':\n    case 'fall':\n      return true;\n  }\n  return false;\n};\n\nexport type LeagueType = 'team_8ball';\n\nexport const isLeagueType = (v: string): v is LeagueType => {\n  switch (v) {\n    case 'team_8ball':\n      return true;\n  }\n  return false;\n};\n\nexport interface Season {\n  _id: string;\n  year: number;\n  term: SeasonTerm;\n  type: LeagueType;\n  xref: number;\n  name: string;\n  num_weeks: number;\n  nights: DayOfWeek[];\n  divisions: Partial<Record<DayOfWeek, string[]>>;\n}\n","import React, { useEffect, useState } from 'react';\nimport { useNavigate } from 'react-router-dom';\nimport styled from '@emotion/styled';\nimport Button from '@leafygreen-ui/button';\nimport ExpandableCard from '@leafygreen-ui/expandable-card';\nimport FormFooter from '@leafygreen-ui/form-footer';\nimport TextInput from '@leafygreen-ui/text-input';\nimport { Subtitle } from '@leafygreen-ui/typography';\n\nimport { dayOfWeek, DayOfWeek, Team, Season } from '../../types';\n\nconst NightContainer = styled.div`\n  display: flex;\n  flex-wrap: wrap;\n  justify-content: center;\n`;\n\nconst NightControl = styled.div`\n  display: flex;\n  flex-direction: column;\n  :not(:first-of-type) {\n    margin-left: 2rem;\n  }\n`;\n\nconst NightHeader = styled.div`\n  display: flex;\n  justify-content: space-between;\n  margin-bottom: 1rem;\n`;\n\nconst TeamInputs = styled.div`\n  display: flex;\n`;\n\ninterface Props {\n  season: Season;\n  teams: Team[];\n  saveDivisions: (divisions: Season['divisions']) => Promise<void>;\n  saveTeams: (teams: Omit<Team, '_id' | 'season_xref' | 'schedule'>[]) => Promise<void>;\n}\n\nfunction SeasonAdmin({ season, teams, saveDivisions, saveTeams }: Props) {\n  const navTo = useNavigate();\n\n  const [divisionsOpen, setDivisionsOpen] = useState(\n    !Object.values(season.divisions).reduce((tot, divs) => (tot += divs.length), 0),\n  );\n  const [divisionsErrMsg, setDivisionsErrMsg] = useState('');\n  const [divisions, setDivisions] = useState<Partial<Record<DayOfWeek, string[]>>>(\n    season.nights.reduce((acc, night) => {\n      const existingDivisions = season.divisions[night] || [];\n      return {\n        ...acc,\n        [night]: existingDivisions.length > 0 ? existingDivisions : [''],\n      };\n    }, {}),\n  );\n\n  const [teamsOepn, setTeamsOpen] = useState(\n    !!Object.values(season.divisions).reduce((tot, divs) => (tot += divs.length), 0),\n  );\n  const [teamsErrMsg, setTeamsErrMsg] = useState('');\n  const [teamsByDivision, setTeamsByDivision] = useState<\n    Partial<Record<DayOfWeek, Record<string, { xref: string; name: string }[]>>>\n  >({});\n  useEffect(() => {\n    setTeamsByDivision(\n      Object.entries(divisions).reduce(\n        (acc, [night, divisions]) => ({\n          ...acc,\n          [night]: divisions.reduce((inner, division) => {\n            const existingTeams = teams\n              .filter(t => t.division_name === division)\n              .map(t => ({ xref: t.xref + '', name: t.name }));\n            return {\n              ...inner,\n              [division]: existingTeams.length > 0 ? existingTeams : [{ xref: '', name: '' }],\n            };\n          }, {}),\n        }),\n        {},\n      ),\n    );\n  }, [season, teams, divisions]);\n\n  return (\n    <>\n      <Button variant=\"primaryOutline\" onClick={() => navTo('..')}>\n        Back to Dashboard\n      </Button>\n      <ExpandableCard\n        title=\"Admin: Divisions\"\n        description=\"Make sure the league divisions are correct\"\n        isOpen={divisionsOpen}\n        onClick={() => setDivisionsOpen(!divisionsOpen)}\n      >\n        <NightContainer>\n          {season.nights.map(night => (\n            <NightControl key={night}>\n              <NightHeader>\n                <Subtitle>{dayOfWeek(night)}</Subtitle>\n                <Button\n                  size=\"xsmall\"\n                  onClick={() => setDivisions({ ...divisions, [night]: [...(divisions[night] || []), ''] })}\n                >\n                  +\n                </Button>\n              </NightHeader>\n              {(divisions[night] || []).map((val, idx) => (\n                <TextInput\n                  style={{ marginBottom: '0.5rem' }}\n                  key={val + idx}\n                  label={`Division #${idx}`}\n                  value={val}\n                  onChange={e =>\n                    setDivisions({\n                      ...divisions,\n                      [night]: (divisions[night] || []).map((v, i) => {\n                        if (i === idx) {\n                          return e.target.value;\n                        }\n                        return v;\n                      }),\n                    })\n                  }\n                />\n              ))}\n            </NightControl>\n          ))}\n        </NightContainer>\n        <FormFooter\n          primaryButton={{\n            text: 'Save',\n            onClick: async e => {\n              try {\n                saveDivisions(divisions);\n                setDivisionsOpen(false);\n                setTeamsOpen(true);\n                setDivisionsErrMsg('');\n              } catch ({ error }) {\n                setDivisionsErrMsg(`failed to save divisions: ${error}`);\n              }\n            },\n          }}\n          errorMessage={divisionsErrMsg}\n        />\n      </ExpandableCard>\n      <ExpandableCard\n        title=\"Admin: Teams\"\n        description=\"Make sure the league teams are correct\"\n        isOpen={teamsOepn}\n        onClick={() => setTeamsOpen(!teamsOepn)}\n      >\n        {Object.entries(teamsByDivision).map(([night, divisions]) => (\n          <NightContainer key={night}>\n            {Object.entries(divisions).map(([divisionName, teams]) => (\n              <NightControl key={divisionName}>\n                <NightHeader>\n                  <Subtitle>{divisionName}</Subtitle>\n                  <Button\n                    size=\"xsmall\"\n                    onClick={() =>\n                      setTeamsByDivision({\n                        ...teamsByDivision,\n                        [night]: {\n                          ...(teamsByDivision[night as DayOfWeek] || {}),\n                          [divisionName]: [\n                            ...((teamsByDivision[night as DayOfWeek] || {})[divisionName] || []),\n                            { xref: '', name: '' },\n                          ],\n                        },\n                      })\n                    }\n                  >\n                    +\n                  </Button>\n                </NightHeader>\n                {teams.map((team, idx) => (\n                  <TeamInputs key={idx}>\n                    <TextInput\n                      label={`Team #${idx} Key`}\n                      value={team.xref}\n                      onChange={e =>\n                        setTeamsByDivision({\n                          ...teamsByDivision,\n                          [night]: {\n                            ...(teamsByDivision[night as DayOfWeek] || {}),\n                            [divisionName]: ((teamsByDivision[night as DayOfWeek] || {})[divisionName] || []).map(\n                              (v, i) => {\n                                if (i === idx) {\n                                  return { ...v, xref: e.target.value };\n                                }\n                                return v;\n                              },\n                            ),\n                          },\n                        })\n                      }\n                    />\n                    <TextInput\n                      label={`Team #${idx} Name`}\n                      value={team.name}\n                      onChange={e =>\n                        setTeamsByDivision({\n                          ...teamsByDivision,\n                          [night]: {\n                            ...(teamsByDivision[night as DayOfWeek] || {}),\n                            [divisionName]: ((teamsByDivision[night as DayOfWeek] || {})[divisionName] || []).map(\n                              (v, i) => {\n                                if (i === idx) {\n                                  return { ...v, name: e.target.value };\n                                }\n                                return v;\n                              },\n                            ),\n                          },\n                        })\n                      }\n                    />\n                  </TeamInputs>\n                ))}\n              </NightControl>\n            ))}\n          </NightContainer>\n        ))}\n        <FormFooter\n          primaryButton={{\n            text: 'Save',\n            onClick: async e => {\n              try {\n                await saveTeams(\n                  Object.entries(teamsByDivision)\n                    .flatMap(([night, divisionTeams]) =>\n                      Object.entries(divisionTeams).flatMap(([divisionName, teams]) => {\n                        return teams.map(team => ({\n                          xref: parseInt(team.xref, 10),\n                          name: team.name,\n                          night: night as DayOfWeek,\n                          division_name: divisionName,\n                        }));\n                      }),\n                    )\n                    .filter(team => !!team.xref),\n                );\n                setTeamsOpen(false);\n                setTeamsErrMsg('');\n              } catch ({ error }) {\n                setTeamsErrMsg(`failed to save teams: ${error}`);\n              }\n            },\n          }}\n          errorMessage={teamsErrMsg}\n        />\n      </ExpandableCard>\n    </>\n  );\n}\n\nexport default SeasonAdmin;\n","import React, { useEffect, useState } from 'react';\nimport { useLocation } from 'react-router-dom';\nimport styled from '@emotion/styled';\nimport { Combobox, ComboboxGroup, ComboboxOption } from '@leafygreen-ui/combobox';\nimport { Table, TableHeader, Row, Cell } from '@leafygreen-ui/table';\n\nimport { emptyPlayerResult, PlayerMatch, PlayerResult, Team, TeamMatch } from '../../types';\n\nconst Dashboard = styled.div`\n  padding: 0 1rem;\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n`;\n\nconst StyledRow = styled(Row, {\n  shouldForwardProp: prop => prop !== 'win' && prop !== 'loss',\n})<{ win?: boolean; loss?: boolean }>`\n  ${({ theme, win, loss }) =>\n    win\n      ? {\n          backgroundColor: theme.colors.lg.green.light2,\n        }\n      : loss\n      ? {\n          backgroundColor: theme.colors.lg.red.light2,\n        }\n      : {}}\n`;\n\ninterface Props {\n  playerMatchesByXref: Record<string, PlayerMatch[]>;\n  playersByTeamXref: Record<number, Pick<PlayerResult, 'xref' | 'name' | 'team'>[]>;\n  teamsByXref: Record<string, Team>;\n  teamMatchesById: Record<string, TeamMatch>;\n}\n\nfunction PlayersDashboard({ playerMatchesByXref, playersByTeamXref, teamsByXref }: Props) {\n  const location = useLocation();\n  const xref = (location as any).state?.xref;\n\n  const [selectedPlayer, setSelectedPlayer] = useState<string | null>();\n  useEffect(() => {\n    setSelectedPlayer(xref);\n  }, [xref]);\n\n  const [playerMatches, setPlayerMatches] = useState<PlayerMatch[]>([]);\n  useEffect(() => {\n    if (!selectedPlayer) {\n      return;\n    }\n    setPlayerMatches(playerMatchesByXref[selectedPlayer]);\n  }, [selectedPlayer, playerMatchesByXref]);\n\n  return (\n    <Dashboard>\n      <Combobox\n        label=\"Player Name\"\n        description=\"Choose a player to view stats\"\n        placeholder=\"Select a player...\"\n        value={selectedPlayer}\n        onChange={setSelectedPlayer}\n      >\n        {Object.entries(playersByTeamXref).map(([teamXref, players]) => (\n          <ComboboxGroup key={teamXref} label={teamsByXref[teamXref].name}>\n            {players.map(player => (\n              <ComboboxOption key={player.xref} value={player.xref + ''} displayName={player.name} />\n            ))}\n          </ComboboxGroup>\n        ))}\n      </Combobox>\n      {selectedPlayer && (\n        <Table\n          data={playerMatches}\n          columns={[\n            <TableHeader label=\"Date\" />,\n            <TableHeader label=\"Matchup\" />,\n            <TableHeader label=\"Opp Player\" />,\n            <TableHeader label=\"Opp Team\" />,\n            <TableHeader label=\"Round\" />,\n            <TableHeader label=\"Games Won\" />,\n            <TableHeader label=\"Games Lost\" />,\n            <TableHeader label=\"Forfeit\" />,\n          ]}\n        >\n          {({ datum: pm }) => {\n            // const teamMatch = teamMatchesById[pm.match_id];\n            const self = pm.players.find(p => p.xref + '' === selectedPlayer) || emptyPlayerResult();\n            const opp = pm.players.find(p => p.xref + '' !== selectedPlayer) || emptyPlayerResult();\n            return (\n              <StyledRow key={pm.match_id} win={self.win} loss={self.loss}>\n                <Cell>{pm.date.toLocaleDateString()}</Cell>\n                <Cell>{`${self.handicap} vs ${opp.handicap}`}</Cell>\n                <Cell>{opp.name}</Cell>\n                <Cell>{opp.team.name}</Cell>\n                <Cell>{pm.type}</Cell>\n                <Cell>{self.games_won}</Cell>\n                <Cell>{opp.games_won}</Cell>\n                <Cell>{pm.forfeit ? 'Y' : ''}</Cell>\n              </StyledRow>\n            );\n          }}\n        </Table>\n      )}\n    </Dashboard>\n  );\n}\n\nexport default PlayersDashboard;\n","import { AmsterdamKey } from './amsterdam';\n\nexport type PlayerMatchType = 'R1' | 'R2' | 'TB';\n\nexport interface PlayerMatch {\n  _id: string;\n  match_id: string;\n  season_xref: number;\n  week_num: number;\n  date: Date;\n  type: PlayerMatchType;\n  seq: number;\n  players: PlayerResult[];\n  forfeit?: boolean;\n}\n\nexport interface PlayerResult extends AmsterdamKey {\n  team: AmsterdamKey;\n  handicap: number;\n  games_won: number;\n  win?: boolean;\n  loss?: boolean;\n}\n\nexport const emptyPlayerResult = (): PlayerResult => ({\n  xref: 0,\n  name: '',\n  team: { xref: 0, name: '' },\n  handicap: 0,\n  games_won: 0,\n});\n\nexport interface PlayerMatchup {\n  self: PlayerResult;\n  opp: PlayerResult;\n}\n","import React from 'react';\nimport { Link } from 'react-router-dom';\nimport styled from '@emotion/styled';\nimport { H2 } from '@leafygreen-ui/typography';\n\nimport { Team, TeamRecord } from '../../types';\n\nconst ModalHeader = styled.div`\n  display: flex;\n  justify-content: space-between;\n  align-items: center;\n`;\n\nconst PageHeader = styled.div`\n  align-self: stretch;\n  display: grid;\n  grid-template-columns: 1fr auto 1fr;\n  grid-column-gap: 5px;\n`;\n\ninterface Props {\n  modalView?: boolean;\n  team?: Team;\n  teamRecord?: TeamRecord;\n}\n\nfunction teamRecordDisplay(tr = { wins: 0, losses: 0 }) {\n  return `${tr.wins}-${tr.losses}`;\n}\n\nfunction TeamHeader({ modalView, team, teamRecord }: Props) {\n  if (!team) {\n    return null;\n  }\n\n  const title = `${team.name} (${teamRecordDisplay(teamRecord)})`;\n\n  if (modalView) {\n    return (\n      <ModalHeader>\n        <H2>{title}</H2>\n        <Link to={team.xref + ''}>Detailed View</Link>\n      </ModalHeader>\n    );\n  }\n\n  return (\n    <PageHeader>\n      <H2 style={{ gridColumn: 2 }}>{title}</H2>\n      <Link to={'..'} style={{ marginLeft: 'auto', textAlign: 'right' }}>\n        Back to Standings\n      </Link>\n    </PageHeader>\n  );\n}\n\nexport default TeamHeader;\n","import React from 'react';\nimport styled from '@emotion/styled';\nimport { Table, TableHeader, Row, Cell } from '@leafygreen-ui/table';\n\nimport { emptyPlayerResult, PlayerMatch } from '../../types';\n\nconst StyledRow = styled(Row, {\n  shouldForwardProp: prop => prop !== 'win' && prop !== 'loss',\n})<{ win?: boolean; loss?: boolean }>`\n  ${({ theme, win, loss }) =>\n    win\n      ? {\n          backgroundColor: theme.colors.lg.green.light2,\n        }\n      : loss\n      ? {\n          backgroundColor: theme.colors.lg.red.light2,\n        }\n      : {}}\n`;\n\ninterface Props {\n  playerMatches: PlayerMatch[];\n  selfTeamXref: number;\n}\n\nfunction Match({ playerMatches, selfTeamXref }: Props) {\n  return (\n    <Table\n      data={playerMatches}\n      columns={[\n        <TableHeader label=\"Player\" />,\n        <TableHeader label=\"HCP\" />,\n        <TableHeader label=\"Games\" />,\n        <TableHeader label=\"Opponent\" />,\n        <TableHeader label=\"HCP\" />,\n        <TableHeader label=\"Games\" />,\n      ]}\n    >\n      {({ datum: pm }) => {\n        const self = pm.players.find(p => p.team.xref === selfTeamXref) || emptyPlayerResult();\n        const opp = pm.players.find(p => p.team.xref !== selfTeamXref) || emptyPlayerResult();\n        return (\n          <StyledRow key={pm._id} win={self.win} loss={self.loss}>\n            <Cell>{self.name}</Cell>\n            <Cell>{self.handicap}</Cell>\n            <Cell>{self.games_won}</Cell>\n            <Cell>{opp.name}</Cell>\n            <Cell>{opp.handicap}</Cell>\n            <Cell>{opp.games_won}</Cell>\n          </StyledRow>\n        );\n      }}\n    </Table>\n  );\n}\n\nexport default Match;\n","import React, { useMemo } from 'react';\nimport { useNavigate } from 'react-router-dom';\nimport { Table, TableHeader, Row, Cell } from '@leafygreen-ui/table';\n\nimport { PlainButton } from '../../components';\nimport { emptyPlayerResult, PlayerMatch, PlayerResult } from '../../types';\n\ninterface Props {\n  linkToPlayers?: string;\n  playerMatches: PlayerMatch[];\n  selfTeamXref: number;\n}\n\ninterface Stats extends Pick<PlayerResult, 'xref' | 'name' | 'handicap'> {\n  doubles: number;\n  wins: number;\n  losses: number;\n  gamesWon: number;\n  gamesLost: number;\n  gamePct: number;\n}\n\nconst emptyStats = (xref = 0, name = ''): Stats => ({\n  xref,\n  name,\n  handicap: 0,\n  doubles: 0,\n  wins: 0,\n  losses: 0,\n  gamesWon: 0,\n  gamesLost: 0,\n  gamePct: 0,\n});\n\nfunction PlayerResults({ linkToPlayers = 'players', playerMatches, selfTeamXref }: Props) {\n  const navTo = useNavigate();\n  const stats: Stats[] = useMemo(() => {\n    const playerWeeks: Record<string, Record<number, number>> = {};\n    const totals = {\n      wins: 0,\n      losses: 0,\n      gamesWon: 0,\n      gamesLost: 0,\n    };\n    const stats = Object.entries(\n      playerMatches.reduce<Record<number, Stats>>((acc, playerMatch) => {\n        const self = playerMatch.players.find(p => p.team.xref === selfTeamXref) || emptyPlayerResult();\n        const opp = playerMatch.players.find(p => p.team.xref !== selfTeamXref) || emptyPlayerResult();\n\n        if (playerMatch.type !== 'TB') {\n          if (!playerWeeks[self.xref]) {\n            playerWeeks[self.xref] = {};\n          }\n          if (!playerWeeks[self.xref][playerMatch.week_num]) {\n            playerWeeks[self.xref][playerMatch.week_num] = 0;\n          }\n          playerWeeks[self.xref][playerMatch.week_num]++;\n        }\n\n        const stats = acc[self.xref] || emptyStats(self.xref, self.name);\n        stats.handicap = self.handicap;\n        stats.wins += self.win ? 1 : 0;\n        stats.losses += self.loss ? 1 : 0;\n        stats.gamesWon += self.games_won;\n        stats.gamesLost += opp.games_won;\n        totals.wins += self.win ? 1 : 0;\n        totals.losses += self.loss ? 1 : 0;\n        totals.gamesWon += self.games_won;\n        totals.gamesLost += opp.games_won;\n        return { ...acc, [self.xref]: stats };\n      }, {}),\n    ).map(([xref, stats]) => ({\n      ...stats,\n      gamePct: stats.gamesWon / (stats.gamesWon + stats.gamesLost),\n      doubles: Object.values(playerWeeks[xref] || {}).filter(n => n > 1).length,\n    }));\n    stats.sort((p1, p2) => p2.gamePct - p1.gamePct);\n    stats.push({\n      xref: 0,\n      name: 'Totals',\n      handicap: ('' as unknown) as number,\n      doubles: ('' as unknown) as number,\n      gamePct: totals.gamesWon / (totals.gamesWon + totals.gamesLost),\n      ...totals,\n    });\n    return stats;\n  }, [playerMatches, selfTeamXref]);\n\n  return (\n    <Table\n      data={stats}\n      columns={[\n        <TableHeader label=\"Name\" />,\n        <TableHeader label=\"HCP\" />,\n        <TableHeader label=\"DB's\" />,\n        <TableHeader label=\"W\" />,\n        <TableHeader label=\"L\" />,\n        <TableHeader label=\"GF\" />,\n        <TableHeader label=\"GA\" />,\n        <TableHeader label=\"PCT\" />,\n      ]}\n    >\n      {({ datum: pr }) => (\n        <Row key={pr.xref}>\n          <Cell>\n            <PlainButton onClick={() => navTo(linkToPlayers, { state: { xref: pr.xref + '' } })}>{pr.name}</PlainButton>\n          </Cell>\n          <Cell>{pr.handicap}</Cell>\n          <Cell>{pr.doubles}</Cell>\n          <Cell>{pr.wins}</Cell>\n          <Cell>{pr.losses}</Cell>\n          <Cell>{pr.gamesWon}</Cell>\n          <Cell>{pr.gamesLost}</Cell>\n          <Cell>{pr.gamePct.toFixed(3)}</Cell>\n        </Row>\n      )}\n    </Table>\n  );\n}\n\nexport default PlayerResults;\n","import React, { useEffect, useState } from 'react';\nimport styled from '@emotion/styled';\nimport ExpandableCard from '@leafygreen-ui/expandable-card';\nimport { H3 } from '@leafygreen-ui/typography';\n\nimport { PlayerMatch, Team, TeamMatch, TeamMatchup, TeamRecord, TeamResult } from '../../types';\n\nimport MatchTable from './match_table';\nimport PlayerResults from './player_results';\n\nconst emptyTeamResult = (): TeamResult => ({ xref: 0, name: '', games_won: 0, matches_won: 0 });\n\nconst Matches = styled.div`\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n  gap: 12px;\n  justify-content: center;\n  max-width: 100%;\n`;\n\ninterface Props {\n  linkToPlayers?: string;\n  playerMatchesByTeamXref: Record<number, PlayerMatch[]>;\n  team?: Team;\n  teamMatchesById: Record<string, TeamMatch>;\n  teamRecordsByXref: Record<number, TeamRecord>;\n}\n\nfunction TeamView({ linkToPlayers, playerMatchesByTeamXref, team, teamMatchesById, teamRecordsByXref }: Props) {\n  const [playerMatchesById, setPlayerMatchesById] = useState<Record<string, PlayerMatch[]>>({});\n  useEffect(() => {\n    const playerMatchesById = (playerMatchesByTeamXref[team?.xref || 0] || []).reduce<Record<string, PlayerMatch[]>>(\n      (acc, playerMatch) => ({\n        ...acc,\n        [playerMatch.match_id]: [...(acc[playerMatch.match_id] || []), playerMatch],\n      }),\n      {},\n    );\n    Object.entries(playerMatchesById).forEach(([matchId, playerMatches]) => {\n      playerMatches.sort((m1, m2) => m1.seq - m2.seq);\n      playerMatchesById[matchId] = playerMatches;\n    });\n    setPlayerMatchesById(playerMatchesById);\n  }, [team?.xref, playerMatchesByTeamXref]);\n\n  if (!team) {\n    return null;\n  }\n\n  return (\n    <>\n      <H3 style={{ marginTop: '1rem' }}>Player Results</H3>\n      <PlayerResults\n        linkToPlayers={linkToPlayers}\n        playerMatches={playerMatchesByTeamXref[team.xref] || []}\n        selfTeamXref={team.xref}\n      />\n      <H3 style={{ marginTop: '1rem' }}>Team Results</H3>\n      <Matches>\n        {team.schedule.map(({ display, match_id, opp }) => {\n          const teamMatchup = newTeamMatchup(team.xref, teamMatchesById[match_id || ''] || { teams: [] });\n          return (\n            <ExpandableCard\n              key={display}\n              title={`${display}: vs. ${opp.name} (${teamRecord(teamRecordsByXref[opp.xref])})`}\n              description={!match_id ? '' : matchDescription(teamMatchup)}\n            >\n              {!match_id && (\n                <PlayerResults\n                  linkToPlayers={linkToPlayers}\n                  playerMatches={playerMatchesByTeamXref[opp.xref] || []}\n                  selfTeamXref={opp.xref}\n                />\n              )}\n              {match_id && (\n                <MatchTable playerMatches={playerMatchesById[match_id || ''] || []} selfTeamXref={team.xref} />\n              )}\n            </ExpandableCard>\n          );\n        })}\n      </Matches>\n    </>\n  );\n}\n\nexport default TeamView;\n\nfunction matchDescription({ self, opp }: TeamMatchup) {\n  return `${self.win ? '✅ Win' : '💩 Loss'}: ${self.matches_won}-${opp.matches_won}, ${self.games_won}-${\n    opp.games_won\n  }`;\n}\n\nfunction newTeamMatchup(selectedTeamXref: number, teamMatch: Pick<TeamMatch, 'teams'>): TeamMatchup {\n  const self = teamMatch.teams.find(t => t.xref === selectedTeamXref) || emptyTeamResult();\n  const opp = teamMatch.teams.find(t => t.xref !== selectedTeamXref) || emptyTeamResult();\n  return { self, opp };\n}\n\nfunction teamRecord(tr = { wins: 0, losses: 0 }) {\n  return `${tr.wins}-${tr.losses}`;\n}\n","import React, { useEffect, useState } from 'react';\nimport { useMediaQuery } from 'react-responsive';\nimport { useNavigate } from 'react-router-dom';\nimport styled from '@emotion/styled';\nimport Modal from '@leafygreen-ui/modal';\nimport { Table, TableHeader, Row, Cell } from '@leafygreen-ui/table';\nimport { H2, H3 } from '@leafygreen-ui/typography';\n\nimport { PlainButton } from '../../components';\nimport { dayOfWeek, PlayerMatch, Season, Team, TeamMatch, TeamRecord } from '../../types';\n\nimport TeamHeader from './team_header';\nimport TeamView from './team_view';\n\nconst Leagues = styled.div`\n  display: flex;\n  flex-wrap: wrap;\n  justify-content: center;\n`;\n\nconst Divisions = styled.div`\n  display: flex;\n  flex-direction: column;\n  margin: 0 1rem;\n`;\n\nconst Division = styled.div`\n  display: flex;\n  flex-direction: column;\n  margin-bottom: 1rem;\n`;\n\ninterface Props {\n  season: Season;\n  playerMatches: PlayerMatch[];\n  playerMatchesByTeamXref: Record<number, PlayerMatch[]>;\n  teamsByXref: Record<number, Team>;\n  teamMatchesById: Record<string, TeamMatch>;\n  teamMatchesByXref: Record<number, TeamMatch[]>;\n  teamRecordsByXref: Record<number, TeamRecord>;\n}\n\nfunction SeasonPage({\n  playerMatchesByTeamXref,\n  season,\n  teamsByXref,\n  teamMatchesById,\n  teamMatchesByXref,\n  teamRecordsByXref,\n}: Props) {\n  const navTo = useNavigate();\n\n  const [teamXrefsByDivision, setTeamXrefsByDivision] = useState<Record<string, number[]>>({});\n  useEffect(() => {\n    setTeamXrefsByDivision(\n      Object.values(teamsByXref).reduce<Record<string, number[]>>(\n        (acc, team) => ({\n          ...acc,\n          [team.division_name]: [...(acc[team.division_name] || []), team.xref],\n        }),\n        {},\n      ),\n    );\n  }, [teamsByXref]);\n\n  const [divisions, setDivisions] = useState<Record<string, TeamRecord[]>>({});\n  useEffect(() => {\n    setDivisions(\n      Object.entries(teamXrefsByDivision).reduce((acc, [divisionName, xrefs]) => {\n        const teamRecords = xrefs.map(\n          xref => teamRecordsByXref[xref] || { xref: 0, name: '', rank: 0, wins: 0, losses: 0, pct: 0 },\n        );\n        teamRecords.sort((tr1, tr2) =>\n          tr1.wins === tr2.wins\n            ? tr1.losses === tr2.losses\n              ? tr2.pct - tr1.pct\n              : tr1.losses - tr2.losses\n            : tr2.wins - tr1.wins,\n        );\n        return {\n          ...acc,\n          [divisionName]: teamRecords.map((tr, i) => ({ ...tr, rank: i + 1 })),\n        };\n      }, {}),\n    );\n  }, [teamXrefsByDivision, teamRecordsByXref]);\n\n  const [modalTeam, setModalTeam] = useState(0);\n\n  const isMobile = useMediaQuery({ query: '(max-width: 720px)' });\n\n  return (\n    <>\n      <Leagues>\n        {season.nights.map(night => (\n          <Divisions key={night}>\n            <H2 style={{ marginBottom: '1rem' }}>{dayOfWeek(night)}</H2>\n            {season.divisions[night]!.map(divisionName => (\n              <Division key={divisionName}>\n                {divisions[divisionName] && (\n                  <>\n                    <H3>{divisionName}</H3>\n                    <Table\n                      data={divisions[divisionName]}\n                      columns={[\n                        <TableHeader label=\"Place\" />,\n                        <TableHeader label=\"Team Name\" />,\n                        <TableHeader label=\"W's\" />,\n                        <TableHeader label=\"L's\" />,\n                        <TableHeader label=\"PCT.\" />,\n                      ]}\n                    >\n                      {({ datum: ts }) => (\n                        <Row key={ts.xref}>\n                          <Cell>{ts.rank}</Cell>\n                          <Cell>\n                            <PlainButton onClick={() => (isMobile ? navTo(ts.xref + '') : setModalTeam(ts.xref))}>\n                              {ts.name}\n                            </PlainButton>\n                          </Cell>\n                          <Cell>{ts.wins}</Cell>\n                          <Cell>{ts.losses}</Cell>\n                          <Cell>{ts.pct.toFixed(3)}</Cell>\n                        </Row>\n                      )}\n                    </Table>\n                  </>\n                )}\n              </Division>\n            ))}\n          </Divisions>\n        ))}\n      </Leagues>\n      <Modal\n        open={!!modalTeam}\n        setOpen={open => {\n          if (!open) {\n            setModalTeam(0);\n          }\n        }}\n      >\n        <>\n          <TeamHeader modalView team={teamsByXref[modalTeam]} teamRecord={teamRecordsByXref[modalTeam]} />\n          <TeamView\n            playerMatchesByTeamXref={playerMatchesByTeamXref}\n            team={teamsByXref[modalTeam]}\n            teamMatchesById={teamMatchesById}\n            teamRecordsByXref={teamRecordsByXref}\n          />\n        </>\n      </Modal>\n    </>\n  );\n}\n\nexport default SeasonPage;\n","import React, { useEffect, useState } from 'react';\nimport { useParams } from 'react-router-dom';\nimport styled from '@emotion/styled';\n\nimport { PlayerMatch, Team, TeamMatch, TeamRecord } from '../../types';\n\nimport TeamHeader from './team_header';\nimport TeamView from './team_view';\n\nconst Dashboard = styled.div`\n  padding: 0 1rem;\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n`;\n\ninterface Props {\n  playerMatchesByTeamXref: Record<number, PlayerMatch[]>;\n  teamsByXref: Record<string, Team>;\n  teamMatchesById: Record<string, TeamMatch>;\n  teamRecordsByXref: Record<string, TeamRecord>;\n}\n\nfunction TeamDashboard({\n  playerMatchesByTeamXref,\n  teamsByXref,\n  teamMatchesById,\n  teamRecordsByXref,\n}: Props) {\n  const { xref } = useParams();\n  const [team, setTeam] = useState<Team>();\n  const [teamRecord, setTeamRecord] = useState<TeamRecord>();\n  useEffect(() => {\n    if (!xref) {\n      return;\n    }\n    setTeam(teamsByXref[xref]);\n    setTeamRecord(teamRecordsByXref[xref]);\n  }, [teamsByXref, teamRecordsByXref, xref]);\n  return (\n    <Dashboard>\n      <TeamHeader team={team} teamRecord={teamRecord} />\n      <TeamView\n        linkToPlayers=\"../players\"\n        playerMatchesByTeamXref={playerMatchesByTeamXref}\n        team={team}\n        teamMatchesById={teamMatchesById}\n        teamRecordsByXref={teamRecordsByXref}\n      />\n    </Dashboard>\n  );\n}\n\nexport default TeamDashboard;\n","import React, { useEffect, useMemo, useState } from 'react';\nimport { useParams } from 'react-router-dom';\nimport { Routes, Route } from 'react-router-dom';\nimport Banner from '@leafygreen-ui/banner';\n\nimport { PageContent } from '../../components';\nimport { AmsterdamKey, PlayerMatch, PlayerResult, Season, Team, TeamMatch, TeamRecord } from '../../types';\n\nimport Admin from './admin';\nimport PlayersDashboard from './players_dashboard';\nimport Standings from './season_standings';\nimport TeamDashboard from './team_dashboard';\n\ninterface Props {\n  seasons: Season[];\n  loadPlayerMatches: (seasonXref: number) => Promise<PlayerMatch[]>;\n  loadTeams: (seasonXref: number) => Promise<Team[]>;\n  loadTeamMatches: (seasonXref: number) => Promise<TeamMatch[]>;\n  saveDivisions: (seasonXref: number, divisions: Season['divisions']) => Promise<void>;\n  saveTeams: (seasonXref: number, teams: Omit<Team, '_id' | 'season_xref' | 'schedule'>[]) => Promise<void>;\n}\n\ninterface MatchStats extends AmsterdamKey {\n  wins: number;\n  losses: number;\n  gamesWon: number;\n  gamesTotal: number;\n}\n\nexport const emptyMatchStats = (xref = 0, name = ''): MatchStats => ({\n  xref,\n  name,\n  wins: 0,\n  losses: 0,\n  gamesWon: 0,\n  gamesTotal: 0,\n});\n\nfunction SeasonPage({ seasons, loadPlayerMatches, loadTeams, loadTeamMatches, saveDivisions, saveTeams }: Props) {\n  const { year, term, type } = useParams();\n\n  const season = useMemo(() => {\n    return seasons.find(s => s.year + '' === year && s.term === term && s.type === type);\n  }, [seasons, year, term, type]);\n\n  const [teams, setTeams] = useState<Team[]>([]);\n  const [teamsByXref, setTeamsByXref] = useState<Record<number, Team>>({});\n  useEffect(() => {\n    if (!season) {\n      return;\n    }\n    loadTeams(season.xref).then(teams => {\n      setTeams(teams);\n      setTeamsByXref(teams.reduce((acc, team) => ({ ...acc, [team.xref]: team }), {}));\n    });\n  }, [loadTeams, season]);\n\n  const [teamMatchesByXref, setTeamMatchesByXref] = useState<Record<number, TeamMatch[]>>({});\n  const [teamRecordsByXref, setTeamRecordsByXref] = useState<Record<number, TeamRecord>>({});\n  const [teamMatchesById, setTeamMatchesById] = useState<Record<string, TeamMatch>>({});\n  useEffect(() => {\n    if (!season) {\n      return;\n    }\n    loadTeamMatches(season.xref).then(teamMatches => {\n      setTeamMatchesByXref(\n        teamMatches.reduce<Record<number, TeamMatch[]>>(\n          (outer, teamMatch) => ({\n            ...outer,\n            ...teamMatch.teams.reduce(\n              (inner, team) => ({\n                ...inner,\n                [team.xref]: [...(outer[team.xref] || []), teamMatch],\n              }),\n              {},\n            ),\n          }),\n          {},\n        ),\n      );\n      const teamStatsyXref = teamMatches.reduce<Record<number, MatchStats>>((outer, teamMatch) => {\n        var gamesTotal = 0;\n        const matchStats = teamMatch.teams.reduce<Record<number, MatchStats>>((inner, team) => {\n          const teamStats: MatchStats = outer[team.xref] || emptyMatchStats(team.xref, team.name);\n          teamStats.wins += team.win ? 1 : 0;\n          teamStats.losses += team.loss ? 1 : 0;\n          teamStats.gamesWon += team.games_won;\n          gamesTotal += team.games_won;\n          return { ...inner, [team.xref]: teamStats };\n        }, {});\n        Object.values(matchStats).forEach(teamStats => {\n          teamStats.gamesTotal += gamesTotal;\n        });\n        return { ...outer, ...matchStats };\n      }, {});\n\n      setTeamRecordsByXref(\n        Object.entries(teamStatsyXref).reduce(\n          (acc, [xref, teamStats]) => ({\n            ...acc,\n            [xref]: {\n              xref: teamStats.xref,\n              name: teamStats.name,\n              rank: 0,\n              wins: teamStats.wins,\n              losses: teamStats.losses,\n              pct: teamStats.gamesWon / teamStats.gamesTotal,\n            },\n          }),\n          {},\n        ),\n      );\n\n      setTeamMatchesById(\n        teamMatches.reduce<Record<string, TeamMatch>>((acc, teamMatch) => ({ ...acc, [teamMatch._id]: teamMatch }), {}),\n      );\n    });\n  }, [loadTeamMatches, season]);\n\n  const [playerMatches, setPlayerMatches] = useState<PlayerMatch[]>([]);\n  const [playerMatchesByXref, setPlayerMatchesByXref] = useState<Record<number, PlayerMatch[]>>({});\n  const [playerMatchesByTeamXref, setPlayerMatchesByTeamXref] = useState<Record<number, PlayerMatch[]>>({});\n  const [playersByTeamXref, setPlayersByTeamXref] = useState<\n    Record<number, Pick<PlayerResult, 'xref' | 'name' | 'team'>[]>\n  >({});\n  useEffect(() => {\n    if (!season) {\n      return;\n    }\n    loadPlayerMatches(season.xref).then(playerMatches => {\n      setPlayerMatches(playerMatches);\n\n      const playerMatchesByXref = playerMatches.reduce<Record<number, PlayerMatch[]>>(\n        (outer, playerMatch) => ({\n          ...outer,\n          ...playerMatch.players.reduce(\n            (inner, player) => ({\n              ...inner,\n              [player.xref]: [...(outer[player.xref] || []), playerMatch],\n            }),\n            {},\n          ),\n        }),\n        {},\n      );\n      Object.values(playerMatchesByXref).forEach(playerMatches => {\n        playerMatches.sort((pm1, pm2) => pm2.date.getTime() - pm1.date.getTime());\n      });\n      setPlayerMatchesByXref(playerMatchesByXref);\n\n      setPlayerMatchesByTeamXref(\n        playerMatches.reduce<Record<number, PlayerMatch[]>>(\n          (outer, playerMatch) => ({\n            ...outer,\n            ...playerMatch.players.reduce(\n              (inner, player) => ({\n                ...inner,\n                [player.team.xref]: [...(outer[player.team.xref] || []), playerMatch],\n              }),\n              {},\n            ),\n          }),\n          {},\n        ),\n      );\n\n      setPlayersByTeamXref(\n        Object.entries(\n          playerMatches.reduce<Record<number, Record<number, Pick<PlayerResult, 'xref' | 'name' | 'team'>>>>(\n            (outer, playerMatch) => ({\n              ...outer,\n              ...playerMatch.players.reduce(\n                (inner, player) => ({\n                  ...inner,\n                  [player.team.xref]: {\n                    ...(outer[player.team.xref] || {}),\n                    [player.xref]: player,\n                  },\n                }),\n                {},\n              ),\n            }),\n            {},\n          ),\n        ).reduce((acc, [teamXref, playersMap]) => {\n          const players = Object.values(playersMap);\n          players.sort((p1, p2) => p1.xref - p2.xref);\n          return { ...acc, [teamXref]: players };\n        }, {}),\n      );\n    });\n  }, [loadPlayerMatches, season]);\n\n  if (!season) {\n    return (\n      <PageContent>\n        <Banner variant=\"danger\">The specified season does not exist, please check your URL.</Banner>\n      </PageContent>\n    );\n  }\n  return (\n    <Routes>\n      <Route\n        path=\"/\"\n        element={\n          <Standings\n            season={season}\n            playerMatches={playerMatches}\n            playerMatchesByTeamXref={playerMatchesByTeamXref}\n            teamsByXref={teamsByXref}\n            teamMatchesById={teamMatchesById}\n            teamMatchesByXref={teamMatchesByXref}\n            teamRecordsByXref={teamRecordsByXref}\n          />\n        }\n      />\n      <Route\n        path=\"admin\"\n        element={\n          <Admin\n            season={season}\n            teams={teams}\n            saveDivisions={divisions => saveDivisions(season.xref, divisions)}\n            saveTeams={teams => saveTeams(season.xref, teams)}\n          />\n        }\n      />\n      <Route\n        path=\"players\"\n        element={\n          <PlayersDashboard\n            playerMatchesByXref={playerMatchesByXref}\n            playersByTeamXref={playersByTeamXref}\n            teamsByXref={teamsByXref}\n            teamMatchesById={teamMatchesById}\n          />\n        }\n      />\n      <Route\n        path=\":xref\"\n        element={\n          <TeamDashboard\n            playerMatchesByTeamXref={playerMatchesByTeamXref}\n            teamsByXref={teamsByXref}\n            teamMatchesById={teamMatchesById}\n            teamRecordsByXref={teamRecordsByXref}\n          />\n        }\n      />\n    </Routes>\n  );\n}\n\nexport default SeasonPage;\n","import React, { useState } from 'react';\nimport Checkbox from '@leafygreen-ui/checkbox';\nimport FormFooter from '@leafygreen-ui/form-footer';\nimport { Option, Select } from '@leafygreen-ui/select';\nimport TextInput from '@leafygreen-ui/text-input';\nimport { Body } from '@leafygreen-ui/typography';\n\nimport { isLeagueType, isSeasonTerm, DayOfWeek, LeagueType, Season, SeasonTerm } from '../../types';\n\ninterface Props {\n  saveSeason: (season: Omit<Season, '_id'>) => Promise<void>;\n}\n\nfunction NewSeasonForm({ saveSeason }: Props) {\n  const [yearInput, setYearInput] = useState('');\n  const [termInput, setTermInput] = useState('');\n  const [typeInput, setTypeInput] = useState('');\n  const [xrefInput, setXrefInput] = useState('');\n  const [name, setName] = useState('');\n  const [monday, setMonday] = useState(false);\n  const [tuesday, setTuesday] = useState(false);\n  const [wednesday, setWednesday] = useState(false);\n  const [thursday, setThursday] = useState(false);\n  const [friday, setFriday] = useState(false);\n  const [saturday, setSaturday] = useState(false);\n  const [sunday, setSunday] = useState(false);\n  const [numWeeksInput, setNumWeeksInput] = useState('');\n  const [errMsg, setErrMsg] = useState('');\n  return (\n    <>\n      <Select label=\"Year\" placeholder=\"Choose a year...\" value={yearInput} onChange={setYearInput}>\n        <Option value=\"2022\">2022</Option>\n      </Select>\n      <Select label=\"Term\" placeholder=\"Choose a term...\" value={termInput} onChange={setTermInput}>\n        <Option value=\"winter\">Winter</Option>\n        <Option value=\"spring\">Spring</Option>\n        <Option value=\"summer\">Summer</Option>\n        <Option value=\"fall\">Fall</Option>\n      </Select>\n      <Select label=\"League type\" placeholder=\"Choose a league...\" value={typeInput} onChange={setTypeInput}>\n        <Option value=\"team_8ball\">Team 8 Ball</Option>\n      </Select>\n      <TextInput\n        label=\"Amsterdam Key\"\n        description=\"Enter the Amsterdam site season id\"\n        onChange={e => setXrefInput(e.target.value)}\n        value={xrefInput}\n      />\n      <TextInput\n        label=\"Name\"\n        description=\"Enter the season name\"\n        onChange={e => setName(e.target.value)}\n        value={name}\n      />\n      <div>\n        <Body>Select the nights the league plays on</Body>\n        <div>\n          <Checkbox label=\"Monday\" checked={monday} onChange={e => setMonday(e.target.checked)} />\n          <Checkbox label=\"Tuesday\" checked={tuesday} onChange={e => setTuesday(e.target.checked)} />\n          <Checkbox label=\"Wednesday\" checked={wednesday} onChange={e => setWednesday(e.target.checked)} />\n          <Checkbox label=\"Thursday\" checked={thursday} onChange={e => setThursday(e.target.checked)} />\n          <Checkbox label=\"Friday\" checked={friday} onChange={e => setFriday(e.target.checked)} />\n          <Checkbox label=\"Saturday\" checked={saturday} onChange={e => setSaturday(e.target.checked)} />\n          <Checkbox label=\"Sunday\" checked={sunday} onChange={e => setSunday(e.target.checked)} />\n        </div>\n      </div>\n      <TextInput\n        label=\"Season length\"\n        description=\"Enter the number of weeks of the regular season\"\n        onChange={e => setNumWeeksInput(e.target.value)}\n        value={numWeeksInput}\n      />\n      <FormFooter\n        primaryButton={{\n          text: 'Save',\n          onClick: async e => {\n            e.stopPropagation();\n\n            var year = 0;\n            try {\n              year = parseInt(yearInput, 10);\n            } catch (e) {\n              setErrMsg(`invalid year value: ${e}`);\n              return;\n            }\n\n            var term: SeasonTerm = 'winter';\n            if (isSeasonTerm(termInput)) {\n              term = termInput;\n            } else {\n              setErrMsg(`invalid season term: ${termInput}`);\n              return;\n            }\n\n            var type: LeagueType = 'team_8ball';\n            if (isLeagueType(typeInput)) {\n              term = termInput;\n            } else {\n              setErrMsg(`invalid league type: ${termInput}`);\n              return;\n            }\n\n            var xref = 0;\n            try {\n              xref = parseInt(xrefInput, 10);\n            } catch (e) {\n              setErrMsg(`invalid amsterdam key: ${e}`);\n              return;\n            }\n\n            var numWeeks = 0;\n            try {\n              numWeeks = parseInt(numWeeksInput, 10);\n            } catch (e) {\n              setErrMsg(`invalid amsterdam key: ${e}`);\n              return;\n            }\n\n            const nights: DayOfWeek[] = [];\n            if (monday) {\n              nights.push('monday');\n            }\n            if (tuesday) {\n              nights.push('tuesday');\n            }\n            if (wednesday) {\n              nights.push('wednesday');\n            }\n            if (thursday) {\n              nights.push('thursday');\n            }\n            if (friday) {\n              nights.push('friday');\n            }\n            if (saturday) {\n              nights.push('saturday');\n            }\n            if (sunday) {\n              nights.push('sunday');\n            }\n\n            try {\n              await saveSeason({\n                year,\n                term,\n                type,\n                xref,\n                name,\n                num_weeks: numWeeks,\n                nights,\n                divisions: nights.reduce((acc, night) => ({ ...acc, [night]: [] }), {}),\n              });\n            } catch ({ error }) {\n              setErrMsg(`failed to save season: ${error}`);\n            }\n          },\n        }}\n        errorMessage={errMsg}\n      />\n    </>\n  );\n}\n\nexport default NewSeasonForm;\n","import React, { useState } from 'react';\nimport { useNavigate } from 'react-router-dom';\nimport styled from '@emotion/styled';\nimport Button from '@leafygreen-ui/button';\nimport Card from '@leafygreen-ui/card';\nimport Icon from '@leafygreen-ui/icon';\nimport { Menu, MenuItem } from '@leafygreen-ui/menu';\nimport Modal from '@leafygreen-ui/modal';\nimport { H2, Subtitle } from '@leafygreen-ui/typography';\n\nimport { useAtlas } from '../../realm';\nimport { Season } from '../../types';\n\nimport NewSeasonForm from './new_season_form';\n\nconst StyledPage = styled.div``;\n\nconst CardList = styled.div`\n  display: flex;\n  flex-wrap: wrap;\n`;\n\nconst CardTitle = styled.div`\n  display: flex;\n  justify-content: space-between;\n`;\n\ninterface Props {\n  seasons: Season[];\n  saveSeason: (season: Omit<Season, '_id'>) => Promise<void>;\n}\n\nfunction HomePage({ seasons, saveSeason }: Props) {\n  const navTo = useNavigate();\n  const { data } = useAtlas();\n\n  const [modalOpen, setModalOpen] = useState(false);\n\n  if (!data) {\n    return null;\n  }\n\n  return (\n    <StyledPage>\n      <H2>Pick a season:</H2>\n      <CardList>\n        {seasons.map(season => (\n          <Card\n            style={{ minWidth: '360px' }}\n            key={season.xref}\n            onClick={() => navTo(`${season.year}/${season.term}/${season.type}`)}\n          >\n            <CardTitle>\n              <Subtitle>{season.name}</Subtitle>\n              <Menu\n                align=\"bottom\"\n                justify=\"start\"\n                trigger={\n                  <Button type=\"button\" size=\"xsmall\" onClick={e => e.stopPropagation()} name=\"options\">\n                    <Icon glyph=\"Ellipsis\" />\n                  </Button>\n                }\n              >\n                <MenuItem>Delete season</MenuItem>\n              </Menu>\n            </CardTitle>\n          </Card>\n        ))}\n        <Card style={{ minWidth: '180px' }} onClick={() => setModalOpen(true)}>\n          Create a new season...\n        </Card>\n      </CardList>\n      <Modal open={modalOpen} setOpen={setModalOpen}>\n        <NewSeasonForm saveSeason={s => saveSeason(s).then(() => setModalOpen(false))} />\n      </Modal>\n    </StyledPage>\n  );\n}\n\nexport default HomePage;\n","import React, { useEffect, useState } from 'react';\nimport { Routes, Route } from 'react-router-dom';\n\nimport { useAtlas } from '../../realm';\nimport { Season, Team } from '../../types';\n\nimport SeasonDashboard from './season_dashboard';\nimport SeasonsDashboard from './seasons_dashboard';\n\nfunction Seasons() {\n  const { data } = useAtlas();\n\n  const [seasons, setSeasons] = useState<Season[]>([]);\n  useEffect(() => {\n    if (!data) {\n      return;\n    }\n    data.seasons().find().then(setSeasons);\n  }, [data]);\n\n  if (!data) {\n    return null; // unreachable in a protected route\n  }\n\n  const loadPlayerMatches = (seasonXref: number) => data.playerMatches().find({ season_xref: seasonXref });\n\n  const loadTeams = (seasonXref: number) => data.teams().find({ season_xref: seasonXref });\n\n  const loadTeamMatches = (seasonXref: number) => data.teamMatches().find({ season_xref: seasonXref });\n\n  const saveDivisions = (seasonXref: number, divisions: Season['divisions']) =>\n    data\n      .seasons()\n      .updateOne({ xref: seasonXref }, { $set: { divisions } })\n      .then(({ modifiedCount }) => {\n        if (modifiedCount !== 1) {\n          throw new Error('failed to update season ' + seasonXref);\n        }\n        setSeasons(\n          seasons.map(season => {\n            if (season.xref !== seasonXref) {\n              return season;\n            }\n            return { ...season, divisions };\n          }),\n        );\n      });\n\n  const saveSeason = (season: Omit<Season, '_id'>) =>\n    data\n      .seasons()\n      .insertOne(season)\n      .then(({ insertedId }) => setSeasons([...seasons, { ...season, _id: insertedId }]));\n\n  const saveTeams = (seasonXref: number, teams: Omit<Team, '_id' | 'season_xref' | 'schedule'>[]) =>\n    data\n      .teams()\n      .insertMany(teams.map(team => ({ ...team, season_xref: seasonXref, schedule: [] })))\n      .then(() => {});\n\n  return (\n    <Routes>\n      <Route path=\"/\" element={<SeasonsDashboard seasons={seasons} saveSeason={saveSeason} />} />\n      <Route\n        path=\":year/:term/:type/*\"\n        element={\n          <SeasonDashboard\n            seasons={seasons}\n            loadPlayerMatches={loadPlayerMatches}\n            loadTeams={loadTeams}\n            loadTeamMatches={loadTeamMatches}\n            saveDivisions={saveDivisions}\n            saveTeams={saveTeams}\n          />\n        }\n      />\n    </Routes>\n  );\n}\n\nexport default Seasons;\n","import React from 'react';\nimport { Routes, Route } from 'react-router-dom';\nimport { useMediaQuery } from 'react-responsive';\n\nimport { LoginPage, ProtectedRoute } from './auth';\nimport { Header, MobileHeader } from './headers';\n\nimport HomePage from '../pages/home';\nimport SeasonsPage from '../pages/seasons';\n\nfunction App() {\n  const isMobile = useMediaQuery({ query: '(max-width: 720px)' });\n  return (\n    <>\n      {isMobile ? <MobileHeader /> : <Header />}\n      <Routes>\n        <Route\n          path=\"/\"\n          element={\n            <ProtectedRoute>\n              <HomePage />\n            </ProtectedRoute>\n          }\n        />\n        <Route\n          path=\"seasons/*\"\n          element={\n            <ProtectedRoute>\n              <SeasonsPage />\n            </ProtectedRoute>\n          }\n        />\n        <Route path=\"login\" element={<LoginPage />} />\n      </Routes>\n    </>\n  );\n}\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import { css } from '@emotion/react'\n\nconst CDN = 'https://d2va9gm4j17fy9.cloudfront.net';\nconst fontsURL = `${CDN}/fonts`;\n\nconst docStyles = css`\n  @font-face {\n    font-family: 'Akzidenz';\n    font-weight: normal;\n    src: url('${fontsURL}/akzidgrostdreg.eot');\n    /* IE9 Compat Modes */\n    src: url('${fontsURL}/akzidgrostdreg.eot?#iefix')\n        format('embedded-opentype'),\n      /* Pretty Modern Browsers */ url('${fontsURL}/akzidgrostdreg.ttf')\n        format('truetype'),\n      /* Safari, Android, iOS */ url('${fontsURL}/akzidgrostdreg.svg#Akzidenz')\n        format('svg');\n    /* Legacy iOS */\n  }\n\n  @font-face {\n    font-family: 'Akzidenz';\n    font-weight: 600;\n    src: url('${fontsURL}/akzidgrostdmed.eot');\n    /* IE9 Compat Modes */\n    src: url('${fontsURL}/akzidgrostdmed.eot?#iefix')\n        format('embedded-opentype'),\n      /* IE6-IE8 */ url('${fontsURL}/akzidgrostdmed.woff') format('woff'),\n      /* Pretty Modern Browsers */ url('${fontsURL}/akzidgrostdmed.ttf')\n        format('truetype'),\n      /* Safari, Android, iOS */ url('${fontsURL}/akzidgrostdmed.svg#Akzidenz')\n        format('svg');\n    /* Legacy iOS */\n  }\n\n  @font-face {\n    font-family: 'Akzidenz';\n    font-weight: bold;\n    src: url('${fontsURL}/akzidgrostdmed.eot');\n    /* IE9 Compat Modes */\n    src: url('${fontsURL}/akzidgrostdmed.eot?#iefix')\n        format('embedded-opentype'),\n      /* IE6-IE8 */ url('${fontsURL}/akzidgrostdmed.woff') format('woff'),\n      /* Pretty Modern Browsers */ url('${fontsURL}/akzidgrostdmed.ttf')\n        format('truetype'),\n      /* Safari, Android, iOS */ url('${fontsURL}/akzidgrostdmed.svg#Akzidenz')\n        format('svg');\n    /* Legacy iOS */\n  }\n\n  html {\n    font-family: 'Akzidenz', 'Helvetica Neue', Helvetica, Arial, sans-serif;\n    font-weight: normal;\n    font-style: normal;\n  }\n\n  body {\n    margin: 0;\n  }\n\n  *,\n  *:before,\n  *:after {\n    box-sizing: border-box;\n  }\n`\n\n\nconst meyersWebReset = css`\n/* http://meyerweb.com/eric/tools/css/reset/\n   v2.0 | 20110126\n   License: none (public domain)\n*/\nhtml, body, div, span, applet, object, iframe,\nh1, h2, h3, h4, h5, h6, p, blockquote, pre,\na, abbr, acronym, address, big, cite, code,\ndel, dfn, em, img, ins, kbd, q, s, samp,\nsmall, strike, strong, sub, sup, tt, var,\nb, u, i, center,\ndl, dt, dd, ol, ul, li,\nfieldset, form, label, legend,\ntable, caption, tbody, tfoot, thead, tr, th, td,\narticle, aside, canvas, details, embed,\nfigure, figcaption, footer, header, hgroup,\nmenu, nav, output, ruby, section, summary,\ntime, mark, audio, video {\n\tmargin: 0;\n\tpadding: 0;\n\tborder: 0;\n\tfont-size: 100%;\n\tfont: inherit;\n\tvertical-align: baseline;\n}\n/* HTML5 display-role reset for older browsers */\narticle, aside, details, figcaption, figure,\nfooter, header, hgroup, menu, nav, section {\n\tdisplay: block;\n}\nbody {\n\tline-height: 1;\n}\nol, ul {\n\tlist-style: none;\n}\nblockquote, q {\n\tquotes: none;\n}\nblockquote:before, blockquote:after,\nq:before, q:after {\n\tcontent: '';\n\tcontent: none;\n}\ntable {\n\tborder-collapse: collapse;\n\tborder-spacing: 0;\n}\n`;\n\n\nfunction styles() {\n  return [\n    meyersWebReset,\n    docStyles,\n  ]\n}\n\nexport default styles;\n","import { palette } from '@leafygreen-ui/palette';\n\nconst theme = {\n  colors: {\n    black: '#000000',\n    white: '#ffffff',\n    offwhite: '#fffed1',\n    grays: {\n      base: '#282c34',\n    },\n    reds: {\n      base: '#4d0a05',\n      light1: '#8a1a10',\n      light2: '#b42619',\n      light3: '#df3121',\n    },\n    blues: {\n      light1: '#61dafb',\n    },\n    lg: palette,\n  },\n  typography: {\n    fonts: {\n      code: `source-code-pro, Menlo, Monaco, Consolas, 'Courier New', monospace`,\n    },\n  },\n};\n\nexport type Theme = typeof theme;\nexport default theme;\n","import React from 'react';\nimport { Global, ThemeProvider } from '@emotion/react';\nimport LeafygreenProvider from '@leafygreen-ui/leafygreen-provider';\nimport ReactDOM from 'react-dom/client';\nimport { BrowserRouter } from 'react-router-dom';\n\nimport App from './app';\nimport { AtlasProvider, RealmProvider } from './realm';\nimport reportWebVitals from './reportWebVitals';\nimport styles from './styles';\nimport theme from './theme';\n\nconst root = ReactDOM.createRoot(document.getElementById('root') as HTMLElement);\nroot.render(\n  <React.StrictMode>\n    <BrowserRouter basename=\"/amsterdam\">\n      <RealmProvider>\n        <AtlasProvider>\n          <LeafygreenProvider>\n            <ThemeProvider theme={theme}>\n              <Global styles={styles} />\n              <App />\n            </ThemeProvider>\n          </LeafygreenProvider>\n        </AtlasProvider>\n      </RealmProvider>\n    </BrowserRouter>\n  </React.StrictMode>,\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n// reportWebVitals(console.log);\n"],"sourceRoot":""}